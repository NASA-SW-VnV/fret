[
    {
        "reqid": "UC5_R_5_1",
        "parent_reqid": "UC5_R_5",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_9:\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting control objectives (settling time, overshoot, steady state error)\n",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null) & (observedThrust = V1) & (pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (settlingTime >= 0) & (settlingTime <= settlingTimeMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "settlingTime",
                "settlingTimeMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                207
            ],
            "component_name": "Controller",
            "componentTextRange": [
                209,
                218
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                226,
                265
            ],
            "post_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                267,
                353
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))",
            "post_condition_unexp_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | FTP)))) -> <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (! (Y TRUE)))))) -> (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) -> (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e64f08d0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_7_1",
        "parent_reqid": "UC5_R_7",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_11\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null)&(observedThrust = V1) & (pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                205
            ],
            "component_name": "Controller",
            "componentTextRange": [
                207,
                216
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                224,
                263
            ],
            "post_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                265,
                369
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))",
            "post_condition_unexp_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_coco": "(((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | FTP)))) -> <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (! (Y TRUE)))))) -> (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) -> (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e64f56f0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_2_2",
        "parent_reqid": "UC5_R_2",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) & (!pilotInput => setThrust = V1)  & (observedThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (overshoot >= 0) & (overshoot <= overshootMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V1",
                "observedThrust",
                "V2",
                "inactiveThreshold",
                "overshoot",
                "overshootMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                197
            ],
            "component_name": "Controller",
            "componentTextRange": [
                199,
                208
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                216,
                255
            ],
            "post_condition": "(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                257,
                334
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2))))",
            "post_condition_unexp_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (! (Y TRUE)))))) -> (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e64fa510-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_11_1",
        "parent_reqid": "UC5_R_11",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_15\n* Preconditions: Aircraft is in operating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, pilotinput changes from A1 to A2, and outside air pressure abruptly changes from P1 to P2 \n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold) &(absolutePressureDifference > pressureThreshold) &(observedThrust = V1) &(pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy  (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                228
            ],
            "component_name": "Controller",
            "componentTextRange": [
                230,
                239
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                247,
                286
            ],
            "post_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                288,
                393
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))",
            "post_condition_unexp_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_coco": "(((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (! (Y TRUE)))))) -> (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6504150-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_8_1",
        "parent_reqid": "UC5_R_8",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_12\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null) & (!pilotInput => setThrust = V1) & (observedThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V1",
                "observedThrust",
                "V2",
                "inactiveThreshold",
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                208
            ],
            "component_name": "Controller",
            "componentTextRange": [
                210,
                219
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                227,
                266
            ],
            "post_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                268,
                372
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2))))",
            "post_condition_unexp_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_coco": "(((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (! (Y TRUE)))))) -> (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e650b680-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_2_3",
        "parent_reqid": "UC5_R_2",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) & (!pilotInput => setThrust = V1) & (observedThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V1",
                "observedThrust",
                "V2",
                "inactiveThreshold",
                "steadyStateError",
                "steadyStateErrorMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                196
            ],
            "component_name": "Controller",
            "componentTextRange": [
                198,
                207
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                215,
                254
            ],
            "post_condition": "(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                256,
                354
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2))))",
            "post_condition_unexp_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (! (Y TRUE)))))) -> (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65104a0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_9_1",
        "parent_reqid": "UC5_R_9",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_13\n* Preconditions: Aircraft is in operating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, pilot input changes from A1 to A2, and outside air pressure abruptly changes from P1 to P2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting control objectives (settling time, overshoot, steady state error)\n\n",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold) &(absolutePressureDifference > pressureThreshold) & (observedThrust = V1) &(pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (settlingTime >= 0) & (settlingTime <= settlingTimeMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "settlingTime",
                "settlingTimeMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                229
            ],
            "component_name": "Controller",
            "componentTextRange": [
                231,
                240
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                248,
                287
            ],
            "post_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                289,
                375
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))",
            "post_condition_unexp_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (! (Y TRUE)))))) -> (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65179d0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_5_2",
        "parent_reqid": "UC5_R_5",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null)& (observedThrust = V1) &(pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (overshoot >= 0) & (overshoot <= overshootMax) &(observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "overshoot",
                "overshootMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                205
            ],
            "component_name": "Controller",
            "componentTextRange": [
                207,
                216
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                224,
                263
            ],
            "post_condition": "(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                265,
                341
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))",
            "post_condition_unexp_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | FTP)))) -> <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (! (Y TRUE)))))) -> (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) -> (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e651c7f0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_9_2",
        "parent_reqid": "UC5_R_9",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold)&(absolutePressureDifference > pressureThreshold)& (observedThrust = V1) &(pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (overshoot >= 0) & (overshoot <= overshootMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "overshoot",
                "overshootMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                227
            ],
            "component_name": "Controller",
            "componentTextRange": [
                229,
                238
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                246,
                285
            ],
            "post_condition": "(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                287,
                364
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))",
            "post_condition_unexp_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (! (Y TRUE)))))) -> (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6526430-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_5_3",
        "parent_reqid": "UC5_R_5",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null)& (observedThrust = V1) &(pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "steadyStateError",
                "steadyStateErrorMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                205
            ],
            "component_name": "Controller",
            "componentTextRange": [
                207,
                216
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                224,
                263
            ],
            "post_condition": "(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                265,
                363
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))",
            "post_condition_unexp_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | FTP)))) -> <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (! (Y TRUE)))))) -> (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) -> (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e652b250-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_12_1",
        "parent_reqid": "UC5_R_12",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_16\n* Preconditions: Aircraft is in operating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, small perturbations in non-pilot input cause it to change to V2, and outside air pressure abruptly changes from P1 to P2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold)&(absolutePressureDifference > pressureThreshold) & (observedThrust = V2) & (!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                230
            ],
            "component_name": "Controller",
            "componentTextRange": [
                232,
                241
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                249,
                288
            ],
            "post_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                290,
                394
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))",
            "post_condition_unexp_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_coco": "(((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (! (Y TRUE)))))) -> (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6532780-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_9_3",
        "parent_reqid": "UC5_R_9",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold)&(absolutePressureDifference > pressureThreshold)& (observedThrust = V1) &(pilotInput => setThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "steadyStateError",
                "steadyStateErrorMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                227
            ],
            "component_name": "Controller",
            "componentTextRange": [
                229,
                238
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                246,
                285
            ],
            "post_condition": "(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                287,
                385
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))",
            "post_condition_unexp_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) | (! (Y TRUE)))))) -> (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6539cb0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_4_1",
        "parent_reqid": "UC5_R_4",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_7\n* Preconditions: Aircraft is in operating mode M and sensor S value deviates at most +/-R% from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)\n\nUC5_TC_8\n* Preconditions: Aircraft is in operating mode M and sensor S value is not available (sensor is out of order)\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null)& (!pilotInput => setThrust = V1) & (observedThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V1",
                "observedThrust",
                "V2",
                "inactiveThreshold",
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                195
            ],
            "component_name": "Controller",
            "componentTextRange": [
                197,
                206
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                214,
                253
            ],
            "post_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                255,
                359
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2))))",
            "post_condition_unexp_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))",
            "post_condition_coco": "(((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (! (Y TRUE)))))) -> (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e653ead0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_3_1",
        "parent_reqid": "UC5_R_3",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_5:\n* Preconditions: Aircraft is in operating mode M and sensor S value deviates at most +/-R % from nominal value\n* Input conditions/steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)\n\nUC5_TC_6:\n* Preconditions: Aircraft is in operating mode M and sensor S value is not available (sensor is out of order)\n* Input conditions / steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) & (observedThrust = V1) & (pilotInput => setThrust = V2))  Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V1",
                "pilotInput",
                "setThrust",
                "V2",
                "inactiveThreshold",
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                195
            ],
            "component_name": "Controller",
            "componentTextRange": [
                198,
                207
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                215,
                254
            ],
            "post_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                256,
                360
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( observedThrust = V1 ) & ( pilotInput => setThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2)))))",
            "post_condition_unexp_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))",
            "post_condition_coco": "(((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))</i></b>)) | FTP)))) -> <b><i>(((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))))) | (! (Y TRUE)))))) -> (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (observedThrust = V1)) & (pilotInput -> (setThrust = V2))))) -> (((diff_ref_obs < inactiveThreshold) V ((((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (observedThrust=V1)) and (pilotInput => (setThrust=V2))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65438f0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_14_1",
        "parent_reqid": "UC5_R_14",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "in nominal mode when (diff_setNL_observedNL > NLmax)  if (!pilotInput => surgeStallAvoidance) Controller shall until (diff_setNL_observedNL < NLmin)  satisfy (newMode=surgeStallPrevention)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "nominal",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "surgeStallPrevention"
            ],
            "scope_mode": "nominal",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! pilotInput => surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))",
            "conditionTextRange": [
                16,
                92
            ],
            "component_name": "Controller",
            "componentTextRange": [
                94,
                103
            ],
            "stop_condition": "(( diff_setNL_observedNL < NLmin ))",
            "timingTextRange": [
                111,
                147
            ],
            "post_condition": "(( newMode = surgeStallPrevention ))",
            "responseTextRange": [
                150,
                187
            ],
            "diagramVariables": "M = <b><i>nominal</i></b>, TC = <b><i>((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL < NLmin ))</i></b>, Response = <b><i>(( newMode = surgeStallPrevention ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>nominal</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_coco": "((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance))",
            "post_condition_unexp_pt": "(newMode = surgeStallPrevention)",
            "post_condition_unexp_ft": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_pt": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_ft": "(newMode = surgeStallPrevention)",
            "post_condition_coco": "(newMode=surgeStallPrevention)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL<NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL < NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>nominal</i></b> & (! LAST))) | (X (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))) & (<b><i>nominal</i></b> -> (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))",
            "pt": "((H (Lin_<b><i>nominal</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))) & (((! Lin_<b><i>nominal</i></b>) S ((! Lin_<b><i>nominal</i></b>) & Fin_<b><i>nominal</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))",
            "ptExpanded": "((H (((! nominal) & (Y nominal)) -> (Y ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))) & (((! ((! nominal) & (Y nominal))) S ((! ((! nominal) & (Y nominal))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) -> ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))",
            "ftExpanded": "((LAST V ((! ((((! nominal) & (! LAST)) & (X nominal)) & (! LAST))) | (X (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))) & (nominal -> (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))",
            "CoCoSpecCode": "((H((( not nominal) and (YtoPre(nominal))) => (YtoPre(SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))) and ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not (( not nominal) and (YtoPre(nominal)))) )) => (SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e654d530-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_6_1",
        "parent_reqid": "UC5_R_6",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_10\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting control objectives (settling time, overshoot, steady state error)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null) & (observedThrust = V2) & (!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (settlingTime >= 0) & (settlingTime <= settlingTimeMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "settlingTime",
                "settlingTimeMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                208
            ],
            "component_name": "Controller",
            "componentTextRange": [
                210,
                219
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                227,
                266
            ],
            "post_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                268,
                354
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))",
            "post_condition_unexp_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>)) | FTP)))) -> <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) | (! (Y TRUE)))))) -> (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) -> (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6552350-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_10_1",
        "parent_reqid": "UC5_R_10",
        "project": "EngineController2.1",
        "rationale": "UC5_TC_14\n* Preconditions: Aircraft is inoperating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, small perturbations in non-pilot input cause it to change to V2, and outside air pressure abruptly changes from P1 to P2\n* Expected results: Observed aircraft thrust returns to value V1, respecting control objectives (settling time, overshoot, steady state error)",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold)&(absolutePressureDifference > pressureThreshold) &(observedThrust = V2) &(!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (settlingTime >= 0) & (settlingTime <= settlingTimeMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "settlingTime",
                "settlingTimeMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                228
            ],
            "component_name": "Controller",
            "componentTextRange": [
                230,
                239
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                247,
                286
            ],
            "post_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                288,
                374
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))",
            "post_condition_unexp_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (! (Y TRUE)))))) -> (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6557170-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_6_2",
        "parent_reqid": "UC5_R_6",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null)& (observedThrust = V2) & (!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (overshoot >= 0) & (overshoot <= overshootMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "overshoot",
                "overshootMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                207
            ],
            "component_name": "Controller",
            "componentTextRange": [
                209,
                218
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                226,
                265
            ],
            "post_condition": "(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                267,
                344
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))",
            "post_condition_unexp_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>)) | FTP)))) -> <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) | (! (Y TRUE)))))) -> (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) -> (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e655bf90-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_14_2",
        "parent_reqid": "UC5_R_14",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "in surgeStallPrevention mode when (diff_setNL_observedNL < NLmax) if (!pilotInput => !surgeStallAvoidance) Controller shall until (diff_setNL_observedNL > NLmin) satisfy newMode=nominal",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "surgeStallPrevention",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "nominal"
            ],
            "scope_mode": "surgeStallPrevention",
            "scopeTextRange": [
                0,
                27
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! pilotInput => ! surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))",
            "conditionTextRange": [
                29,
                105
            ],
            "component_name": "Controller",
            "componentTextRange": [
                107,
                116
            ],
            "stop_condition": "(( diff_setNL_observedNL > NLmin ))",
            "timingTextRange": [
                124,
                160
            ],
            "post_condition": "(newMode = nominal)",
            "responseTextRange": [
                162,
                184
            ],
            "diagramVariables": "M = <b><i>surgeStallPrevention</i></b>, TC = <b><i>((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL > NLmin ))</i></b>, Response = <b><i>(newMode = nominal)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>surgeStallPrevention</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_coco": "((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance)))",
            "post_condition_unexp_pt": "(newMode = nominal)",
            "post_condition_unexp_ft": "(newMode = nominal)",
            "post_condition_SMV_pt": "(newMode = nominal)",
            "post_condition_SMV_ft": "(newMode = nominal)",
            "post_condition_coco": "(newMode=nominal)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL>NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL > NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>surgeStallPrevention</i></b> & (! LAST))) | (X (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))) & (<b><i>surgeStallPrevention</i></b> -> (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))",
            "pt": "((H (Lin_<b><i>surgeStallPrevention</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))) & (((! Lin_<b><i>surgeStallPrevention</i></b>) S ((! Lin_<b><i>surgeStallPrevention</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))",
            "ptExpanded": "((H (((! surgeStallPrevention) & (Y surgeStallPrevention)) -> (Y ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))) & (((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) S ((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) -> ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))",
            "ftExpanded": "((LAST V ((! ((((! surgeStallPrevention) & (! LAST)) & (X surgeStallPrevention)) & (! LAST))) | (X (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))) & (surgeStallPrevention -> (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))",
            "CoCoSpecCode": "((H((( not surgeStallPrevention) and (YtoPre(surgeStallPrevention))) => (YtoPre(SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))) and ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not (( not surgeStallPrevention) and (YtoPre(surgeStallPrevention)))) )) => (SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6565bd0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_10_2",
        "parent_reqid": "UC5_R_10",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold)&(absolutePressureDifference > pressureThreshold)&(observedThrust = V2) &(!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (overshoot >= 0) & (overshoot <= overshootMax) &(observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "overshoot",
                "overshootMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                227
            ],
            "component_name": "Controller",
            "componentTextRange": [
                229,
                238
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                246,
                285
            ],
            "post_condition": "(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                287,
                363
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))",
            "post_condition_unexp_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (! (Y TRUE)))))) -> (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e656d100-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_2_1",
        "parent_reqid": "UC5_R_2",
        "project": "EngineController2.1",
        "rationale": "captures UC5_TC_3 and UC5_TC_4 (mostly)\n\nneed to go over the test cases again because this time the diff should change without pilot input?",
        "comments": "",
        "fulltext": "when (diff_ref_obs >activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) & (!pilotInput => setThrust = V1)  & (observedThrust = V2)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (settlingTime >= 0) & (settlingTime <= settlingTimeMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V1",
                "observedThrust",
                "V2",
                "inactiveThreshold",
                "settlingTime",
                "settlingTimeMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))",
            "conditionTextRange": [
                0,
                196
            ],
            "component_name": "Controller",
            "componentTextRange": [
                198,
                207
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                215,
                254
            ],
            "post_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                256,
                342
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( ! pilotInput => setThrust = V1 ) & ( observedThrust = V2 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2))))",
            "post_condition_unexp_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))</i></b>)) | FTP)))) -> <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))))) | (! (Y TRUE)))))) -> (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & ((! pilotInput) -> (setThrust = V1))) & (observedThrust = V2)))) -> (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (( not pilotInput) => (setThrust=V1))) and (observedThrust=V2)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6576d40-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_6_3",
        "parent_reqid": "UC5_R_6",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null)& (observedThrust = V2) & (!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "steadyStateError",
                "steadyStateErrorMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                207
            ],
            "component_name": "Controller",
            "componentTextRange": [
                209,
                218
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                226,
                265
            ],
            "post_condition": "(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                267,
                365
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))",
            "post_condition_unexp_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))</i></b>)) | FTP)))) -> <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) | (! (Y TRUE)))))) -> (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (((systemParameter_P = null) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) -> (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (((systemParameter_P=null) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e657e270-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_10_3",
        "parent_reqid": "UC5_R_10",
        "project": "EngineController2.1",
        "rationale": "",
        "comments": "",
        "fulltext": "when (diff_ref_obs > activeThreshold) if (!(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold) &(absolutePressureDifference > pressureThreshold)&(observedThrust = V2) &(!pilotInput => setThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy  (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "observedThrust",
                "V2",
                "pilotInput",
                "setThrust",
                "V1",
                "inactiveThreshold",
                "steadyStateError",
                "steadyStateErrorMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                228
            ],
            "component_name": "Controller",
            "componentTextRange": [
                230,
                239
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                247,
                286
            ],
            "post_condition": "(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V1 ))",
            "responseTextRange": [
                288,
                387
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ) & ( observedThrust = V2 ) & ( ! pilotInput => setThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1))))",
            "post_condition_unexp_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_unexp_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_SMV_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_SMV_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))",
            "post_condition_coco": "(((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V1))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))))) | (! (Y TRUE)))))) -> (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & (((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & (observedThrust = V2)) & ((! pilotInput) -> (setThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and (observedThrust=V2)) and (( not pilotInput) => (setThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6583090-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_1",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits. \n\nThere isn't anything else - not interested in rising time at the moment. \n\nTracking pilot commands: there is a change and might take a few seconds to complete (Settlingtime). \n\nif ((sensorfaults) & (trackingPilotCommands)) Controller shall within settlingTime ticks satisfy  (controlObjectives) - needs a numerical value.\n\nalways (new r0 -> in the future within d (new r0 releases |r0-y0| <=inactiveThreshold))\n\n|r0-y0| = diff. This is difference of reference and controller output\n\nsettling time should be x seconds: if diff >activeThreshold then within x seconds diff <inactiveThreshold (x=10 for example)",
        "fulltext": "if ((sensorfaults) & (trackingPilotCommands)) ControlledSystem shall satisfy (controlObjectives) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "sensorfaults",
                "trackingPilotCommands",
                "controlObjectives"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorfaults ) & ( trackingPilotCommands ) ))",
            "regular_condition": "(( ( sensorfaults ) & ( trackingPilotCommands ) ))",
            "conditionTextRange": [
                0,
                44
            ],
            "component_name": "ControlledSystem",
            "componentTextRange": [
                46,
                61
            ],
            "post_condition": "(( controlObjectives ))",
            "responseTextRange": [
                69,
                95
            ],
            "diagramVariables": "TC = <b><i>(( ( sensorfaults ) & ( trackingPilotCommands ) ))</i></b>, Response = <b><i>(( controlObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( ( sensorfaults ) & ( trackingPilotCommands ) ))</i></b> is true and any point in the interval where <b><i>(( ( sensorfaults ) & ( trackingPilotCommands ) ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(sensorfaults & trackingPilotCommands)",
            "regular_condition_unexp_ft": "(sensorfaults & trackingPilotCommands)",
            "regular_condition_SMV_pt": "(sensorfaults & trackingPilotCommands)",
            "regular_condition_SMV_ft": "(sensorfaults & trackingPilotCommands)",
            "regular_condition_coco": "(sensorfaults and trackingPilotCommands)",
            "post_condition_unexp_pt": "controlObjectives",
            "post_condition_unexp_ft": "controlObjectives",
            "post_condition_SMV_pt": "controlObjectives",
            "post_condition_SMV_ft": "controlObjectives",
            "post_condition_coco": "controlObjectives",
            "ft": "((LAST V (((! <b><i>(sensorfaults & trackingPilotCommands)</i></b>) & ((! LAST) & (X <b><i>(sensorfaults & trackingPilotCommands)</i></b>))) -> (X ((! LAST) U <b><i>controlObjectives</i></b>)))) & (<b><i>(sensorfaults & trackingPilotCommands)</i></b> -> ((! LAST) U <b><i>controlObjectives</i></b>)))",
            "pt": "((H (! <b><i>(sensorfaults & trackingPilotCommands)</i></b>)) | (! ((! <b><i>controlObjectives</i></b>) S ((! <b><i>controlObjectives</i></b>) & (<b><i>(sensorfaults & trackingPilotCommands)</i></b> & ((Y (! <b><i>(sensorfaults & trackingPilotCommands)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (sensorfaults & trackingPilotCommands))) | (! ((! controlObjectives) S ((! controlObjectives) & ((sensorfaults & trackingPilotCommands) & ((Y (! (sensorfaults & trackingPilotCommands))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (sensorfaults & trackingPilotCommands)) & ((! LAST) & (X (sensorfaults & trackingPilotCommands)))) -> (X ((! LAST) U controlObjectives)))) & ((sensorfaults & trackingPilotCommands) -> ((! LAST) U controlObjectives)))",
            "CoCoSpecCode": "((H( not (sensorfaults and trackingPilotCommands))) or ( not (SI( ((sensorfaults and trackingPilotCommands) and ((YtoPre( not (sensorfaults and trackingPilotCommands))) or FTP)), ( not controlObjectives) ))))",
            "component": "<b><i>ControlledSystem</i></b>"
        },
        "_id": "e6587eb0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_9",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under low probability hazardous events, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nlowProbabilityHazardousEvents is the air pressure changing above a certain abruptThreshold between 2 time periods below a certain abruptThreshold. This was propogated to the child requirements based on the test case.\n",
        "fulltext": "if (lowProbabilityHazardousEvents) & (trackingPilotCommands) Controller shall satisfy (controlObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowProbabilityHazardousEvents",
                    "trackingPilotCommands",
                    "controlObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                59
            ],
            "component_name": "Controller",
            "componentTextRange": [
                61,
                70
            ],
            "post_condition": "(( controlObjectives ))",
            "responseTextRange": [
                78,
                104
            ],
            "ft": "((LAST V (((! <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( lowProbabilityHazardousEvents ) and ( trackingPilotCommands )))) or ( not (SI( ((( lowProbabilityHazardousEvents ) and ( trackingPilotCommands )) and ((pre ( not (( lowProbabilityHazardousEvents ) and ( trackingPilotCommands )))) or FTP)), ( not (( controlObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>, Response = <b><i>(( controlObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e658ccd0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_4",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, during regulation of nominal system operation (no change in pilot input), operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed)",
        "fulltext": "if (sensorfaults) & (!trackingPilotCommands) Controller shall satisfy (operatingLimitObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sensorfaults",
                    "trackingPilotCommands",
                    "operatingLimitObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( sensorfaults ) & ( ! trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( sensorfaults ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                43
            ],
            "component_name": "Controller",
            "componentTextRange": [
                45,
                54
            ],
            "post_condition": "(( operatingLimitObjectives ))",
            "responseTextRange": [
                62,
                95
            ],
            "ft": "((LAST V (((! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( sensorfaults ) and ( not trackingPilotCommands )))) or ( not (SI( ((( sensorfaults ) and ( not trackingPilotCommands )) and ((pre ( not (( sensorfaults ) and ( not trackingPilotCommands )))) or FTP)), ( not (( operatingLimitObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(( operatingLimitObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e6594200-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_1_2",
        "parent_reqid": "UC5_R_1",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nR1: when (diff > activeThreshold) if ((sensorfaults) & (trackingPilotCommands)) Controller shall until (diff < inactiveThreshold) satisfy (controlObjectives)\n\novershoot min value is 0",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null)& (pilotInput => setThrust = V2) & (observedThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (overshoot >= 0) & (overshoot <= overshootMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V2",
                "observedThrust",
                "V1",
                "inactiveThreshold",
                "overshoot",
                "overshootMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                194
            ],
            "component_name": "Controller",
            "componentTextRange": [
                196,
                205
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                213,
                252
            ],
            "post_condition": "(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                254,
                331
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1))))",
            "post_condition_unexp_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))))) | (! (Y TRUE)))))) -> (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((overshoot >= 0) & (overshoot <= overshootMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((overshoot>=0) and (overshoot<=overshootMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e6599020-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_10",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under low probability hazardous events, during regulation of nominal system operation (no change in pilot input), control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits) \n\nthere is an identifiable event: sudden sensor change.\n\nDefinition of \"abruptly\" might be useful but could use booleans instead.\nt1, t2 (time points), p1,p2(pressure): (p2-p1)/(t2-t1) >abruptThreshold or < is an abrupt change.",
        "fulltext": "if (lowProbabilityHazardousEvents) & (!trackingPilotCommands) Controller shall satisfy (controlObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowProbabilityHazardousEvents",
                    "trackingPilotCommands",
                    "controlObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                60
            ],
            "component_name": "Controller",
            "componentTextRange": [
                62,
                71
            ],
            "post_condition": "(( controlObjectives ))",
            "responseTextRange": [
                79,
                105
            ],
            "ft": "((LAST V (((! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( lowProbabilityHazardousEvents ) and ( not trackingPilotCommands )))) or ( not (SI( ((( lowProbabilityHazardousEvents ) and ( not trackingPilotCommands )) and ((pre ( not (( lowProbabilityHazardousEvents ) and ( not trackingPilotCommands )))) or FTP)), ( not (( controlObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(( controlObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65a0550-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_13_1",
        "parent_reqid": "UC5_R_13",
        "project": "EngineController2.1",
        "rationale": "While tracking pilot commands, controller operating mode shall appropriately switch between nominal and surge / stall prevention operating state \n\n* Preconditions: Aircraft is in nominal operating mode \n* Input conditions / steps: Pilot input changes from A1 to A2, causing surge / stall avoidance indicator signal to be set \n* Expected results: Aircraft switches to surge / stall prevention operating mode\n\nmight need for later: (pilotInput => LP = speed2)",
        "fulltext": "in nominal mode when (diff_setNL_observedNL > NLmax) if (pilotInput => surgeStallAvoidance) Controller shall until (diff_setNL_observedNL < NLmin) satisfy (newMode = surgeStallPrevention)  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "nominal",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "surgeStallPrevention"
            ],
            "scope_mode": "nominal",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(( pilotInput => surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))",
            "conditionTextRange": [
                16,
                90
            ],
            "component_name": "Controller",
            "componentTextRange": [
                92,
                101
            ],
            "stop_condition": "(( diff_setNL_observedNL < NLmin ))",
            "timingTextRange": [
                109,
                145
            ],
            "post_condition": "(( newMode = surgeStallPrevention ))",
            "responseTextRange": [
                147,
                186
            ],
            "diagramVariables": "M = <b><i>nominal</i></b>, TC = <b><i>((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL < NLmin ))</i></b>, Response = <b><i>(( newMode = surgeStallPrevention ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>nominal</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_coco": "((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance))",
            "post_condition_unexp_pt": "(newMode = surgeStallPrevention)",
            "post_condition_unexp_ft": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_pt": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_ft": "(newMode = surgeStallPrevention)",
            "post_condition_coco": "(newMode=surgeStallPrevention)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL<NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL < NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>nominal</i></b> & (! LAST))) | (X (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))) & (<b><i>nominal</i></b> -> (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))",
            "pt": "((H (Lin_<b><i>nominal</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))) & (((! Lin_<b><i>nominal</i></b>) S ((! Lin_<b><i>nominal</i></b>) & Fin_<b><i>nominal</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))",
            "ptExpanded": "((H (((! nominal) & (Y nominal)) -> (Y ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))) & (((! ((! nominal) & (Y nominal))) S ((! ((! nominal) & (Y nominal))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) -> ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))",
            "ftExpanded": "((LAST V ((! ((((! nominal) & (! LAST)) & (X nominal)) & (! LAST))) | (X (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))) & (nominal -> (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))",
            "CoCoSpecCode": "((H((( not nominal) and (YtoPre(nominal))) => (YtoPre(SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))) and ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not (( not nominal) and (YtoPre(nominal)))) )) => (SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65a5370-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_13",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "While tracking pilot commands, controller operating mode shall appropriately switch between nominal and surge / stall prevention operating state.\n\nsemantics for \"appropriately\"? - doesn't matter",
        "fulltext": "if (trackingPilotCommands) Controller shall satisfy newMode=nominal | newMode=surgeStallPrevention",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "trackingPilotCommands",
                "newMode",
                "nominal",
                "surgeStallPrevention"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( trackingPilotCommands ))",
            "regular_condition": "(( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                25
            ],
            "component_name": "Controller",
            "componentTextRange": [
                27,
                36
            ],
            "post_condition": "(newMode = nominal | newMode = surgeStallPrevention)",
            "responseTextRange": [
                44,
                97
            ],
            "diagramVariables": "TC = <b><i>(( trackingPilotCommands ))</i></b>, Response = <b><i>(newMode = nominal | newMode = surgeStallPrevention)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "trackingPilotCommands",
            "regular_condition_unexp_ft": "trackingPilotCommands",
            "regular_condition_SMV_pt": "trackingPilotCommands",
            "regular_condition_SMV_ft": "trackingPilotCommands",
            "regular_condition_coco": "trackingPilotCommands",
            "post_condition_unexp_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_unexp_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_coco": "((newMode=nominal) or (newMode=surgeStallPrevention))",
            "ft": "((LAST V (((! <b><i>trackingPilotCommands</i></b>) & ((! LAST) & (X <b><i>trackingPilotCommands</i></b>))) -> (X ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))) & (<b><i>trackingPilotCommands</i></b> -> ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))",
            "pt": "((H (! <b><i>trackingPilotCommands</i></b>)) | (! ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) S ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) & (<b><i>trackingPilotCommands</i></b> & ((Y (! <b><i>trackingPilotCommands</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! trackingPilotCommands)) | (! ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) S ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) & (trackingPilotCommands & ((Y (! trackingPilotCommands)) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! trackingPilotCommands) & ((! LAST) & (X trackingPilotCommands))) -> (X ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))) & (trackingPilotCommands -> ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))",
            "CoCoSpecCode": "((H( not trackingPilotCommands)) or ( not (SI( (trackingPilotCommands and ((YtoPre( not trackingPilotCommands)) or FTP)), ( not ((newMode=nominal) or (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65ac8a0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_11",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under low probability hazardous events, while tracking pilot commands, operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed) ",
        "fulltext": "if (lowProbabilityHazardousEvents) & (trackingPilotCommands) Controller shall satisfy (operatingLimitObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "lowProbabilityHazardousEvents",
                "trackingPilotCommands",
                "operatingLimitObjectives"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))",
            "regular_condition": "(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                59
            ],
            "component_name": "Controller",
            "componentTextRange": [
                61,
                70
            ],
            "post_condition": "(( operatingLimitObjectives ))",
            "responseTextRange": [
                78,
                111
            ],
            "diagramVariables": "TC = <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b>, Response = <b><i>(( operatingLimitObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( lowProbabilityHazardousEvents ) & ( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(lowProbabilityHazardousEvents & trackingPilotCommands)",
            "regular_condition_unexp_ft": "(lowProbabilityHazardousEvents & trackingPilotCommands)",
            "regular_condition_SMV_pt": "(lowProbabilityHazardousEvents & trackingPilotCommands)",
            "regular_condition_SMV_ft": "(lowProbabilityHazardousEvents & trackingPilotCommands)",
            "regular_condition_coco": "(lowProbabilityHazardousEvents and trackingPilotCommands)",
            "post_condition_unexp_pt": "operatingLimitObjectives",
            "post_condition_unexp_ft": "operatingLimitObjectives",
            "post_condition_SMV_pt": "operatingLimitObjectives",
            "post_condition_SMV_ft": "operatingLimitObjectives",
            "post_condition_coco": "operatingLimitObjectives",
            "ft": "((LAST V (((! <b><i>(lowProbabilityHazardousEvents & trackingPilotCommands)</i></b>) & ((! LAST) & (X <b><i>(lowProbabilityHazardousEvents & trackingPilotCommands)</i></b>))) -> (X ((! LAST) U <b><i>operatingLimitObjectives</i></b>)))) & (<b><i>(lowProbabilityHazardousEvents & trackingPilotCommands)</i></b> -> ((! LAST) U <b><i>operatingLimitObjectives</i></b>)))",
            "pt": "((H (! <b><i>(lowProbabilityHazardousEvents & trackingPilotCommands)</i></b>)) | (! ((! <b><i>operatingLimitObjectives</i></b>) S ((! <b><i>operatingLimitObjectives</i></b>) & (<b><i>(lowProbabilityHazardousEvents & trackingPilotCommands)</i></b> & ((Y (! <b><i>(lowProbabilityHazardousEvents & trackingPilotCommands)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (lowProbabilityHazardousEvents & trackingPilotCommands))) | (! ((! operatingLimitObjectives) S ((! operatingLimitObjectives) & ((lowProbabilityHazardousEvents & trackingPilotCommands) & ((Y (! (lowProbabilityHazardousEvents & trackingPilotCommands))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (lowProbabilityHazardousEvents & trackingPilotCommands)) & ((! LAST) & (X (lowProbabilityHazardousEvents & trackingPilotCommands)))) -> (X ((! LAST) U operatingLimitObjectives)))) & ((lowProbabilityHazardousEvents & trackingPilotCommands) -> ((! LAST) U operatingLimitObjectives)))",
            "CoCoSpecCode": "((H( not (lowProbabilityHazardousEvents and trackingPilotCommands))) or ( not (SI( ((lowProbabilityHazardousEvents and trackingPilotCommands) and ((YtoPre( not (lowProbabilityHazardousEvents and trackingPilotCommands))) or FTP)), ( not operatingLimitObjectives) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65b16c0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_13_2",
        "parent_reqid": "UC5_R_13",
        "project": "EngineController2.1",
        "rationale": "* Preconditions: Aircraft is in surge / stall prevention operating mode \n* Input conditions / steps: Pilot input changes from A1 to A2, causing surge / stall avoidance indicator signal to be cleared \n* Expected results: Aircraft switches to nominal operating mode",
        "fulltext": "in surgeStallPrevention mode  when ((diff_setNL_observedNL < NLmax) )  if  (pilotInput => !surgeStallAvoidance) Controller shall until (diff_setNL_observedNL > NLmin)  satisfy newMode=nominal  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "surgeStallPrevention",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "nominal"
            ],
            "scope_mode": "surgeStallPrevention",
            "scopeTextRange": [
                0,
                27
            ],
            "qualifier_word": "if",
            "pre_condition": "(( pilotInput => ! surgeStallAvoidance ))",
            "regular_condition": "((( ( diff_setNL_observedNL < NLmax ) )) & (( pilotInput => ! surgeStallAvoidance )))",
            "conditionTextRange": [
                30,
                110
            ],
            "component_name": "Controller",
            "componentTextRange": [
                112,
                121
            ],
            "stop_condition": "(( diff_setNL_observedNL > NLmin ))",
            "timingTextRange": [
                129,
                165
            ],
            "post_condition": "(newMode = nominal)",
            "responseTextRange": [
                168,
                190
            ],
            "diagramVariables": "M = <b><i>surgeStallPrevention</i></b>, TC = <b><i>((( ( diff_setNL_observedNL < NLmax ) )) & (( pilotInput => ! surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL > NLmin ))</i></b>, Response = <b><i>(newMode = nominal)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>surgeStallPrevention</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( ( diff_setNL_observedNL < NLmax ) )) & (( pilotInput => ! surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( ( diff_setNL_observedNL < NLmax ) )) & (( pilotInput => ! surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_coco": "((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance)))",
            "post_condition_unexp_pt": "(newMode = nominal)",
            "post_condition_unexp_ft": "(newMode = nominal)",
            "post_condition_SMV_pt": "(newMode = nominal)",
            "post_condition_SMV_ft": "(newMode = nominal)",
            "post_condition_coco": "(newMode=nominal)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL>NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL > NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>surgeStallPrevention</i></b> & (! LAST))) | (X (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))) & (<b><i>surgeStallPrevention</i></b> -> (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))",
            "pt": "((H (Lin_<b><i>surgeStallPrevention</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))) & (((! Lin_<b><i>surgeStallPrevention</i></b>) S ((! Lin_<b><i>surgeStallPrevention</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))",
            "ptExpanded": "((H (((! surgeStallPrevention) & (Y surgeStallPrevention)) -> (Y ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))) & (((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) S ((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) -> ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))",
            "ftExpanded": "((LAST V ((! ((((! surgeStallPrevention) & (! LAST)) & (X surgeStallPrevention)) & (! LAST))) | (X (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))) & (surgeStallPrevention -> (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))",
            "CoCoSpecCode": "((H((( not surgeStallPrevention) and (YtoPre(surgeStallPrevention))) => (YtoPre(SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))) and ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not (( not surgeStallPrevention) and (YtoPre(surgeStallPrevention)))) )) => (SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65b64e0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_5",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under mechanical fatigue conditions, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nModel parameters would have to change to verify this. Tried to capture this in related testcases.\n\nEngine described by a, b and c matrices. A value in one of the matrices might change by +-% from its nominal value.",
        "fulltext": "if (mechanicalFatigue) & (trackingPilotCommands ) Controller shall satisfy (controlObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mechanicalFatigue",
                    "trackingPilotCommands",
                    "controlObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( mechanicalFatigue ) & ( trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( mechanicalFatigue ) & ( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                48
            ],
            "component_name": "Controller",
            "componentTextRange": [
                50,
                59
            ],
            "post_condition": "(( controlObjectives ))",
            "responseTextRange": [
                67,
                93
            ],
            "ft": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( mechanicalFatigue ) and ( trackingPilotCommands )))) or ( not (SI( ((( mechanicalFatigue ) and ( trackingPilotCommands )) and ((pre ( not (( mechanicalFatigue ) and ( trackingPilotCommands )))) or FTP)), ( not (( controlObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>, Response = <b><i>(( controlObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65bb300-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_12",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under low probability hazardous events, during regulation of nominal system operation (no change in pilot input), operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed) ",
        "fulltext": "if (lowProbabilityHazardousEvents) & (!trackingPilotCommands) Controller shall satisfy (operatingLimitObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowProbabilityHazardousEvents",
                    "trackingPilotCommands",
                    "operatingLimitObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                60
            ],
            "component_name": "Controller",
            "componentTextRange": [
                62,
                71
            ],
            "post_condition": "(( operatingLimitObjectives ))",
            "responseTextRange": [
                79,
                112
            ],
            "ft": "((LAST V (((! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( lowProbabilityHazardousEvents ) and ( not trackingPilotCommands )))) or ( not (SI( ((( lowProbabilityHazardousEvents ) and ( not trackingPilotCommands )) and ((pre ( not (( lowProbabilityHazardousEvents ) and ( not trackingPilotCommands )))) or FTP)), ( not (( operatingLimitObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(( operatingLimitObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65bda10-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_1_3",
        "parent_reqid": "UC5_R_1",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nR1: when (diff > activeThreshold) if ((sensorfaults) & (trackingPilotCommands)) Controller shall until (diff < inactiveThreshold) satisfy (controlObjectives)\n\nsteadystate min value is 0",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null)& (pilotInput => setThrust = V2)& (observedThrust = V1)) Controller shall until (diff_ref_obs < inactiveThreshold) satisfy (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V2",
                "observedThrust",
                "V1",
                "inactiveThreshold",
                "steadyStateError",
                "steadyStateErrorMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                193
            ],
            "component_name": "Controller",
            "componentTextRange": [
                195,
                204
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                212,
                251
            ],
            "post_condition": "(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                253,
                351
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1))))",
            "post_condition_unexp_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))))) | (! (Y TRUE)))))) -> (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((steadyStateError>=0) and (steadyStateError<=steadyStateErrorMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65c4f40-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_14",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "During regulation of nominal system operation (no change in pilot input), controller operating mode shall appropriately switch between nominal and surge / stall prevention operating state ",
        "comments": "",
        "fulltext": " if (!trackingPilotCommands) Controller shall satisfy newMode=nominal | newMode=surgeStallPrevention",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "trackingPilotCommands",
                "newMode",
                "nominal",
                "surgeStallPrevention"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! trackingPilotCommands ))",
            "regular_condition": "(( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                26
            ],
            "component_name": "Controller",
            "componentTextRange": [
                28,
                37
            ],
            "post_condition": "(newMode = nominal | newMode = surgeStallPrevention)",
            "responseTextRange": [
                45,
                98
            ],
            "diagramVariables": "TC = <b><i>(( ! trackingPilotCommands ))</i></b>, Response = <b><i>(newMode = nominal | newMode = surgeStallPrevention)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(! trackingPilotCommands)",
            "regular_condition_unexp_ft": "(! trackingPilotCommands)",
            "regular_condition_SMV_pt": "(! trackingPilotCommands)",
            "regular_condition_SMV_ft": "(! trackingPilotCommands)",
            "regular_condition_coco": "( not trackingPilotCommands)",
            "post_condition_unexp_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_unexp_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_coco": "((newMode=nominal) or (newMode=surgeStallPrevention))",
            "ft": "((LAST V (((! <b><i>(! trackingPilotCommands)</i></b>) & ((! LAST) & (X <b><i>(! trackingPilotCommands)</i></b>))) -> (X ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))) & (<b><i>(! trackingPilotCommands)</i></b> -> ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))",
            "pt": "((H (! <b><i>(! trackingPilotCommands)</i></b>)) | (! ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) S ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) & (<b><i>(! trackingPilotCommands)</i></b> & ((Y (! <b><i>(! trackingPilotCommands)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (! trackingPilotCommands))) | (! ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) S ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) & ((! trackingPilotCommands) & ((Y (! (! trackingPilotCommands))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (! trackingPilotCommands)) & ((! LAST) & (X (! trackingPilotCommands)))) -> (X ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))) & ((! trackingPilotCommands) -> ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))",
            "CoCoSpecCode": "((H( not ( not trackingPilotCommands))) or ( not (SI( (( not trackingPilotCommands) and ((YtoPre( not ( not trackingPilotCommands))) or FTP)), ( not ((newMode=nominal) or (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "e65c9d60-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_6",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under mechanical fatigue conditions, during regulation of nominal system operation (no change in pilot input), control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)",
        "fulltext": "if (mechanicalFatigue) & (!trackingPilotCommands) Controller shall satisfy (controlObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mechanicalFatigue",
                    "trackingPilotCommands",
                    "controlObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( mechanicalFatigue ) & ( ! trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( mechanicalFatigue ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                48
            ],
            "component_name": "Controller",
            "componentTextRange": [
                50,
                59
            ],
            "post_condition": "(( controlObjectives ))",
            "responseTextRange": [
                67,
                93
            ],
            "ft": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( mechanicalFatigue ) and ( not trackingPilotCommands )))) or ( not (SI( ((( mechanicalFatigue ) and ( not trackingPilotCommands )) and ((pre ( not (( mechanicalFatigue ) and ( not trackingPilotCommands )))) or FTP)), ( not (( controlObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(( controlObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65d1290-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_7",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under mechanical fatigue conditions, while tracking pilot commands, operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed)",
        "fulltext": "if (mechanicalFatigue) & (trackingPilotCommands) Controller shall satisfy (operatingLimitObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mechanicalFatigue",
                    "trackingPilotCommands",
                    "operatingLimitObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( mechanicalFatigue ) & ( trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( mechanicalFatigue ) & ( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                47
            ],
            "component_name": "Controller",
            "componentTextRange": [
                49,
                58
            ],
            "post_condition": "(( operatingLimitObjectives ))",
            "responseTextRange": [
                66,
                99
            ],
            "ft": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( mechanicalFatigue ) and ( trackingPilotCommands )))) or ( not (SI( ((( mechanicalFatigue ) and ( trackingPilotCommands )) and ((pre ( not (( mechanicalFatigue ) and ( trackingPilotCommands )))) or FTP)), ( not (( operatingLimitObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b>, Response = <b><i>(( operatingLimitObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( mechanicalFatigue ) & ( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65d60b0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_2",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, during regulation of nominal system operation (no change in pilot input), control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits) ",
        "fulltext": "if (sensorfaults) & (!trackingPilotCommands) Controller shall satisfy (controlObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sensorfaults",
                    "trackingPilotCommands",
                    "controlObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( sensorfaults ) & ( ! trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( sensorfaults ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                43
            ],
            "component_name": "Controller",
            "componentTextRange": [
                45,
                54
            ],
            "post_condition": "(( controlObjectives ))",
            "responseTextRange": [
                62,
                88
            ],
            "ft": "((LAST V (((! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( controlObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( controlObjectives ))</i></b>) S ((! <b><i>(( controlObjectives ))</i></b>) & (<b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( sensorfaults ) and ( not trackingPilotCommands )))) or ( not (SI( ((( sensorfaults ) and ( not trackingPilotCommands )) and ((pre ( not (( sensorfaults ) and ( not trackingPilotCommands )))) or FTP)), ( not (( controlObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(( controlObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( sensorfaults ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65d87c0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_8",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under mechanical fatigue conditions, during regulation of nominal system operation (no change in pilot input), operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed) ",
        "fulltext": "if (mechanicalFatigue) & (!trackingPilotCommands) Controller shall satisfy (operatingLimitObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mechanicalFatigue",
                    "trackingPilotCommands",
                    "operatingLimitObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( mechanicalFatigue ) & ( ! trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( mechanicalFatigue ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                48
            ],
            "component_name": "Controller",
            "componentTextRange": [
                50,
                59
            ],
            "post_condition": "(( operatingLimitObjectives ))",
            "responseTextRange": [
                67,
                100
            ],
            "ft": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( mechanicalFatigue ) and ( not trackingPilotCommands )))) or ( not (SI( ((( mechanicalFatigue ) and ( not trackingPilotCommands )) and ((pre ( not (( mechanicalFatigue ) and ( not trackingPilotCommands )))) or FTP)), ( not (( operatingLimitObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(( operatingLimitObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( mechanicalFatigue ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65dd5e0-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_3",
        "parent_reqid": "",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, while tracking pilot commands, operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed). Could add other child requirements -> there is more than one shaft. Also temperature limits but not sure yet - not currently in the model.",
        "fulltext": "if (sensorfaults) & (trackingPilotCommands) Controller shall satisfy (operatingLimitObjectives)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sensorfaults",
                    "trackingPilotCommands",
                    "operatingLimitObjectives"
                ],
                "modes": []
            },
            "regular_condition": "(( sensorfaults ) & ( trackingPilotCommands ))",
            "qualifier_word": "if",
            "pre_condition": "(( sensorfaults ) & ( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                42
            ],
            "component_name": "Controller",
            "componentTextRange": [
                44,
                53
            ],
            "post_condition": "(( operatingLimitObjectives ))",
            "responseTextRange": [
                61,
                94
            ],
            "ft": "((LAST V (((! <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "pt": "((H (! <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>) & ((! LAST) & (X <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>))) -> (X ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))) & (<b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b> -> ((! LAST) U <b><i>(( operatingLimitObjectives ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>)) | (! ((! <b><i>(( operatingLimitObjectives ))</i></b>) S ((! <b><i>(( operatingLimitObjectives ))</i></b>) & (<b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b> & ((Y (! <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "((H( not (( sensorfaults ) and ( trackingPilotCommands )))) or ( not (SI( ((( sensorfaults ) and ( trackingPilotCommands )) and ((pre ( not (( sensorfaults ) and ( trackingPilotCommands )))) or FTP)), ( not (( operatingLimitObjectives ))) ))))",
            "diagramVariables": "TC = <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b>, Response = <b><i>(( operatingLimitObjectives ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( sensorfaults ) & ( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "e65e2400-95b2-11ed-a265-4300a44af9b6"
    },
    {
        "reqid": "UC5_R_1_1",
        "parent_reqid": "UC5_R_1",
        "project": "EngineController2.1",
        "rationale": "Under sensor faults, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nFrom Test Cases UC5_TC_1 and UC5_TC_2:\n sensor S value deviates at most +/- R % from nominal value \n sensor S value is not available\n\nR1: when (diff > activeThreshold) if ((sensorfaults) & (trackingPilotCommands)) Controller shall until (diff < inactiveThreshold) satisfy (controlObjectives)\n\nMinimum settlingTime is 0.\n\nNo fixed value for R but 10% is a safe estimate.\n\nThere are 4 sensors\n\nthe '0' in r0 is the time stamp -> changed to r(i) and y(i) to apply to all i",
        "comments": "settling time",
        "fulltext": "when (diff_ref_obs > activeThreshold) if ((sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) & (pilotInput => setThrust = V2)  & (observedThrust = V1) )  Engine shall until (diff_ref_obs < inactiveThreshold) satisfy (settlingTime >= 0) & (settlingTime <= settlingTimeMax) & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "pilotInput",
                "setThrust",
                "V2",
                "observedThrust",
                "V1",
                "inactiveThreshold",
                "settlingTime",
                "settlingTimeMax"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))",
            "conditionTextRange": [
                0,
                197
            ],
            "component_name": "Engine",
            "componentTextRange": [
                200,
                205
            ],
            "stop_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "timingTextRange": [
                213,
                252
            ],
            "post_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V2 ))",
            "responseTextRange": [
                254,
                340
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b>, SC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (( ( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ) & ( pilotInput => setThrust = V2 ) & ( observedThrust = V1 ) )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1))))",
            "post_condition_unexp_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_unexp_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_SMV_pt": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_SMV_ft": "(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))",
            "post_condition_coco": "(((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V2))",
            "stop_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "stop_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "stop_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>))) -> (X ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b> -> ((<b><i>(diff_ref_obs < inactiveThreshold)</i></b> V (<b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b> | <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (LAST V <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>)) | (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) S ((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))</i></b>)) | FTP)))) -> <b><i>(((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))))) | (((! (diff_ref_obs < inactiveThreshold)) S ((! (diff_ref_obs < inactiveThreshold)) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))) & ((Y (! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))))) | (! (Y TRUE)))))) -> (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1))))))) -> (X (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))))))) & (((diff_ref_obs > activeThreshold) & (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (((sensorValue_S = null) & (pilotInput -> (setThrust = V2))) & (observedThrust = V1)))) -> (((diff_ref_obs < inactiveThreshold) V ((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2)) | (diff_ref_obs < inactiveThreshold))) | (LAST V (((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))))) or ((SI( (((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (((sensorValue_S=null) and (pilotInput => (setThrust=V2))) and (observedThrust=V1)))))) or FTP)), ( not (diff_ref_obs<inactiveThreshold)) )) => (((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (observedThrust=V2)))))",
            "component": "<b><i>Engine</i></b>"
        },
        "_id": "e65e9930-95b2-11ed-a265-4300a44af9b6"
    }
]

[
    {
        "reqid": "NOMINAL_OPERATION",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted !pilotInput => setThrust = V1 from UC5_R_12_1",
        "fulltext": "if !pilotInput => setThrust = V1 Controller shall satisfy NOMINAL_OPERATION",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "pilotInput",
                "setThrust",
                "V1",
                "NOMINAL_OPERATION"
            ],
            "qualifier_word": "if",
            "pre_condition": "(! pilotInput => setThrust = V1)",
            "regular_condition": "(! pilotInput => setThrust = V1)",
            "conditionTextRange": [
                0,
                31
            ],
            "component_name": "Controller",
            "componentTextRange": [
                33,
                42
            ],
            "post_condition": "(NOMINAL_OPERATION)",
            "responseTextRange": [
                50,
                74
            ],
            "diagramVariables": "TC = <b><i>(! pilotInput => setThrust = V1)</i></b>, Response = <b><i>(NOMINAL_OPERATION)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! pilotInput => setThrust = V1)</i></b> is true and any point in the interval where <b><i>(! pilotInput => setThrust = V1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "((! pilotInput) -> (setThrust = V1))",
            "regular_condition_unexp_ft": "((! pilotInput) -> (setThrust = V1))",
            "regular_condition_SMV_pt": "((! pilotInput) -> (setThrust = V1))",
            "regular_condition_SMV_ft": "((! pilotInput) -> (setThrust = V1))",
            "regular_condition_coco": "(( not pilotInput) => (setThrust=V1))",
            "post_condition_unexp_pt": "NOMINAL_OPERATION",
            "post_condition_unexp_ft": "NOMINAL_OPERATION",
            "post_condition_SMV_pt": "NOMINAL_OPERATION",
            "post_condition_SMV_ft": "NOMINAL_OPERATION",
            "post_condition_coco": "NOMINAL_OPERATION",
            "ft": "((LAST V (((! <b><i>((! pilotInput) -> (setThrust = V1))</i></b>) & ((! LAST) & (X <b><i>((! pilotInput) -> (setThrust = V1))</i></b>))) -> (X ((! LAST) U <b><i>NOMINAL_OPERATION</i></b>)))) & (<b><i>((! pilotInput) -> (setThrust = V1))</i></b> -> ((! LAST) U <b><i>NOMINAL_OPERATION</i></b>)))",
            "pt": "((H (! <b><i>((! pilotInput) -> (setThrust = V1))</i></b>)) | (! ((! <b><i>NOMINAL_OPERATION</i></b>) S ((! <b><i>NOMINAL_OPERATION</i></b>) & (<b><i>((! pilotInput) -> (setThrust = V1))</i></b> & ((Y (! <b><i>((! pilotInput) -> (setThrust = V1))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! ((! pilotInput) -> (setThrust = V1)))) | (! ((! NOMINAL_OPERATION) S ((! NOMINAL_OPERATION) & (((! pilotInput) -> (setThrust = V1)) & ((Y (! ((! pilotInput) -> (setThrust = V1)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! ((! pilotInput) -> (setThrust = V1))) & ((! LAST) & (X ((! pilotInput) -> (setThrust = V1))))) -> (X ((! LAST) U NOMINAL_OPERATION)))) & (((! pilotInput) -> (setThrust = V1)) -> ((! LAST) U NOMINAL_OPERATION)))",
            "CoCoSpecCode": "((H( not (( not pilotInput) => (setThrust=V1)))) or ( not (SI( ((( not pilotInput) => (setThrust=V1)) and ((YtoPre( not (( not pilotInput) => (setThrust=V1)))) or FTP)), ( not NOMINAL_OPERATION) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b35f36c0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "MECHANICAL_FATIGUE",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted (systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null) from UC5_R_5_1",
        "fulltext": "if (systemParameter_P > nominalValue + R) | (systemParameter_P < nominalValue - R) | (systemParameter_P = null) Controller shall satisfy MECHANICAL_FATIGUE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "systemParameter_P",
                "nominalValue",
                "R",
                "null",
                "MECHANICAL_FATIGUE"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ))",
            "regular_condition": "(( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ))",
            "conditionTextRange": [
                0,
                110
            ],
            "component_name": "Controller",
            "componentTextRange": [
                112,
                121
            ],
            "post_condition": "(MECHANICAL_FATIGUE)",
            "responseTextRange": [
                129,
                154
            ],
            "diagramVariables": "TC = <b><i>(( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ))</i></b>, Response = <b><i>(MECHANICAL_FATIGUE)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ))</i></b> is true and any point in the interval where <b><i>(( systemParameter_P > nominalValue + R ) | ( systemParameter_P < nominalValue - R ) | ( systemParameter_P = null ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))",
            "regular_condition_unexp_ft": "(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))",
            "regular_condition_SMV_pt": "(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))",
            "regular_condition_SMV_ft": "(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))",
            "regular_condition_coco": "(((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (systemParameter_P=null))",
            "post_condition_unexp_pt": "MECHANICAL_FATIGUE",
            "post_condition_unexp_ft": "MECHANICAL_FATIGUE",
            "post_condition_SMV_pt": "MECHANICAL_FATIGUE",
            "post_condition_SMV_ft": "MECHANICAL_FATIGUE",
            "post_condition_coco": "MECHANICAL_FATIGUE",
            "ft": "((LAST V (((! <b><i>(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))</i></b>) & ((! LAST) & (X <b><i>(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))</i></b>))) -> (X ((! LAST) U <b><i>MECHANICAL_FATIGUE</i></b>)))) & (<b><i>(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))</i></b> -> ((! LAST) U <b><i>MECHANICAL_FATIGUE</i></b>)))",
            "pt": "((H (! <b><i>(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))</i></b>)) | (! ((! <b><i>MECHANICAL_FATIGUE</i></b>) S ((! <b><i>MECHANICAL_FATIGUE</i></b>) & (<b><i>(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))</i></b> & ((Y (! <b><i>(((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null)))) | (! ((! MECHANICAL_FATIGUE) S ((! MECHANICAL_FATIGUE) & ((((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null)) & ((Y (! (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))) & ((! LAST) & (X (((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null))))) -> (X ((! LAST) U MECHANICAL_FATIGUE)))) & ((((systemParameter_P > (nominalValue + R)) | (systemParameter_P < (nominalValue - R))) | (systemParameter_P = null)) -> ((! LAST) U MECHANICAL_FATIGUE)))",
            "CoCoSpecCode": "((H( not (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (systemParameter_P=null)))) or ( not (SI( ((((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (systemParameter_P=null)) and ((YtoPre( not (((systemParameter_P>( nominalValue + R )) or (systemParameter_P<( nominalValue - R ))) or (systemParameter_P=null)))) or FTP)), ( not MECHANICAL_FATIGUE) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b35f5dd0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "NOT_ACTIVE",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted (diff_ref_obs < inactiveThreshold) from UC5_R_1_1",
        "fulltext": "if (diff_ref_obs < inactiveThreshold) Engine shall satisfy NOT_ACTIVE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "inactiveThreshold",
                "NOT_ACTIVE"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "regular_condition": "(( diff_ref_obs < inactiveThreshold ))",
            "conditionTextRange": [
                0,
                36
            ],
            "component_name": "Engine",
            "componentTextRange": [
                38,
                43
            ],
            "post_condition": "(NOT_ACTIVE)",
            "responseTextRange": [
                51,
                68
            ],
            "diagramVariables": "TC = <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b>, Response = <b><i>(NOT_ACTIVE)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b> is true and any point in the interval where <b><i>(( diff_ref_obs < inactiveThreshold ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(diff_ref_obs < inactiveThreshold)",
            "regular_condition_unexp_ft": "(diff_ref_obs < inactiveThreshold)",
            "regular_condition_SMV_pt": "(diff_ref_obs < inactiveThreshold)",
            "regular_condition_SMV_ft": "(diff_ref_obs < inactiveThreshold)",
            "regular_condition_coco": "(diff_ref_obs<inactiveThreshold)",
            "post_condition_unexp_pt": "NOT_ACTIVE",
            "post_condition_unexp_ft": "NOT_ACTIVE",
            "post_condition_SMV_pt": "NOT_ACTIVE",
            "post_condition_SMV_ft": "NOT_ACTIVE",
            "post_condition_coco": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>) & ((! LAST) & (X <b><i>(diff_ref_obs < inactiveThreshold)</i></b>))) -> (X ((! LAST) U <b><i>NOT_ACTIVE</i></b>)))) & (<b><i>(diff_ref_obs < inactiveThreshold)</i></b> -> ((! LAST) U <b><i>NOT_ACTIVE</i></b>)))",
            "pt": "((H (! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | (! ((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(diff_ref_obs < inactiveThreshold)</i></b> & ((Y (! <b><i>(diff_ref_obs < inactiveThreshold)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (diff_ref_obs < inactiveThreshold))) | (! ((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((diff_ref_obs < inactiveThreshold) & ((Y (! (diff_ref_obs < inactiveThreshold))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (diff_ref_obs < inactiveThreshold)) & ((! LAST) & (X (diff_ref_obs < inactiveThreshold)))) -> (X ((! LAST) U NOT_ACTIVE)))) & ((diff_ref_obs < inactiveThreshold) -> ((! LAST) U NOT_ACTIVE)))",
            "CoCoSpecCode": "((H( not (diff_ref_obs<inactiveThreshold))) or ( not (SI( ((diff_ref_obs<inactiveThreshold) and ((YtoPre( not (diff_ref_obs<inactiveThreshold))) or FTP)), ( not NOT_ACTIVE) ))))",
            "component": "<b><i>Engine</i></b>"
        },
        "_id": "b35fabf0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "LOW_PROB_HAZARD",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted !(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold) &(absolutePressureDifference > pressureThreshold) from UC5_R_9_1",
        "fulltext": "if !(outsideAirPressure_T1 = outsideAirPressure_T2) & (diff_t2_t1 < abruptThreshold) &(absolutePressureDifference > pressureThreshold) Controller shall satisfy LOW_PROB_HAZARD",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "outsideAirPressure_T1",
                "outsideAirPressure_T2",
                "diff_t2_t1",
                "abruptThreshold",
                "absolutePressureDifference",
                "pressureThreshold",
                "LOW_PROB_HAZARD"
            ],
            "qualifier_word": "if",
            "pre_condition": "(! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ))",
            "regular_condition": "(! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ))",
            "conditionTextRange": [
                0,
                133
            ],
            "component_name": "Controller",
            "componentTextRange": [
                135,
                144
            ],
            "post_condition": "(LOW_PROB_HAZARD)",
            "responseTextRange": [
                152,
                174
            ],
            "diagramVariables": "TC = <b><i>(! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ))</i></b>, Response = <b><i>(LOW_PROB_HAZARD)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ))</i></b> is true and any point in the interval where <b><i>(! ( outsideAirPressure_T1 = outsideAirPressure_T2 ) & ( diff_t2_t1 < abruptThreshold ) & ( absolutePressureDifference > pressureThreshold ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))",
            "regular_condition_unexp_ft": "(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))",
            "regular_condition_SMV_pt": "(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))",
            "regular_condition_SMV_ft": "(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))",
            "regular_condition_coco": "((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold))",
            "post_condition_unexp_pt": "LOW_PROB_HAZARD",
            "post_condition_unexp_ft": "LOW_PROB_HAZARD",
            "post_condition_SMV_pt": "LOW_PROB_HAZARD",
            "post_condition_SMV_ft": "LOW_PROB_HAZARD",
            "post_condition_coco": "LOW_PROB_HAZARD",
            "ft": "((LAST V (((! <b><i>(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))</i></b>) & ((! LAST) & (X <b><i>(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))</i></b>))) -> (X ((! LAST) U <b><i>LOW_PROB_HAZARD</i></b>)))) & (<b><i>(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))</i></b> -> ((! LAST) U <b><i>LOW_PROB_HAZARD</i></b>)))",
            "pt": "((H (! <b><i>(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))</i></b>)) | (! ((! <b><i>LOW_PROB_HAZARD</i></b>) S ((! <b><i>LOW_PROB_HAZARD</i></b>) & (<b><i>(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))</i></b> & ((Y (! <b><i>(((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)))) | (! ((! LOW_PROB_HAZARD) S ((! LOW_PROB_HAZARD) & ((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) & ((Y (! (((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))) & ((! LAST) & (X (((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold))))) -> (X ((! LAST) U LOW_PROB_HAZARD)))) & ((((! (outsideAirPressure_T1 = outsideAirPressure_T2)) & (diff_t2_t1 < abruptThreshold)) & (absolutePressureDifference > pressureThreshold)) -> ((! LAST) U LOW_PROB_HAZARD)))",
            "CoCoSpecCode": "((H( not ((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)))) or ( not (SI( (((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)) and ((YtoPre( not ((( not (outsideAirPressure_T1=outsideAirPressure_T2)) and (diff_t2_t1<abruptThreshold)) and (absolutePressureDifference>pressureThreshold)))) or FTP)), ( not LOW_PROB_HAZARD) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b35fd300-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "CONTROL_OBJECTIVES",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted (settlingTime >= 0) & (settlingTime <= settlingTimeMax) &  (overshoot >= 0) & (overshoot <= overshootMax) & (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) from UC5_R_1_1",
        "fulltext": "if (settlingTime >= 0) & (settlingTime <= settlingTimeMax) &  (overshoot >= 0) & (overshoot <= overshootMax) & (steadyStateError >= 0) & (steadyStateError <= steadyStateErrorMax) Engine shall satisfy CONTROL_OBJECTIVES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "settlingTime",
                "settlingTimeMax",
                "overshoot",
                "overshootMax",
                "steadyStateError",
                "steadyStateErrorMax",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ))",
            "regular_condition": "(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ))",
            "conditionTextRange": [
                0,
                177
            ],
            "component_name": "Engine",
            "componentTextRange": [
                179,
                184
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                192,
                217
            ],
            "diagramVariables": "TC = <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ))</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ))</i></b> is true and any point in the interval where <b><i>(( settlingTime >= 0 ) & ( settlingTime <= settlingTimeMax ) & ( overshoot >= 0 ) & ( overshoot <= overshootMax ) & ( steadyStateError >= 0 ) & ( steadyStateError <= steadyStateErrorMax ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))",
            "regular_condition_unexp_ft": "((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))",
            "regular_condition_SMV_pt": "((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))",
            "regular_condition_SMV_ft": "((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))",
            "regular_condition_coco": "((((((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (overshoot>=0)) and (overshoot<=overshootMax)) and (steadyStateError>=0)) and (steadyStateError<=steadyStateErrorMax))",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))</i></b>) & ((! LAST) & (X <b><i>((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))</i></b> & ((Y (! <b><i>((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! ((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax)))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & (((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax)) & ((Y (! ((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! ((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))) & ((! LAST) & (X ((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax))))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & (((((((settlingTime >= 0) & (settlingTime <= settlingTimeMax)) & (overshoot >= 0)) & (overshoot <= overshootMax)) & (steadyStateError >= 0)) & (steadyStateError <= steadyStateErrorMax)) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not ((((((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (overshoot>=0)) and (overshoot<=overshootMax)) and (steadyStateError>=0)) and (steadyStateError<=steadyStateErrorMax)))) or ( not (SI( (((((((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (overshoot>=0)) and (overshoot<=overshootMax)) and (steadyStateError>=0)) and (steadyStateError<=steadyStateErrorMax)) and ((YtoPre( not ((((((settlingTime>=0) and (settlingTime<=settlingTimeMax)) and (overshoot>=0)) and (overshoot<=overshootMax)) and (steadyStateError>=0)) and (steadyStateError<=steadyStateErrorMax)))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Engine</i></b>"
        },
        "_id": "b3604830-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "TRACKING_PILOT_COMMANDS",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted pilotInput => setThrust = V2 from UC5_R_1_1",
        "fulltext": "if pilotInput => setThrust = V2 Engine shall satisfy TRACKING_PILOT_COMMANDS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "pilotInput",
                "setThrust",
                "V2",
                "TRACKING_PILOT_COMMANDS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(pilotInput => setThrust = V2)",
            "regular_condition": "(pilotInput => setThrust = V2)",
            "conditionTextRange": [
                0,
                30
            ],
            "component_name": "Engine",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(TRACKING_PILOT_COMMANDS)",
            "responseTextRange": [
                45,
                75
            ],
            "diagramVariables": "TC = <b><i>(pilotInput => setThrust = V2)</i></b>, Response = <b><i>(TRACKING_PILOT_COMMANDS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(pilotInput => setThrust = V2)</i></b> is true and any point in the interval where <b><i>(pilotInput => setThrust = V2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(pilotInput -> (setThrust = V2))",
            "regular_condition_unexp_ft": "(pilotInput -> (setThrust = V2))",
            "regular_condition_SMV_pt": "(pilotInput -> (setThrust = V2))",
            "regular_condition_SMV_ft": "(pilotInput -> (setThrust = V2))",
            "regular_condition_coco": "(pilotInput => (setThrust=V2))",
            "post_condition_unexp_pt": "TRACKING_PILOT_COMMANDS",
            "post_condition_unexp_ft": "TRACKING_PILOT_COMMANDS",
            "post_condition_SMV_pt": "TRACKING_PILOT_COMMANDS",
            "post_condition_SMV_ft": "TRACKING_PILOT_COMMANDS",
            "post_condition_coco": "TRACKING_PILOT_COMMANDS",
            "ft": "((LAST V (((! <b><i>(pilotInput -> (setThrust = V2))</i></b>) & ((! LAST) & (X <b><i>(pilotInput -> (setThrust = V2))</i></b>))) -> (X ((! LAST) U <b><i>TRACKING_PILOT_COMMANDS</i></b>)))) & (<b><i>(pilotInput -> (setThrust = V2))</i></b> -> ((! LAST) U <b><i>TRACKING_PILOT_COMMANDS</i></b>)))",
            "pt": "((H (! <b><i>(pilotInput -> (setThrust = V2))</i></b>)) | (! ((! <b><i>TRACKING_PILOT_COMMANDS</i></b>) S ((! <b><i>TRACKING_PILOT_COMMANDS</i></b>) & (<b><i>(pilotInput -> (setThrust = V2))</i></b> & ((Y (! <b><i>(pilotInput -> (setThrust = V2))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (pilotInput -> (setThrust = V2)))) | (! ((! TRACKING_PILOT_COMMANDS) S ((! TRACKING_PILOT_COMMANDS) & ((pilotInput -> (setThrust = V2)) & ((Y (! (pilotInput -> (setThrust = V2)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (pilotInput -> (setThrust = V2))) & ((! LAST) & (X (pilotInput -> (setThrust = V2))))) -> (X ((! LAST) U TRACKING_PILOT_COMMANDS)))) & ((pilotInput -> (setThrust = V2)) -> ((! LAST) U TRACKING_PILOT_COMMANDS)))",
            "CoCoSpecCode": "((H( not (pilotInput => (setThrust=V2)))) or ( not (SI( ((pilotInput => (setThrust=V2)) and ((YtoPre( not (pilotInput => (setThrust=V2)))) or FTP)), ( not TRACKING_PILOT_COMMANDS) ))))",
            "component": "<b><i>Engine</i></b>"
        },
        "_id": "b360e470-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "ACTIVE",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted (diff_ref_obs > activeThreshold) from UC5_R_1_1",
        "fulltext": "if (diff_ref_obs > activeThreshold) Engine shall satisfy ACTIVE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "ACTIVE"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( diff_ref_obs > activeThreshold ))",
            "regular_condition": "(( diff_ref_obs > activeThreshold ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "Engine",
            "componentTextRange": [
                36,
                41
            ],
            "post_condition": "(ACTIVE)",
            "responseTextRange": [
                49,
                62
            ],
            "diagramVariables": "TC = <b><i>(( diff_ref_obs > activeThreshold ))</i></b>, Response = <b><i>(ACTIVE)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( diff_ref_obs > activeThreshold ))</i></b> is true and any point in the interval where <b><i>(( diff_ref_obs > activeThreshold ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(diff_ref_obs > activeThreshold)",
            "regular_condition_unexp_ft": "(diff_ref_obs > activeThreshold)",
            "regular_condition_SMV_pt": "(diff_ref_obs > activeThreshold)",
            "regular_condition_SMV_ft": "(diff_ref_obs > activeThreshold)",
            "regular_condition_coco": "(diff_ref_obs>activeThreshold)",
            "post_condition_unexp_pt": "ACTIVE",
            "post_condition_unexp_ft": "ACTIVE",
            "post_condition_SMV_pt": "ACTIVE",
            "post_condition_SMV_ft": "ACTIVE",
            "post_condition_coco": "ACTIVE",
            "ft": "((LAST V (((! <b><i>(diff_ref_obs > activeThreshold)</i></b>) & ((! LAST) & (X <b><i>(diff_ref_obs > activeThreshold)</i></b>))) -> (X ((! LAST) U <b><i>ACTIVE</i></b>)))) & (<b><i>(diff_ref_obs > activeThreshold)</i></b> -> ((! LAST) U <b><i>ACTIVE</i></b>)))",
            "pt": "((H (! <b><i>(diff_ref_obs > activeThreshold)</i></b>)) | (! ((! <b><i>ACTIVE</i></b>) S ((! <b><i>ACTIVE</i></b>) & (<b><i>(diff_ref_obs > activeThreshold)</i></b> & ((Y (! <b><i>(diff_ref_obs > activeThreshold)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (diff_ref_obs > activeThreshold))) | (! ((! ACTIVE) S ((! ACTIVE) & ((diff_ref_obs > activeThreshold) & ((Y (! (diff_ref_obs > activeThreshold))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (diff_ref_obs > activeThreshold)) & ((! LAST) & (X (diff_ref_obs > activeThreshold)))) -> (X ((! LAST) U ACTIVE)))) & ((diff_ref_obs > activeThreshold) -> ((! LAST) U ACTIVE)))",
            "CoCoSpecCode": "((H( not (diff_ref_obs>activeThreshold))) or ( not (SI( ((diff_ref_obs>activeThreshold) and ((YtoPre( not (diff_ref_obs>activeThreshold))) or FTP)), ( not ACTIVE) ))))",
            "component": "<b><i>Engine</i></b>"
        },
        "_id": "b36159a0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "OPERATING_LIMITS",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) from UC5_R_11_1",
        "fulltext": "if (shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound) Controller shall satisfy OPERATING_LIMITS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "shaftSpeed",
                "operatingLowerBound",
                "operatingUpperBound",
                "OPERATING_LIMITS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ))",
            "regular_condition": "(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ))",
            "conditionTextRange": [
                0,
                75
            ],
            "component_name": "Controller",
            "componentTextRange": [
                77,
                86
            ],
            "post_condition": "(OPERATING_LIMITS)",
            "responseTextRange": [
                94,
                117
            ],
            "diagramVariables": "TC = <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ))</i></b>, Response = <b><i>(OPERATING_LIMITS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ))</i></b> is true and any point in the interval where <b><i>(( shaftSpeed >= operatingLowerBound ) & ( shaftSpeed <= operatingUpperBound ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))",
            "regular_condition_unexp_ft": "((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))",
            "regular_condition_SMV_pt": "((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))",
            "regular_condition_SMV_ft": "((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))",
            "regular_condition_coco": "((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound))",
            "post_condition_unexp_pt": "OPERATING_LIMITS",
            "post_condition_unexp_ft": "OPERATING_LIMITS",
            "post_condition_SMV_pt": "OPERATING_LIMITS",
            "post_condition_SMV_ft": "OPERATING_LIMITS",
            "post_condition_coco": "OPERATING_LIMITS",
            "ft": "((LAST V (((! <b><i>((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))</i></b>) & ((! LAST) & (X <b><i>((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))) & (<b><i>((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))",
            "pt": "((H (! <b><i>((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))</i></b>)) | (! ((! <b><i>OPERATING_LIMITS</i></b>) S ((! <b><i>OPERATING_LIMITS</i></b>) & (<b><i>((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))</i></b> & ((Y (! <b><i>((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! ((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)))) | (! ((! OPERATING_LIMITS) S ((! OPERATING_LIMITS) & (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) & ((Y (! ((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! ((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))) & ((! LAST) & (X ((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound))))) -> (X ((! LAST) U OPERATING_LIMITS)))) & (((shaftSpeed >= operatingLowerBound) & (shaftSpeed <= operatingUpperBound)) -> ((! LAST) U OPERATING_LIMITS)))",
            "CoCoSpecCode": "((H( not ((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)))) or ( not (SI( (((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)) and ((YtoPre( not ((shaftSpeed>=operatingLowerBound) and (shaftSpeed<=operatingUpperBound)))) or FTP)), ( not OPERATING_LIMITS) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b361ced0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_5_1",
        "parent_reqid": "UC5_R_5",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_9:\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting control objectives (settling time, overshoot, steady state error)\n",
        "comments": "",
        "fulltext": "when ACTIVE if MECHANICAL_FATIGUE & (observedThrust = V1) & TRACKING_PILOT_COMMANDS Controller shall until NOT_ACTIVE satisfy CONTROL_OBJECTIVES & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "MECHANICAL_FATIGUE",
                "observedThrust",
                "V1",
                "TRACKING_PILOT_COMMANDS",
                "NOT_ACTIVE",
                "CONTROL_OBJECTIVES",
                "V2"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))",
            "conditionTextRange": [
                0,
                82
            ],
            "component_name": "Controller",
            "componentTextRange": [
                84,
                93
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                101,
                116
            ],
            "post_condition": "(CONTROL_OBJECTIVES & ( observedThrust = V2 ))",
            "responseTextRange": [
                118,
                167
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_unexp_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_coco": "(ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS))",
            "post_condition_unexp_pt": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_unexp_ft": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_SMV_pt": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_SMV_ft": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_coco": "(CONTROL_OBJECTIVES and (observedThrust=V2))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>))))) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> & ((Y (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | FTP)))) -> <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) & ((Y (! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (! (Y TRUE)))))) -> (CONTROL_OBJECTIVES & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))) & ((! LAST) & (X (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))))) -> (X ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V2))))))) & ((ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) -> ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or ((SI( ((ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)) and ((YtoPre( not (ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or FTP)), ( not NOT_ACTIVE) )) => (CONTROL_OBJECTIVES and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3621cf0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_7_1",
        "parent_reqid": "UC5_R_7",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_11\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when ACTIVE if MECHANICAL_FATIGUE & (observedThrust = V1) & TRACKING_PILOT_COMMANDS Controller shall until NOT_ACTIVE satisfy OPERATING_LIMITS & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "MECHANICAL_FATIGUE",
                "observedThrust",
                "V1",
                "TRACKING_PILOT_COMMANDS",
                "NOT_ACTIVE",
                "OPERATING_LIMITS",
                "V2"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))",
            "conditionTextRange": [
                0,
                82
            ],
            "component_name": "Controller",
            "componentTextRange": [
                84,
                93
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                101,
                116
            ],
            "post_condition": "(OPERATING_LIMITS & ( observedThrust = V2 ))",
            "responseTextRange": [
                118,
                165
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(OPERATING_LIMITS & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_unexp_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_coco": "(ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS))",
            "post_condition_unexp_pt": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_unexp_ft": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_SMV_pt": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_SMV_ft": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_coco": "(OPERATING_LIMITS and (observedThrust=V2))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>))))) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> & ((Y (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | FTP)))) -> <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) & ((Y (! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (! (Y TRUE)))))) -> (OPERATING_LIMITS & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))) & ((! LAST) & (X (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))))) -> (X ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V2))))))) & ((ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) -> ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or ((SI( ((ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)) and ((YtoPre( not (ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or FTP)), ( not NOT_ACTIVE) )) => (OPERATING_LIMITS and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3629220-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_11_1",
        "parent_reqid": "UC5_R_11",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_15\n* Preconditions: Aircraft is in operating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, pilotinput changes from A1 to A2, and outside air pressure abruptly changes from P1 to P2 \n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when ACTIVE if LOW_PROB_HAZARD & (observedThrust = V1) & TRACKING_PILOT_COMMANDS Controller shall until NOT_ACTIVE satisfy  OPERATING_LIMITS & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "LOW_PROB_HAZARD",
                "observedThrust",
                "V1",
                "TRACKING_PILOT_COMMANDS",
                "NOT_ACTIVE",
                "OPERATING_LIMITS",
                "V2"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))",
            "conditionTextRange": [
                0,
                79
            ],
            "component_name": "Controller",
            "componentTextRange": [
                81,
                90
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                98,
                113
            ],
            "post_condition": "(OPERATING_LIMITS & ( observedThrust = V2 ))",
            "responseTextRange": [
                115,
                163
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(OPERATING_LIMITS & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_unexp_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_coco": "(ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS))",
            "post_condition_unexp_pt": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_unexp_ft": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_SMV_pt": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_SMV_ft": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_coco": "(OPERATING_LIMITS and (observedThrust=V2))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>))))) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> & ((Y (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | FTP)))) -> <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) & ((Y (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (! (Y TRUE)))))) -> (OPERATING_LIMITS & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))) & ((! LAST) & (X (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))))) -> (X ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V2))))))) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) -> ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or ((SI( ((ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)) and ((YtoPre( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or FTP)), ( not NOT_ACTIVE) )) => (OPERATING_LIMITS and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3632e60-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_8_1",
        "parent_reqid": "UC5_R_8",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_12\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when ACTIVE if MECHANICAL_FATIGUE & NOMINAL_OPERATION & (observedThrust = V2) Controller shall until NOT_ACTIVE satisfy OPERATING_LIMITS & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "MECHANICAL_FATIGUE",
                "NOMINAL_OPERATION",
                "observedThrust",
                "V2",
                "NOT_ACTIVE",
                "OPERATING_LIMITS",
                "V1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION & ( observedThrust = V2 ))",
            "regular_condition": "((ACTIVE) & (MECHANICAL_FATIGUE & NOMINAL_OPERATION & ( observedThrust = V2 )))",
            "conditionTextRange": [
                0,
                76
            ],
            "component_name": "Controller",
            "componentTextRange": [
                78,
                87
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                95,
                110
            ],
            "post_condition": "(OPERATING_LIMITS & ( observedThrust = V1 ))",
            "responseTextRange": [
                112,
                159
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(OPERATING_LIMITS & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_unexp_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_SMV_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_SMV_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_coco": "(ACTIVE and ((MECHANICAL_FATIGUE and NOMINAL_OPERATION) and (observedThrust=V2)))",
            "post_condition_unexp_pt": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_unexp_ft": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_SMV_pt": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_SMV_ft": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_coco": "(OPERATING_LIMITS and (observedThrust=V1))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>))))) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b> & ((Y (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>)) | FTP)))) -> <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2))))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2))) & ((Y (! (ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2))))) | (! (Y TRUE)))))) -> (OPERATING_LIMITS & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))) & ((! LAST) & (X (ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2)))))) -> (X ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V1))))))) & ((ACTIVE & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & (observedThrust = V2))) -> ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((MECHANICAL_FATIGUE and NOMINAL_OPERATION) and (observedThrust=V2))))) or ((SI( ((ACTIVE and ((MECHANICAL_FATIGUE and NOMINAL_OPERATION) and (observedThrust=V2))) and ((YtoPre( not (ACTIVE and ((MECHANICAL_FATIGUE and NOMINAL_OPERATION) and (observedThrust=V2))))) or FTP)), ( not NOT_ACTIVE) )) => (OPERATING_LIMITS and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3635570-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_9_1",
        "parent_reqid": "UC5_R_9",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_13\n* Preconditions: Aircraft is in operating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, pilot input changes from A1 to A2, and outside air pressure abruptly changes from P1 to P2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting control objectives (settling time, overshoot, steady state error)\n\n",
        "comments": "",
        "fulltext": "when ACTIVE if LOW_PROB_HAZARD & (observedThrust = V1) & TRACKING_PILOT_COMMANDS Controller shall until NOT_ACTIVE satisfy CONTROL_OBJECTIVES & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "LOW_PROB_HAZARD",
                "observedThrust",
                "V1",
                "TRACKING_PILOT_COMMANDS",
                "NOT_ACTIVE",
                "CONTROL_OBJECTIVES",
                "V2"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))",
            "conditionTextRange": [
                0,
                79
            ],
            "component_name": "Controller",
            "componentTextRange": [
                81,
                90
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                98,
                113
            ],
            "post_condition": "(CONTROL_OBJECTIVES & ( observedThrust = V2 ))",
            "responseTextRange": [
                115,
                164
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_unexp_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_coco": "(ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS))",
            "post_condition_unexp_pt": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_unexp_ft": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_SMV_pt": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_SMV_ft": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_coco": "(CONTROL_OBJECTIVES and (observedThrust=V2))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>))))) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> & ((Y (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | FTP)))) -> <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) & ((Y (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (! (Y TRUE)))))) -> (CONTROL_OBJECTIVES & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))) & ((! LAST) & (X (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))))) -> (X ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V2))))))) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) -> ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or ((SI( ((ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)) and ((YtoPre( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or FTP)), ( not NOT_ACTIVE) )) => (CONTROL_OBJECTIVES and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b363caa0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_12_1",
        "parent_reqid": "UC5_R_12",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_16\n* Preconditions: Aircraft is in operating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, small perturbations in non-pilot input cause it to change to V2, and outside air pressure abruptly changes from P1 to P2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when ACTIVE if LOW_PROB_HAZARD & (observedThrust = V2) & NOMINAL_OPERATION Controller shall until NOT_ACTIVE satisfy OPERATING_LIMITS & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "LOW_PROB_HAZARD",
                "observedThrust",
                "V2",
                "NOMINAL_OPERATION",
                "NOT_ACTIVE",
                "OPERATING_LIMITS",
                "V1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION)",
            "regular_condition": "((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))",
            "conditionTextRange": [
                0,
                73
            ],
            "component_name": "Controller",
            "componentTextRange": [
                75,
                84
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                92,
                107
            ],
            "post_condition": "(OPERATING_LIMITS & ( observedThrust = V1 ))",
            "responseTextRange": [
                109,
                156
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(OPERATING_LIMITS & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_unexp_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_SMV_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_SMV_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_coco": "(ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION))",
            "post_condition_unexp_pt": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_unexp_ft": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_SMV_pt": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_SMV_ft": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_coco": "(OPERATING_LIMITS and (observedThrust=V1))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>))))) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b> & ((Y (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>)) | FTP)))) -> <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)) & ((Y (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)))) | (! (Y TRUE)))))) -> (OPERATING_LIMITS & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))) & ((! LAST) & (X (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))))) -> (X ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V1))))))) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)) -> ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION)))) or ((SI( ((ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION)) and ((YtoPre( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION)))) or FTP)), ( not NOT_ACTIVE) )) => (OPERATING_LIMITS and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36418c0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_4_1",
        "parent_reqid": "UC5_R_4",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_7\n* Preconditions: Aircraft is in operating mode M and sensor S value deviates at most +/-R% from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)\n\nUC5_TC_8\n* Preconditions: Aircraft is in operating mode M and sensor S value is not available (sensor is out of order)\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when ACTIVE if SENSOR_FAULTS & NOMINAL_OPERATION & (observedThrust = V2) Controller shall until NOT_ACTIVE satisfy OPERATING_LIMITS & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "SENSOR_FAULTS",
                "NOMINAL_OPERATION",
                "observedThrust",
                "V2",
                "NOT_ACTIVE",
                "OPERATING_LIMITS",
                "V1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 ))",
            "regular_condition": "((ACTIVE) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))",
            "conditionTextRange": [
                0,
                71
            ],
            "component_name": "Controller",
            "componentTextRange": [
                73,
                82
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                90,
                105
            ],
            "post_condition": "(OPERATING_LIMITS & ( observedThrust = V1 ))",
            "responseTextRange": [
                107,
                154
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(OPERATING_LIMITS & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_unexp_ft": "(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_SMV_pt": "(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_SMV_ft": "(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_coco": "(ACTIVE and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2)))",
            "post_condition_unexp_pt": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_unexp_ft": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_SMV_pt": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_SMV_ft": "(OPERATING_LIMITS & (observedThrust = V1))",
            "post_condition_coco": "(OPERATING_LIMITS and (observedThrust=V1))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>))))) & (<b><i>(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b> & ((Y (! <b><i>(ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>)) | FTP)))) -> <b><i>(OPERATING_LIMITS & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))) & ((Y (! (ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))))) | (! (Y TRUE)))))) -> (OPERATING_LIMITS & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))) & ((! LAST) & (X (ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))))) -> (X ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V1))))))) & ((ACTIVE & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))) -> ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2))))) or ((SI( ((ACTIVE and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2))) and ((YtoPre( not (ACTIVE and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2))))) or FTP)), ( not NOT_ACTIVE) )) => (OPERATING_LIMITS and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36466e0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_3_1",
        "parent_reqid": "UC5_R_3",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_5:\n* Preconditions: Aircraft is in operating mode M and sensor S value deviates at most +/-R % from nominal value\n* Input conditions/steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)\n\nUC5_TC_6:\n* Preconditions: Aircraft is in operating mode M and sensor S value is not available (sensor is out of order)\n* Input conditions / steps: Observed aircraft thrust is at value V1 and pilot input changes from A1 to A2\n* Expected results: Observed aircraft thrust changes and settles to value V2, respecting operating limit objectives (inactiveThreshold.g., upper limit in shaft speed)",
        "comments": "",
        "fulltext": "when ACTIVE if SENSOR_FAULTS & (observedThrust = V1) & TRACKING_PILOT_COMMANDS  Controller shall until NOT_ACTIVE satisfy OPERATING_LIMITS & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "SENSOR_FAULTS",
                "observedThrust",
                "V1",
                "TRACKING_PILOT_COMMANDS",
                "NOT_ACTIVE",
                "OPERATING_LIMITS",
                "V2"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "((ACTIVE) & (SENSOR_FAULTS & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))",
            "conditionTextRange": [
                0,
                77
            ],
            "component_name": "Controller",
            "componentTextRange": [
                80,
                89
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                97,
                112
            ],
            "post_condition": "(OPERATING_LIMITS & ( observedThrust = V2 ))",
            "responseTextRange": [
                114,
                161
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (SENSOR_FAULTS & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(OPERATING_LIMITS & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (SENSOR_FAULTS & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (SENSOR_FAULTS & ( observedThrust = V1 ) & TRACKING_PILOT_COMMANDS))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_unexp_ft": "(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_pt": "(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_SMV_ft": "(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))",
            "regular_condition_coco": "(ACTIVE and ((SENSOR_FAULTS and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS))",
            "post_condition_unexp_pt": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_unexp_ft": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_SMV_pt": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_SMV_ft": "(OPERATING_LIMITS & (observedThrust = V2))",
            "post_condition_coco": "(OPERATING_LIMITS and (observedThrust=V2))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>))))) & (<b><i>(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b> & ((Y (! <b><i>(ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))</i></b>)) | FTP)))) -> <b><i>(OPERATING_LIMITS & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) & ((Y (! (ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)))) | (! (Y TRUE)))))) -> (OPERATING_LIMITS & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))) & ((! LAST) & (X (ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS))))) -> (X ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V2))))))) & ((ACTIVE & ((SENSOR_FAULTS & (observedThrust = V1)) & TRACKING_PILOT_COMMANDS)) -> ((NOT_ACTIVE V ((OPERATING_LIMITS & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (OPERATING_LIMITS & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((SENSOR_FAULTS and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or ((SI( ((ACTIVE and ((SENSOR_FAULTS and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)) and ((YtoPre( not (ACTIVE and ((SENSOR_FAULTS and (observedThrust=V1)) and TRACKING_PILOT_COMMANDS)))) or FTP)), ( not NOT_ACTIVE) )) => (OPERATING_LIMITS and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3648df0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_14_1",
        "parent_reqid": "UC5_R_14",
        "project": "EngineController2.2",
        "rationale": "",
        "comments": "",
        "fulltext": "in nominal mode when (diff_setNL_observedNL > NLmax)  if (!pilotInput => surgeStallAvoidance) Controller shall until (diff_setNL_observedNL < NLmin)  satisfy (newMode=surgeStallPrevention)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "nominal",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "surgeStallPrevention"
            ],
            "scope_mode": "nominal",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! pilotInput => surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))",
            "conditionTextRange": [
                16,
                92
            ],
            "component_name": "Controller",
            "componentTextRange": [
                94,
                103
            ],
            "stop_condition": "(( diff_setNL_observedNL < NLmin ))",
            "timingTextRange": [
                111,
                147
            ],
            "post_condition": "(( newMode = surgeStallPrevention ))",
            "responseTextRange": [
                150,
                187
            ],
            "diagramVariables": "M = <b><i>nominal</i></b>, TC = <b><i>((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL < NLmin ))</i></b>, Response = <b><i>(( newMode = surgeStallPrevention ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>nominal</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL > NLmax )) & (( ! pilotInput => surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))",
            "regular_condition_coco": "((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance))",
            "post_condition_unexp_pt": "(newMode = surgeStallPrevention)",
            "post_condition_unexp_ft": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_pt": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_ft": "(newMode = surgeStallPrevention)",
            "post_condition_coco": "(newMode=surgeStallPrevention)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL<NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL < NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>nominal</i></b> & (! LAST))) | (X (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))) & (<b><i>nominal</i></b> -> (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))",
            "pt": "((H (Lin_<b><i>nominal</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))) & (((! Lin_<b><i>nominal</i></b>) S ((! Lin_<b><i>nominal</i></b>) & Fin_<b><i>nominal</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))",
            "ptExpanded": "((H (((! nominal) & (Y nominal)) -> (Y ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))) & (((! ((! nominal) & (Y nominal))) S ((! ((! nominal) & (Y nominal))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) -> ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))",
            "ftExpanded": "((LAST V ((! ((((! nominal) & (! LAST)) & (X nominal)) & (! LAST))) | (X (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))) & (nominal -> (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & ((! pilotInput) -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))",
            "CoCoSpecCode": "((H((( not nominal) and (YtoPre(nominal))) => (YtoPre(SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))) and ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not (( not nominal) and (YtoPre(nominal)))) )) => (SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (( not pilotInput) => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b364dc10-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_6_1",
        "parent_reqid": "UC5_R_6",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_10\n* Preconditions: Aircraft is in operating mode M and system parameter P deviates at most +/-R % from nominal value\n* Input conditions / steps: Observed aircraft thrust is at value V1 and perturbations in non-pilot input cause it to change to V2\n* Expected results: Observed aircraft thrust returns to value V1, respecting control objectives (settling time, overshoot, steady state error)",
        "comments": "",
        "fulltext": "when ACTIVE if MECHANICAL_FATIGUE & (observedThrust = V2) & NOMINAL_OPERATION Controller shall until NOT_ACTIVE satisfy CONTROL_OBJECTIVES & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "MECHANICAL_FATIGUE",
                "observedThrust",
                "V2",
                "NOMINAL_OPERATION",
                "NOT_ACTIVE",
                "CONTROL_OBJECTIVES",
                "V1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & ( observedThrust = V2 ) & NOMINAL_OPERATION)",
            "regular_condition": "((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V2 ) & NOMINAL_OPERATION))",
            "conditionTextRange": [
                0,
                76
            ],
            "component_name": "Controller",
            "componentTextRange": [
                78,
                87
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                95,
                110
            ],
            "post_condition": "(CONTROL_OBJECTIVES & ( observedThrust = V1 ))",
            "responseTextRange": [
                112,
                161
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (MECHANICAL_FATIGUE & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_unexp_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_SMV_pt": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_SMV_ft": "(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_coco": "(ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V2)) and NOMINAL_OPERATION))",
            "post_condition_unexp_pt": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_unexp_ft": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_SMV_pt": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_SMV_ft": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_coco": "(CONTROL_OBJECTIVES and (observedThrust=V1))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>))))) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b> & ((Y (! <b><i>(ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>)) | FTP)))) -> <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION)) & ((Y (! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION)))) | (! (Y TRUE)))))) -> (CONTROL_OBJECTIVES & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))) & ((! LAST) & (X (ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION))))) -> (X ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V1))))))) & ((ACTIVE & ((MECHANICAL_FATIGUE & (observedThrust = V2)) & NOMINAL_OPERATION)) -> ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V2)) and NOMINAL_OPERATION)))) or ((SI( ((ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V2)) and NOMINAL_OPERATION)) and ((YtoPre( not (ACTIVE and ((MECHANICAL_FATIGUE and (observedThrust=V2)) and NOMINAL_OPERATION)))) or FTP)), ( not NOT_ACTIVE) )) => (CONTROL_OBJECTIVES and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3657850-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_10_1",
        "parent_reqid": "UC5_R_10",
        "project": "EngineController2.2",
        "rationale": "UC5_TC_14\n* Preconditions: Aircraft is inoperating mode M\n* Input conditions / steps: Observed aircraft thrust is at value V1, small perturbations in non-pilot input cause it to change to V2, and outside air pressure abruptly changes from P1 to P2\n* Expected results: Observed aircraft thrust returns to value V1, respecting control objectives (settling time, overshoot, steady state error)",
        "comments": "",
        "fulltext": "when ACTIVE if LOW_PROB_HAZARD &(observedThrust = V2) & NOMINAL_OPERATION Controller shall until NOT_ACTIVE satisfy CONTROL_OBJECTIVES & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "LOW_PROB_HAZARD",
                "observedThrust",
                "V2",
                "NOMINAL_OPERATION",
                "NOT_ACTIVE",
                "CONTROL_OBJECTIVES",
                "V1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION)",
            "regular_condition": "((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))",
            "conditionTextRange": [
                0,
                72
            ],
            "component_name": "Controller",
            "componentTextRange": [
                74,
                83
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                91,
                106
            ],
            "post_condition": "(CONTROL_OBJECTIVES & ( observedThrust = V1 ))",
            "responseTextRange": [
                108,
                157
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (LOW_PROB_HAZARD & ( observedThrust = V2 ) & NOMINAL_OPERATION))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_unexp_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_SMV_pt": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_SMV_ft": "(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))",
            "regular_condition_coco": "(ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION))",
            "post_condition_unexp_pt": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_unexp_ft": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_SMV_pt": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_SMV_ft": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_coco": "(CONTROL_OBJECTIVES and (observedThrust=V1))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>))))) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b> & ((Y (! <b><i>(ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))</i></b>)) | FTP)))) -> <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)) & ((Y (! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)))) | (! (Y TRUE)))))) -> (CONTROL_OBJECTIVES & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))) & ((! LAST) & (X (ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION))))) -> (X ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V1))))))) & ((ACTIVE & ((LOW_PROB_HAZARD & (observedThrust = V2)) & NOMINAL_OPERATION)) -> ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION)))) or ((SI( ((ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION)) and ((YtoPre( not (ACTIVE and ((LOW_PROB_HAZARD and (observedThrust=V2)) and NOMINAL_OPERATION)))) or FTP)), ( not NOT_ACTIVE) )) => (CONTROL_OBJECTIVES and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b365c670-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_14_2",
        "parent_reqid": "UC5_R_14",
        "project": "EngineController2.2",
        "rationale": "",
        "comments": "",
        "fulltext": "in surgeStallPrevention mode when (diff_setNL_observedNL < NLmax) if (!pilotInput => !surgeStallAvoidance) Controller shall until (diff_setNL_observedNL > NLmin) satisfy newMode=nominal",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "surgeStallPrevention",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "nominal"
            ],
            "scope_mode": "surgeStallPrevention",
            "scopeTextRange": [
                0,
                27
            ],
            "qualifier_word": "if",
            "pre_condition": "(( ! pilotInput => ! surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))",
            "conditionTextRange": [
                29,
                105
            ],
            "component_name": "Controller",
            "componentTextRange": [
                107,
                116
            ],
            "stop_condition": "(( diff_setNL_observedNL > NLmin ))",
            "timingTextRange": [
                124,
                160
            ],
            "post_condition": "(newMode = nominal)",
            "responseTextRange": [
                162,
                184
            ],
            "diagramVariables": "M = <b><i>surgeStallPrevention</i></b>, TC = <b><i>((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL > NLmin ))</i></b>, Response = <b><i>(newMode = nominal)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>surgeStallPrevention</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL < NLmax )) & (( ! pilotInput => ! surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))",
            "regular_condition_coco": "((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance)))",
            "post_condition_unexp_pt": "(newMode = nominal)",
            "post_condition_unexp_ft": "(newMode = nominal)",
            "post_condition_SMV_pt": "(newMode = nominal)",
            "post_condition_SMV_ft": "(newMode = nominal)",
            "post_condition_coco": "(newMode=nominal)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL>NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL > NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>surgeStallPrevention</i></b> & (! LAST))) | (X (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))) & (<b><i>surgeStallPrevention</i></b> -> (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))",
            "pt": "((H (Lin_<b><i>surgeStallPrevention</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))) & (((! Lin_<b><i>surgeStallPrevention</i></b>) S ((! Lin_<b><i>surgeStallPrevention</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))",
            "ptExpanded": "((H (((! surgeStallPrevention) & (Y surgeStallPrevention)) -> (Y ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))) & (((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) S ((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) -> ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))",
            "ftExpanded": "((LAST V ((! ((((! surgeStallPrevention) & (! LAST)) & (X surgeStallPrevention)) & (! LAST))) | (X (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))) & (surgeStallPrevention -> (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & ((! pilotInput) -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))",
            "CoCoSpecCode": "((H((( not surgeStallPrevention) and (YtoPre(surgeStallPrevention))) => (YtoPre(SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))) and ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not (( not surgeStallPrevention) and (YtoPre(surgeStallPrevention)))) )) => (SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (( not pilotInput) => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3663ba0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_2_1",
        "parent_reqid": "UC5_R_2",
        "project": "EngineController2.2",
        "rationale": "captures UC5_TC_3 and UC5_TC_4 (mostly)\n\nneed to go over the test cases again because this time the diff should change without pilot input?",
        "comments": "",
        "fulltext": "when (diff_ref_obs >activeThreshold) if SENSOR_FAULTS & NOMINAL_OPERATION & (observedThrust = V2) Controller shall until NOT_ACTIVE satisfy CONTROL_OBJECTIVES & (observedThrust = V1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "diff_ref_obs",
                "activeThreshold",
                "SENSOR_FAULTS",
                "NOMINAL_OPERATION",
                "observedThrust",
                "V2",
                "NOT_ACTIVE",
                "CONTROL_OBJECTIVES",
                "V1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 ))",
            "regular_condition": "((( diff_ref_obs > activeThreshold )) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))",
            "conditionTextRange": [
                0,
                96
            ],
            "component_name": "Controller",
            "componentTextRange": [
                98,
                107
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                115,
                130
            ],
            "post_condition": "(CONTROL_OBJECTIVES & ( observedThrust = V1 ))",
            "responseTextRange": [
                132,
                181
            ],
            "diagramVariables": "TC = <b><i>((( diff_ref_obs > activeThreshold )) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES & ( observedThrust = V1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((( diff_ref_obs > activeThreshold )) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b> is true and any point in the interval where <b><i>((( diff_ref_obs > activeThreshold )) & (SENSOR_FAULTS & NOMINAL_OPERATION & ( observedThrust = V2 )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_unexp_ft": "((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_SMV_pt": "((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_SMV_ft": "((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))",
            "regular_condition_coco": "((diff_ref_obs>activeThreshold) and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2)))",
            "post_condition_unexp_pt": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_unexp_ft": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_SMV_pt": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_SMV_ft": "(CONTROL_OBJECTIVES & (observedThrust = V1))",
            "post_condition_coco": "(CONTROL_OBJECTIVES and (observedThrust=V1))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>) & ((! LAST) & (X <b><i>((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>))))) & (<b><i>((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>))))",
            "pt": "(H ((H (! <b><i>((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b> & ((Y (! <b><i>((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))</i></b>)) | FTP)))) -> <b><i>(CONTROL_OBJECTIVES & (observedThrust = V1))</i></b>)))",
            "ptExpanded": "(H ((H (! ((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & (((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))) & ((Y (! ((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))))) | (! (Y TRUE)))))) -> (CONTROL_OBJECTIVES & (observedThrust = V1)))))",
            "ftExpanded": "((LAST V (((! ((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))) & ((! LAST) & (X ((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2)))))) -> (X ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V1))))))) & (((diff_ref_obs > activeThreshold) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & (observedThrust = V2))) -> ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V1)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V1))))))",
            "CoCoSpecCode": "(H((H( not ((diff_ref_obs>activeThreshold) and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2))))) or ((SI( (((diff_ref_obs>activeThreshold) and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2))) and ((YtoPre( not ((diff_ref_obs>activeThreshold) and ((SENSOR_FAULTS and NOMINAL_OPERATION) and (observedThrust=V2))))) or FTP)), ( not NOT_ACTIVE) )) => (CONTROL_OBJECTIVES and (observedThrust=V1)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b366b0d0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_1",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under sensor faults, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits. \n\nThere isn't anything else - not interested in rising time at the moment. \n\nTracking pilot commands: there is a change and might take a few seconds to complete (Settlingtime). \n\nif ((sensorfaults) & (trackingPilotCommands)) Controller shall within settlingTime ticks satisfy  (controlObjectives) - needs a numerical value.\n\nalways (new r0 -> in the future within d (new r0 releases |r0-y0| <=inactiveThreshold))\n\n|r0-y0| = diff. This is difference of reference and controller output\n\nsettling time should be x seconds: if diff >activeThreshold then within x seconds diff <inactiveThreshold (x=10 for example)",
        "fulltext": "if SENSOR_FAULTS & TRACKING_PILOT_COMMANDS Controller shall satisfy CONTROL_OBJECTIVES ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SENSOR_FAULTS",
                "TRACKING_PILOT_COMMANDS",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "conditionTextRange": [
                0,
                41
            ],
            "component_name": "Controller",
            "componentTextRange": [
                43,
                52
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                60,
                85
            ],
            "diagramVariables": "TC = <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> is true and any point in the interval where <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_unexp_ft": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_pt": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_ft": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_coco": "(SENSOR_FAULTS and TRACKING_PILOT_COMMANDS)",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>) & ((! LAST) & (X <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> & ((Y (! <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & ((Y (! (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)) & ((! LAST) & (X (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not (SENSOR_FAULTS and TRACKING_PILOT_COMMANDS))) or ( not (SI( ((SENSOR_FAULTS and TRACKING_PILOT_COMMANDS) and ((YtoPre( not (SENSOR_FAULTS and TRACKING_PILOT_COMMANDS))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b366fef0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_9",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under low probability hazardous events, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nlowProbabilityHazardousEvents is the air pressure changing above a certain abruptThreshold between 2 time periods below a certain abruptThreshold. This was propogated to the child requirements based on the test case.\n",
        "fulltext": "if LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS Controller shall satisfy CONTROL_OBJECTIVES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "LOW_PROB_HAZARD",
                "TRACKING_PILOT_COMMANDS",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "conditionTextRange": [
                0,
                43
            ],
            "component_name": "Controller",
            "componentTextRange": [
                45,
                54
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                62,
                87
            ],
            "diagramVariables": "TC = <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> is true and any point in the interval where <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_unexp_ft": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_pt": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_ft": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_coco": "(LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS)",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>) & ((! LAST) & (X <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> & ((Y (! <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & ((LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS) & ((Y (! (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)) & ((! LAST) & (X (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & ((LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not (LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS))) or ( not (SI( ((LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS) and ((YtoPre( not (LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3674d10-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_4",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under sensor faults, during regulation of nominal system operation (no change in pilot input), operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed)",
        "fulltext": "if SENSOR_FAULTS & NOMINAL_OPERATION Controller shall satisfy OPERATING_LIMITS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SENSOR_FAULTS",
                "NOMINAL_OPERATION",
                "OPERATING_LIMITS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "conditionTextRange": [
                0,
                35
            ],
            "component_name": "Controller",
            "componentTextRange": [
                37,
                46
            ],
            "post_condition": "(OPERATING_LIMITS)",
            "responseTextRange": [
                54,
                77
            ],
            "diagramVariables": "TC = <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>, Response = <b><i>(OPERATING_LIMITS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> is true and any point in the interval where <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_unexp_ft": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_SMV_pt": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_SMV_ft": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_coco": "(SENSOR_FAULTS and NOMINAL_OPERATION)",
            "post_condition_unexp_pt": "OPERATING_LIMITS",
            "post_condition_unexp_ft": "OPERATING_LIMITS",
            "post_condition_SMV_pt": "OPERATING_LIMITS",
            "post_condition_SMV_ft": "OPERATING_LIMITS",
            "post_condition_coco": "OPERATING_LIMITS",
            "ft": "((LAST V (((! <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>) & ((! LAST) & (X <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))) & (<b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))",
            "pt": "((H (! <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>)) | (! ((! <b><i>OPERATING_LIMITS</i></b>) S ((! <b><i>OPERATING_LIMITS</i></b>) & (<b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> & ((Y (! <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (SENSOR_FAULTS & NOMINAL_OPERATION))) | (! ((! OPERATING_LIMITS) S ((! OPERATING_LIMITS) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & ((Y (! (SENSOR_FAULTS & NOMINAL_OPERATION))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (SENSOR_FAULTS & NOMINAL_OPERATION)) & ((! LAST) & (X (SENSOR_FAULTS & NOMINAL_OPERATION)))) -> (X ((! LAST) U OPERATING_LIMITS)))) & ((SENSOR_FAULTS & NOMINAL_OPERATION) -> ((! LAST) U OPERATING_LIMITS)))",
            "CoCoSpecCode": "((H( not (SENSOR_FAULTS and NOMINAL_OPERATION))) or ( not (SI( ((SENSOR_FAULTS and NOMINAL_OPERATION) and ((YtoPre( not (SENSOR_FAULTS and NOMINAL_OPERATION))) or FTP)), ( not OPERATING_LIMITS) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b367c240-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_10",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under low probability hazardous events, during regulation of nominal system operation (no change in pilot input), control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits) \n\nthere is an identifiable event: sudden sensor change.\n\nDefinition of \"abruptly\" might be useful but could use booleans instead.\nt1, t2 (time points), p1,p2(pressure): (p2-p1)/(t2-t1) >abruptThreshold or < is an abrupt change.",
        "fulltext": "if (LOW_PROB_HAZARD) & (!trackingPilotCommands) Controller shall satisfy CONTROL_OBJECTIVES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "lowProbabilityHazardousEvents",
                "trackingPilotCommands",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))",
            "regular_condition": "(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                60
            ],
            "component_name": "Controller",
            "componentTextRange": [
                62,
                71
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                79,
                104
            ],
            "diagramVariables": "TC = <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( lowProbabilityHazardousEvents ) & ( ! trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(lowProbabilityHazardousEvents & (! trackingPilotCommands))",
            "regular_condition_unexp_ft": "(lowProbabilityHazardousEvents & (! trackingPilotCommands))",
            "regular_condition_SMV_pt": "(lowProbabilityHazardousEvents & (! trackingPilotCommands))",
            "regular_condition_SMV_ft": "(lowProbabilityHazardousEvents & (! trackingPilotCommands))",
            "regular_condition_coco": "(lowProbabilityHazardousEvents and ( not trackingPilotCommands))",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>(lowProbabilityHazardousEvents & (! trackingPilotCommands))</i></b>) & ((! LAST) & (X <b><i>(lowProbabilityHazardousEvents & (! trackingPilotCommands))</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>(lowProbabilityHazardousEvents & (! trackingPilotCommands))</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>(lowProbabilityHazardousEvents & (! trackingPilotCommands))</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>(lowProbabilityHazardousEvents & (! trackingPilotCommands))</i></b> & ((Y (! <b><i>(lowProbabilityHazardousEvents & (! trackingPilotCommands))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (lowProbabilityHazardousEvents & (! trackingPilotCommands)))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & ((lowProbabilityHazardousEvents & (! trackingPilotCommands)) & ((Y (! (lowProbabilityHazardousEvents & (! trackingPilotCommands)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (lowProbabilityHazardousEvents & (! trackingPilotCommands))) & ((! LAST) & (X (lowProbabilityHazardousEvents & (! trackingPilotCommands))))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & ((lowProbabilityHazardousEvents & (! trackingPilotCommands)) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not (lowProbabilityHazardousEvents and ( not trackingPilotCommands)))) or ( not (SI( ((lowProbabilityHazardousEvents and ( not trackingPilotCommands)) and ((YtoPre( not (lowProbabilityHazardousEvents and ( not trackingPilotCommands)))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3683770-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_13_1",
        "parent_reqid": "UC5_R_13",
        "project": "EngineController2.2",
        "rationale": "While tracking pilot commands, controller operating mode shall appropriately switch between nominal and surge / stall prevention operating state \n\n* Preconditions: Aircraft is in nominal operating mode \n* Input conditions / steps: Pilot input changes from A1 to A2, causing surge / stall avoidance indicator signal to be set \n* Expected results: Aircraft switches to surge / stall prevention operating mode\n\nmight need for later: (pilotInput => LP = speed2)",
        "fulltext": "in nominal mode when (diff_setNL_observedNL > NLmax) if (pilotInput => surgeStallAvoidance) Controller shall until (diff_setNL_observedNL < NLmin) satisfy (newMode = surgeStallPrevention)  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "nominal",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "surgeStallPrevention"
            ],
            "scope_mode": "nominal",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(( pilotInput => surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))",
            "conditionTextRange": [
                16,
                90
            ],
            "component_name": "Controller",
            "componentTextRange": [
                92,
                101
            ],
            "stop_condition": "(( diff_setNL_observedNL < NLmin ))",
            "timingTextRange": [
                109,
                145
            ],
            "post_condition": "(( newMode = surgeStallPrevention ))",
            "responseTextRange": [
                147,
                186
            ],
            "diagramVariables": "M = <b><i>nominal</i></b>, TC = <b><i>((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL < NLmin ))</i></b>, Response = <b><i>(( newMode = surgeStallPrevention ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>nominal</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL > NLmax )) & (( pilotInput => surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))",
            "regular_condition_coco": "((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance))",
            "post_condition_unexp_pt": "(newMode = surgeStallPrevention)",
            "post_condition_unexp_ft": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_pt": "(newMode = surgeStallPrevention)",
            "post_condition_SMV_ft": "(newMode = surgeStallPrevention)",
            "post_condition_coco": "(newMode=surgeStallPrevention)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL<NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL < NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL < NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>nominal</i></b> & (! LAST))) | (X (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))) & (<b><i>nominal</i></b> -> (((Lin_<b><i>nominal</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))) & (! (Lin_<b><i>nominal</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (! (Lin_<b><i>nominal</i></b> | LAST))) U ((! <b><i>(newMode = surgeStallPrevention)</i></b>) & (! <b><i>(diff_setNL_observedNL < NLmin)</i></b>)))) | (((<b><i>(newMode = surgeStallPrevention)</i></b> & (Lin_<b><i>nominal</i></b> | LAST)) | (Lin_<b><i>nominal</i></b> | LAST)) V <b><i>(newMode = surgeStallPrevention)</i></b>))))))",
            "pt": "((H (Lin_<b><i>nominal</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))) & (((! Lin_<b><i>nominal</i></b>) S ((! Lin_<b><i>nominal</i></b>) & Fin_<b><i>nominal</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) S ((! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>) & Fin_<b><i>nominal</i></b>)) | (((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL < NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))</i></b>)) | Fin_<b><i>nominal</i></b>)))) -> <b><i>(newMode = surgeStallPrevention)</i></b>)) & Fin_<b><i>nominal</i></b>))))",
            "ptExpanded": "((H (((! nominal) & (Y nominal)) -> (Y ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))) & (((! ((! nominal) & (Y nominal))) S ((! ((! nominal) & (Y nominal))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) -> ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) S ((((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) S ((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (nominal & ((! (Y TRUE)) | (Y (! nominal)))))) | (((! (diff_setNL_observedNL < NLmin)) S ((! (diff_setNL_observedNL < NLmin)) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) & ((Y (! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)))) | (nominal & ((! (Y TRUE)) | (Y (! nominal)))))))) -> (newMode = surgeStallPrevention))) & (nominal & ((! (Y TRUE)) | (Y (! nominal))))))))",
            "ftExpanded": "((LAST V ((! ((((! nominal) & (! LAST)) & (X nominal)) & (! LAST))) | (X (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))) & (nominal -> (((((nominal & (! LAST)) & (X (! nominal))) | LAST) V (((! ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & ((! LAST) & ((X ((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))))) & (((diff_setNL_observedNL > NLmax) & (pilotInput -> surgeStallAvoidance)) -> ((! (((! (diff_setNL_observedNL < NLmin)) & (! (((nominal & (! LAST)) & (X (! nominal))) | LAST))) U ((! (newMode = surgeStallPrevention)) & (! (diff_setNL_observedNL < NLmin))))) | ((((newMode = surgeStallPrevention) & (((nominal & (! LAST)) & (X (! nominal))) | LAST)) | (((nominal & (! LAST)) & (X (! nominal))) | LAST)) V (newMode = surgeStallPrevention)))))))",
            "CoCoSpecCode": "((H((( not nominal) and (YtoPre(nominal))) => (YtoPre(SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))) and ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not (( not nominal) and (YtoPre(nominal)))) )) => (SI( (nominal and (FTP or (YtoPre( not nominal)))), ((SI( (nominal and (FTP or (YtoPre( not nominal)))), ( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance))) )) or ((SI( (((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)) and ((YtoPre( not ((diff_setNL_observedNL>NLmax) and (pilotInput => surgeStallAvoidance)))) or (nominal and (FTP or (YtoPre( not nominal)))))), ( not (diff_setNL_observedNL<NLmin)) )) => (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3688590-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_13",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "While tracking pilot commands, controller operating mode shall appropriately switch between nominal and surge / stall prevention operating state.\n\nsemantics for \"appropriately\"? - doesn't matter",
        "fulltext": "if (TRACKING_PILOT_COMMANDS) Controller shall satisfy newMode=nominal | newMode=surgeStallPrevention",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "trackingPilotCommands",
                "newMode",
                "nominal",
                "surgeStallPrevention"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( trackingPilotCommands ))",
            "regular_condition": "(( trackingPilotCommands ))",
            "conditionTextRange": [
                0,
                25
            ],
            "component_name": "Controller",
            "componentTextRange": [
                27,
                36
            ],
            "post_condition": "(newMode = nominal | newMode = surgeStallPrevention)",
            "responseTextRange": [
                44,
                97
            ],
            "diagramVariables": "TC = <b><i>(( trackingPilotCommands ))</i></b>, Response = <b><i>(newMode = nominal | newMode = surgeStallPrevention)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( trackingPilotCommands ))</i></b> is true and any point in the interval where <b><i>(( trackingPilotCommands ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "trackingPilotCommands",
            "regular_condition_unexp_ft": "trackingPilotCommands",
            "regular_condition_SMV_pt": "trackingPilotCommands",
            "regular_condition_SMV_ft": "trackingPilotCommands",
            "regular_condition_coco": "trackingPilotCommands",
            "post_condition_unexp_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_unexp_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_coco": "((newMode=nominal) or (newMode=surgeStallPrevention))",
            "ft": "((LAST V (((! <b><i>trackingPilotCommands</i></b>) & ((! LAST) & (X <b><i>trackingPilotCommands</i></b>))) -> (X ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))) & (<b><i>trackingPilotCommands</i></b> -> ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))",
            "pt": "((H (! <b><i>trackingPilotCommands</i></b>)) | (! ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) S ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) & (<b><i>trackingPilotCommands</i></b> & ((Y (! <b><i>trackingPilotCommands</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! trackingPilotCommands)) | (! ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) S ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) & (trackingPilotCommands & ((Y (! trackingPilotCommands)) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! trackingPilotCommands) & ((! LAST) & (X trackingPilotCommands))) -> (X ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))) & (trackingPilotCommands -> ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))",
            "CoCoSpecCode": "((H( not trackingPilotCommands)) or ( not (SI( (trackingPilotCommands and ((YtoPre( not trackingPilotCommands)) or FTP)), ( not ((newMode=nominal) or (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b368d3b0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_11",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under low probability hazardous events, while tracking pilot commands, operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed) ",
        "fulltext": "if LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS Controller shall satisfy OPERATING_LIMITS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "LOW_PROB_HAZARD",
                "TRACKING_PILOT_COMMANDS",
                "OPERATING_LIMITS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "conditionTextRange": [
                0,
                43
            ],
            "component_name": "Controller",
            "componentTextRange": [
                45,
                54
            ],
            "post_condition": "(OPERATING_LIMITS)",
            "responseTextRange": [
                62,
                85
            ],
            "diagramVariables": "TC = <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>, Response = <b><i>(OPERATING_LIMITS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> is true and any point in the interval where <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_unexp_ft": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_pt": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_ft": "(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)",
            "regular_condition_coco": "(LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS)",
            "post_condition_unexp_pt": "OPERATING_LIMITS",
            "post_condition_unexp_ft": "OPERATING_LIMITS",
            "post_condition_SMV_pt": "OPERATING_LIMITS",
            "post_condition_SMV_ft": "OPERATING_LIMITS",
            "post_condition_coco": "OPERATING_LIMITS",
            "ft": "((LAST V (((! <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>) & ((! LAST) & (X <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))) & (<b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))",
            "pt": "((H (! <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>)) | (! ((! <b><i>OPERATING_LIMITS</i></b>) S ((! <b><i>OPERATING_LIMITS</i></b>) & (<b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b> & ((Y (! <b><i>(LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS))) | (! ((! OPERATING_LIMITS) S ((! OPERATING_LIMITS) & ((LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS) & ((Y (! (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)) & ((! LAST) & (X (LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS)))) -> (X ((! LAST) U OPERATING_LIMITS)))) & ((LOW_PROB_HAZARD & TRACKING_PILOT_COMMANDS) -> ((! LAST) U OPERATING_LIMITS)))",
            "CoCoSpecCode": "((H( not (LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS))) or ( not (SI( ((LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS) and ((YtoPre( not (LOW_PROB_HAZARD and TRACKING_PILOT_COMMANDS))) or FTP)), ( not OPERATING_LIMITS) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36948e0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_13_2",
        "parent_reqid": "UC5_R_13",
        "project": "EngineController2.2",
        "rationale": "* Preconditions: Aircraft is in surge / stall prevention operating mode \n* Input conditions / steps: Pilot input changes from A1 to A2, causing surge / stall avoidance indicator signal to be cleared \n* Expected results: Aircraft switches to nominal operating mode",
        "fulltext": "in surgeStallPrevention mode  when (diff_setNL_observedNL < NLmax)  if  (pilotInput => !surgeStallAvoidance) Controller shall until (diff_setNL_observedNL > NLmin)  satisfy newMode=nominal  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "surgeStallPrevention",
                "diff_setNL_observedNL",
                "NLmax",
                "pilotInput",
                "surgeStallAvoidance",
                "NLmin",
                "newMode",
                "nominal"
            ],
            "scope_mode": "surgeStallPrevention",
            "scopeTextRange": [
                0,
                27
            ],
            "qualifier_word": "if",
            "pre_condition": "(( pilotInput => ! surgeStallAvoidance ))",
            "regular_condition": "((( diff_setNL_observedNL < NLmax )) & (( pilotInput => ! surgeStallAvoidance )))",
            "conditionTextRange": [
                30,
                107
            ],
            "component_name": "Controller",
            "componentTextRange": [
                109,
                118
            ],
            "stop_condition": "(( diff_setNL_observedNL > NLmin ))",
            "timingTextRange": [
                126,
                162
            ],
            "post_condition": "(newMode = nominal)",
            "responseTextRange": [
                165,
                187
            ],
            "diagramVariables": "M = <b><i>surgeStallPrevention</i></b>, TC = <b><i>((( diff_setNL_observedNL < NLmax )) & (( pilotInput => ! surgeStallAvoidance )))</i></b>, SC = <b><i>(( diff_setNL_observedNL > NLmin ))</i></b>, Response = <b><i>(newMode = nominal)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>surgeStallPrevention</i></b> holds.\nTRIGGER: first point in the interval if <b><i>((( diff_setNL_observedNL < NLmax )) & (( pilotInput => ! surgeStallAvoidance )))</i></b> is true and any point in the interval where <b><i>((( diff_setNL_observedNL < NLmax )) & (( pilotInput => ! surgeStallAvoidance )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_unexp_ft": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_pt": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_SMV_ft": "((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))",
            "regular_condition_coco": "((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance)))",
            "post_condition_unexp_pt": "(newMode = nominal)",
            "post_condition_unexp_ft": "(newMode = nominal)",
            "post_condition_SMV_pt": "(newMode = nominal)",
            "post_condition_SMV_ft": "(newMode = nominal)",
            "post_condition_coco": "(newMode=nominal)",
            "stop_condition_unexp_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_pt": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_coco": "(diff_setNL_observedNL>NLmin)",
            "stop_condition_unexp_ft": "(diff_setNL_observedNL > NLmin)",
            "stop_condition_SMV_ft": "(diff_setNL_observedNL > NLmin)",
            "ft": "((LAST V ((! (Fin_<b><i>surgeStallPrevention</i></b> & (! LAST))) | (X (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))) & (<b><i>surgeStallPrevention</i></b> -> (((Lin_<b><i>surgeStallPrevention</i></b> | LAST) V (((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & ((! LAST) & ((X <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) -> ((X ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))))) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> -> ((! (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (! (Lin_<b><i>surgeStallPrevention</i></b> | LAST))) U ((! <b><i>(newMode = nominal)</i></b>) & (! <b><i>(diff_setNL_observedNL > NLmin)</i></b>)))) | (((<b><i>(newMode = nominal)</i></b> & (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) | (Lin_<b><i>surgeStallPrevention</i></b> | LAST)) V <b><i>(newMode = nominal)</i></b>))))))",
            "pt": "((H (Lin_<b><i>surgeStallPrevention</i></b> -> (Y ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))) & (((! Lin_<b><i>surgeStallPrevention</i></b>) S ((! Lin_<b><i>surgeStallPrevention</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) -> ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) S ((((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) S ((! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>) & Fin_<b><i>surgeStallPrevention</i></b>)) | (((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) S ((! <b><i>(diff_setNL_observedNL > NLmin)</i></b>) & (<b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b> & ((Y (! <b><i>((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))</i></b>)) | Fin_<b><i>surgeStallPrevention</i></b>)))) -> <b><i>(newMode = nominal)</i></b>)) & Fin_<b><i>surgeStallPrevention</i></b>))))",
            "ptExpanded": "((H (((! surgeStallPrevention) & (Y surgeStallPrevention)) -> (Y ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))) & (((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) S ((! ((! surgeStallPrevention) & (Y surgeStallPrevention))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) -> ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) S ((((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) S ((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))) | (((! (diff_setNL_observedNL > NLmin)) S ((! (diff_setNL_observedNL > NLmin)) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) & ((Y (! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))))) | (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention)))))))) -> (newMode = nominal))) & (surgeStallPrevention & ((! (Y TRUE)) | (Y (! surgeStallPrevention))))))))",
            "ftExpanded": "((LAST V ((! ((((! surgeStallPrevention) & (! LAST)) & (X surgeStallPrevention)) & (! LAST))) | (X (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))) & (surgeStallPrevention -> (((((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST) V (((! ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & ((! LAST) & ((X ((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) -> ((X ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))))) & (((diff_setNL_observedNL < NLmax) & (pilotInput -> (! surgeStallAvoidance))) -> ((! (((! (diff_setNL_observedNL > NLmin)) & (! (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST))) U ((! (newMode = nominal)) & (! (diff_setNL_observedNL > NLmin))))) | ((((newMode = nominal) & (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) | (((surgeStallPrevention & (! LAST)) & (X (! surgeStallPrevention))) | LAST)) V (newMode = nominal)))))))",
            "CoCoSpecCode": "((H((( not surgeStallPrevention) and (YtoPre(surgeStallPrevention))) => (YtoPre(SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))) and ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not (( not surgeStallPrevention) and (YtoPre(surgeStallPrevention)))) )) => (SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ((SI( (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))), ( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance)))) )) or ((SI( (((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))) and ((YtoPre( not ((diff_setNL_observedNL<NLmax) and (pilotInput => ( not surgeStallAvoidance))))) or (surgeStallPrevention and (FTP or (YtoPre( not surgeStallPrevention)))))), ( not (diff_setNL_observedNL>NLmin)) )) => (newMode=nominal))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b3699700-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_5",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under mechanical fatigue conditions, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nModel parameters would have to change to verify this. Tried to capture this in related testcases.\n\nEngine described by a, b and c matrices. A value in one of the matrices might change by +-% from its nominal value.",
        "fulltext": "if MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS Controller shall satisfy CONTROL_OBJECTIVES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "MECHANICAL_FATIGUE",
                "TRACKING_PILOT_COMMANDS",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "conditionTextRange": [
                0,
                46
            ],
            "component_name": "Controller",
            "componentTextRange": [
                48,
                57
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                65,
                90
            ],
            "diagramVariables": "TC = <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> is true and any point in the interval where <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_unexp_ft": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_pt": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_ft": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_coco": "(MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS)",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>) & ((! LAST) & (X <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> & ((Y (! <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & ((MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS) & ((Y (! (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)) & ((! LAST) & (X (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & ((MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not (MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS))) or ( not (SI( ((MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS) and ((YtoPre( not (MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36a0c30-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_12",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under low probability hazardous events, during regulation of nominal system operation (no change in pilot input), operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed) ",
        "fulltext": "if LOW_PROB_HAZARD & NOMINAL_OPERATION Controller shall satisfy OPERATING_LIMITS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "LOW_PROB_HAZARD",
                "NOMINAL_OPERATION",
                "OPERATING_LIMITS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(LOW_PROB_HAZARD & NOMINAL_OPERATION)",
            "regular_condition": "(LOW_PROB_HAZARD & NOMINAL_OPERATION)",
            "conditionTextRange": [
                0,
                37
            ],
            "component_name": "Controller",
            "componentTextRange": [
                39,
                48
            ],
            "post_condition": "(OPERATING_LIMITS)",
            "responseTextRange": [
                56,
                79
            ],
            "diagramVariables": "TC = <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b>, Response = <b><i>(OPERATING_LIMITS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b> is true and any point in the interval where <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(LOW_PROB_HAZARD & NOMINAL_OPERATION)",
            "regular_condition_unexp_ft": "(LOW_PROB_HAZARD & NOMINAL_OPERATION)",
            "regular_condition_SMV_pt": "(LOW_PROB_HAZARD & NOMINAL_OPERATION)",
            "regular_condition_SMV_ft": "(LOW_PROB_HAZARD & NOMINAL_OPERATION)",
            "regular_condition_coco": "(LOW_PROB_HAZARD and NOMINAL_OPERATION)",
            "post_condition_unexp_pt": "OPERATING_LIMITS",
            "post_condition_unexp_ft": "OPERATING_LIMITS",
            "post_condition_SMV_pt": "OPERATING_LIMITS",
            "post_condition_SMV_ft": "OPERATING_LIMITS",
            "post_condition_coco": "OPERATING_LIMITS",
            "ft": "((LAST V (((! <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b>) & ((! LAST) & (X <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))) & (<b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))",
            "pt": "((H (! <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b>)) | (! ((! <b><i>OPERATING_LIMITS</i></b>) S ((! <b><i>OPERATING_LIMITS</i></b>) & (<b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b> & ((Y (! <b><i>(LOW_PROB_HAZARD & NOMINAL_OPERATION)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (LOW_PROB_HAZARD & NOMINAL_OPERATION))) | (! ((! OPERATING_LIMITS) S ((! OPERATING_LIMITS) & ((LOW_PROB_HAZARD & NOMINAL_OPERATION) & ((Y (! (LOW_PROB_HAZARD & NOMINAL_OPERATION))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (LOW_PROB_HAZARD & NOMINAL_OPERATION)) & ((! LAST) & (X (LOW_PROB_HAZARD & NOMINAL_OPERATION)))) -> (X ((! LAST) U OPERATING_LIMITS)))) & ((LOW_PROB_HAZARD & NOMINAL_OPERATION) -> ((! LAST) U OPERATING_LIMITS)))",
            "CoCoSpecCode": "((H( not (LOW_PROB_HAZARD and NOMINAL_OPERATION))) or ( not (SI( ((LOW_PROB_HAZARD and NOMINAL_OPERATION) and ((YtoPre( not (LOW_PROB_HAZARD and NOMINAL_OPERATION))) or FTP)), ( not OPERATING_LIMITS) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36a5a50-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_14",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "During regulation of nominal system operation (no change in pilot input), controller operating mode shall appropriately switch between nominal and surge / stall prevention operating state ",
        "comments": "",
        "fulltext": " if NOMINAL_OPERATION Controller shall satisfy newMode=nominal | newMode=surgeStallPrevention",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "NOMINAL_OPERATION",
                "newMode",
                "nominal",
                "surgeStallPrevention"
            ],
            "qualifier_word": "if",
            "pre_condition": "(NOMINAL_OPERATION)",
            "regular_condition": "(NOMINAL_OPERATION)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "Controller",
            "componentTextRange": [
                21,
                30
            ],
            "post_condition": "(newMode = nominal | newMode = surgeStallPrevention)",
            "responseTextRange": [
                38,
                91
            ],
            "diagramVariables": "TC = <b><i>(NOMINAL_OPERATION)</i></b>, Response = <b><i>(newMode = nominal | newMode = surgeStallPrevention)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(NOMINAL_OPERATION)</i></b> is true and any point in the interval where <b><i>(NOMINAL_OPERATION)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "NOMINAL_OPERATION",
            "regular_condition_unexp_ft": "NOMINAL_OPERATION",
            "regular_condition_SMV_pt": "NOMINAL_OPERATION",
            "regular_condition_SMV_ft": "NOMINAL_OPERATION",
            "regular_condition_coco": "NOMINAL_OPERATION",
            "post_condition_unexp_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_unexp_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_pt": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_SMV_ft": "((newMode = nominal) | (newMode = surgeStallPrevention))",
            "post_condition_coco": "((newMode=nominal) or (newMode=surgeStallPrevention))",
            "ft": "((LAST V (((! <b><i>NOMINAL_OPERATION</i></b>) & ((! LAST) & (X <b><i>NOMINAL_OPERATION</i></b>))) -> (X ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))) & (<b><i>NOMINAL_OPERATION</i></b> -> ((! LAST) U <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>)))",
            "pt": "((H (! <b><i>NOMINAL_OPERATION</i></b>)) | (! ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) S ((! <b><i>((newMode = nominal) | (newMode = surgeStallPrevention))</i></b>) & (<b><i>NOMINAL_OPERATION</i></b> & ((Y (! <b><i>NOMINAL_OPERATION</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! NOMINAL_OPERATION)) | (! ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) S ((! ((newMode = nominal) | (newMode = surgeStallPrevention))) & (NOMINAL_OPERATION & ((Y (! NOMINAL_OPERATION)) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! NOMINAL_OPERATION) & ((! LAST) & (X NOMINAL_OPERATION))) -> (X ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))) & (NOMINAL_OPERATION -> ((! LAST) U ((newMode = nominal) | (newMode = surgeStallPrevention)))))",
            "CoCoSpecCode": "((H( not NOMINAL_OPERATION)) or ( not (SI( (NOMINAL_OPERATION and ((YtoPre( not NOMINAL_OPERATION)) or FTP)), ( not ((newMode=nominal) or (newMode=surgeStallPrevention))) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36acf80-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_6",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under mechanical fatigue conditions, during regulation of nominal system operation (no change in pilot input), control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)",
        "fulltext": "if MECHANICAL_FATIGUE & NOMINAL_OPERATION Controller shall satisfy CONTROL_OBJECTIVES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "MECHANICAL_FATIGUE",
                "NOMINAL_OPERATION",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "Controller",
            "componentTextRange": [
                42,
                51
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                59,
                84
            ],
            "diagramVariables": "TC = <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> is true and any point in the interval where <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_unexp_ft": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_SMV_pt": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_SMV_ft": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_coco": "(MECHANICAL_FATIGUE and NOMINAL_OPERATION)",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>) & ((! LAST) & (X <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> & ((Y (! <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (MECHANICAL_FATIGUE & NOMINAL_OPERATION))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & ((Y (! (MECHANICAL_FATIGUE & NOMINAL_OPERATION))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (MECHANICAL_FATIGUE & NOMINAL_OPERATION)) & ((! LAST) & (X (MECHANICAL_FATIGUE & NOMINAL_OPERATION)))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not (MECHANICAL_FATIGUE and NOMINAL_OPERATION))) or ( not (SI( ((MECHANICAL_FATIGUE and NOMINAL_OPERATION) and ((YtoPre( not (MECHANICAL_FATIGUE and NOMINAL_OPERATION))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36b44b0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_7",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under mechanical fatigue conditions, while tracking pilot commands, operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed)",
        "fulltext": "if MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS Controller shall satisfy OPERATING_LIMITS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "MECHANICAL_FATIGUE",
                "TRACKING_PILOT_COMMANDS",
                "OPERATING_LIMITS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "conditionTextRange": [
                0,
                46
            ],
            "component_name": "Controller",
            "componentTextRange": [
                48,
                57
            ],
            "post_condition": "(OPERATING_LIMITS)",
            "responseTextRange": [
                65,
                88
            ],
            "diagramVariables": "TC = <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>, Response = <b><i>(OPERATING_LIMITS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> is true and any point in the interval where <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_unexp_ft": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_pt": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_ft": "(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)",
            "regular_condition_coco": "(MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS)",
            "post_condition_unexp_pt": "OPERATING_LIMITS",
            "post_condition_unexp_ft": "OPERATING_LIMITS",
            "post_condition_SMV_pt": "OPERATING_LIMITS",
            "post_condition_SMV_ft": "OPERATING_LIMITS",
            "post_condition_coco": "OPERATING_LIMITS",
            "ft": "((LAST V (((! <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>) & ((! LAST) & (X <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))) & (<b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))",
            "pt": "((H (! <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>)) | (! ((! <b><i>OPERATING_LIMITS</i></b>) S ((! <b><i>OPERATING_LIMITS</i></b>) & (<b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b> & ((Y (! <b><i>(MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS))) | (! ((! OPERATING_LIMITS) S ((! OPERATING_LIMITS) & ((MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS) & ((Y (! (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)) & ((! LAST) & (X (MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS)))) -> (X ((! LAST) U OPERATING_LIMITS)))) & ((MECHANICAL_FATIGUE & TRACKING_PILOT_COMMANDS) -> ((! LAST) U OPERATING_LIMITS)))",
            "CoCoSpecCode": "((H( not (MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS))) or ( not (SI( ((MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS) and ((YtoPre( not (MECHANICAL_FATIGUE and TRACKING_PILOT_COMMANDS))) or FTP)), ( not OPERATING_LIMITS) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36b92d0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_2",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under sensor faults, during regulation of nominal system operation (no change in pilot input), control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits) ",
        "fulltext": "if SENSOR_FAULTS & NOMINAL_OPERATION Controller shall satisfy CONTROL_OBJECTIVES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SENSOR_FAULTS",
                "NOMINAL_OPERATION",
                "CONTROL_OBJECTIVES"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "conditionTextRange": [
                0,
                35
            ],
            "component_name": "Controller",
            "componentTextRange": [
                37,
                46
            ],
            "post_condition": "(CONTROL_OBJECTIVES)",
            "responseTextRange": [
                54,
                79
            ],
            "diagramVariables": "TC = <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> is true and any point in the interval where <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_unexp_ft": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_SMV_pt": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_SMV_ft": "(SENSOR_FAULTS & NOMINAL_OPERATION)",
            "regular_condition_coco": "(SENSOR_FAULTS and NOMINAL_OPERATION)",
            "post_condition_unexp_pt": "CONTROL_OBJECTIVES",
            "post_condition_unexp_ft": "CONTROL_OBJECTIVES",
            "post_condition_SMV_pt": "CONTROL_OBJECTIVES",
            "post_condition_SMV_ft": "CONTROL_OBJECTIVES",
            "post_condition_coco": "CONTROL_OBJECTIVES",
            "ft": "((LAST V (((! <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>) & ((! LAST) & (X <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>))) -> (X ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))) & (<b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> -> ((! LAST) U <b><i>CONTROL_OBJECTIVES</i></b>)))",
            "pt": "((H (! <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>)) | (! ((! <b><i>CONTROL_OBJECTIVES</i></b>) S ((! <b><i>CONTROL_OBJECTIVES</i></b>) & (<b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b> & ((Y (! <b><i>(SENSOR_FAULTS & NOMINAL_OPERATION)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (SENSOR_FAULTS & NOMINAL_OPERATION))) | (! ((! CONTROL_OBJECTIVES) S ((! CONTROL_OBJECTIVES) & ((SENSOR_FAULTS & NOMINAL_OPERATION) & ((Y (! (SENSOR_FAULTS & NOMINAL_OPERATION))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (SENSOR_FAULTS & NOMINAL_OPERATION)) & ((! LAST) & (X (SENSOR_FAULTS & NOMINAL_OPERATION)))) -> (X ((! LAST) U CONTROL_OBJECTIVES)))) & ((SENSOR_FAULTS & NOMINAL_OPERATION) -> ((! LAST) U CONTROL_OBJECTIVES)))",
            "CoCoSpecCode": "((H( not (SENSOR_FAULTS and NOMINAL_OPERATION))) or ( not (SI( ((SENSOR_FAULTS and NOMINAL_OPERATION) and ((YtoPre( not (SENSOR_FAULTS and NOMINAL_OPERATION))) or FTP)), ( not CONTROL_OBJECTIVES) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36be0f0-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_8",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under mechanical fatigue conditions, during regulation of nominal system operation (no change in pilot input), operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed) ",
        "fulltext": "if MECHANICAL_FATIGUE & NOMINAL_OPERATION Controller shall satisfy OPERATING_LIMITS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "MECHANICAL_FATIGUE",
                "NOMINAL_OPERATION",
                "OPERATING_LIMITS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "Controller",
            "componentTextRange": [
                42,
                51
            ],
            "post_condition": "(OPERATING_LIMITS)",
            "responseTextRange": [
                59,
                82
            ],
            "diagramVariables": "TC = <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>, Response = <b><i>(OPERATING_LIMITS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> is true and any point in the interval where <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_unexp_ft": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_SMV_pt": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_SMV_ft": "(MECHANICAL_FATIGUE & NOMINAL_OPERATION)",
            "regular_condition_coco": "(MECHANICAL_FATIGUE and NOMINAL_OPERATION)",
            "post_condition_unexp_pt": "OPERATING_LIMITS",
            "post_condition_unexp_ft": "OPERATING_LIMITS",
            "post_condition_SMV_pt": "OPERATING_LIMITS",
            "post_condition_SMV_ft": "OPERATING_LIMITS",
            "post_condition_coco": "OPERATING_LIMITS",
            "ft": "((LAST V (((! <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>) & ((! LAST) & (X <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))) & (<b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITS</i></b>)))",
            "pt": "((H (! <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>)) | (! ((! <b><i>OPERATING_LIMITS</i></b>) S ((! <b><i>OPERATING_LIMITS</i></b>) & (<b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b> & ((Y (! <b><i>(MECHANICAL_FATIGUE & NOMINAL_OPERATION)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (MECHANICAL_FATIGUE & NOMINAL_OPERATION))) | (! ((! OPERATING_LIMITS) S ((! OPERATING_LIMITS) & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) & ((Y (! (MECHANICAL_FATIGUE & NOMINAL_OPERATION))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (MECHANICAL_FATIGUE & NOMINAL_OPERATION)) & ((! LAST) & (X (MECHANICAL_FATIGUE & NOMINAL_OPERATION)))) -> (X ((! LAST) U OPERATING_LIMITS)))) & ((MECHANICAL_FATIGUE & NOMINAL_OPERATION) -> ((! LAST) U OPERATING_LIMITS)))",
            "CoCoSpecCode": "((H( not (MECHANICAL_FATIGUE and NOMINAL_OPERATION))) or ( not (SI( ((MECHANICAL_FATIGUE and NOMINAL_OPERATION) and ((YtoPre( not (MECHANICAL_FATIGUE and NOMINAL_OPERATION))) or FTP)), ( not OPERATING_LIMITS) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36c2f10-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_3",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "Under sensor faults, while tracking pilot commands, operating limit objectives shall be satisfied (inactiveThreshold.g. respecting upper limit in shaft speed). Could add other child requirements -> there is more than one shaft. Also temperature limits but not sure yet - not currently in the model.",
        "fulltext": "if SENSOR_FAULTS & TRACKING_PILOT_COMMANDS Controller shall satisfy OPERATING_LIMITSs",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SENSOR_FAULTS",
                "TRACKING_PILOT_COMMANDS",
                "OPERATING_LIMITSs"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "conditionTextRange": [
                0,
                41
            ],
            "component_name": "Controller",
            "componentTextRange": [
                43,
                52
            ],
            "post_condition": "(OPERATING_LIMITSs)",
            "responseTextRange": [
                60,
                84
            ],
            "diagramVariables": "TC = <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>, Response = <b><i>(OPERATING_LIMITSs)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> is true and any point in the interval where <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_unexp_ft": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_pt": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_SMV_ft": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)",
            "regular_condition_coco": "(SENSOR_FAULTS and TRACKING_PILOT_COMMANDS)",
            "post_condition_unexp_pt": "OPERATING_LIMITSs",
            "post_condition_unexp_ft": "OPERATING_LIMITSs",
            "post_condition_SMV_pt": "OPERATING_LIMITSs",
            "post_condition_SMV_ft": "OPERATING_LIMITSs",
            "post_condition_coco": "OPERATING_LIMITSs",
            "ft": "((LAST V (((! <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>) & ((! LAST) & (X <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>))) -> (X ((! LAST) U <b><i>OPERATING_LIMITSs</i></b>)))) & (<b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> -> ((! LAST) U <b><i>OPERATING_LIMITSs</i></b>)))",
            "pt": "((H (! <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>)) | (! ((! <b><i>OPERATING_LIMITSs</i></b>) S ((! <b><i>OPERATING_LIMITSs</i></b>) & (<b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b> & ((Y (! <b><i>(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS))) | (! ((! OPERATING_LIMITSs) S ((! OPERATING_LIMITSs) & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & ((Y (! (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)) & ((! LAST) & (X (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS)))) -> (X ((! LAST) U OPERATING_LIMITSs)))) & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) -> ((! LAST) U OPERATING_LIMITSs)))",
            "CoCoSpecCode": "((H( not (SENSOR_FAULTS and TRACKING_PILOT_COMMANDS))) or ( not (SI( ((SENSOR_FAULTS and TRACKING_PILOT_COMMANDS) and ((YtoPre( not (SENSOR_FAULTS and TRACKING_PILOT_COMMANDS))) or FTP)), ( not OPERATING_LIMITSs) ))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36ca440-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "UC5_R_1_1",
        "parent_reqid": "UC5_R_1",
        "project": "EngineController2.2",
        "rationale": "Under sensor faults, while tracking pilot commands, control objectives shall be satisfied (inactiveThreshold.g. settling time, overshoot, and steady state error will be within predefined, acceptable limits)\n\nFrom Test Cases UC5_TC_1 and UC5_TC_2:\n sensor S value deviates at most +/- R % from nominal value \n sensor S value is not available\n\nR1: when (diff > activeThreshold) if ((sensorfaults) & (trackingPilotCommands)) Controller shall until (diff < inactiveThreshold) satisfy (controlObjectives)\n\nMinimum settlingTime is 0.\n\nNo fixed value for R but 10% is a safe estimate.\n\nThere are 4 sensors\n\nthe '0' in r0 is the time stamp -> changed to r(i) and y(i) to apply to all i",
        "comments": "settling time",
        "fulltext": "when ACTIVE if SENSOR_FAULTS & TRACKING_PILOT_COMMANDS  & (observedThrust = V1)  Controller shall until NOT_ACTIVE satisfy CONTROL_OBJECTIVES & (observedThrust = V2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ACTIVE",
                "SENSOR_FAULTS",
                "TRACKING_PILOT_COMMANDS",
                "observedThrust",
                "V1",
                "NOT_ACTIVE",
                "CONTROL_OBJECTIVES",
                "V2"
            ],
            "qualifier_word": "if",
            "pre_condition": "(SENSOR_FAULTS & TRACKING_PILOT_COMMANDS & ( observedThrust = V1 ))",
            "regular_condition": "((ACTIVE) & (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS & ( observedThrust = V1 )))",
            "conditionTextRange": [
                0,
                78
            ],
            "component_name": "Controller",
            "componentTextRange": [
                81,
                90
            ],
            "stop_condition": "(NOT_ACTIVE)",
            "timingTextRange": [
                98,
                113
            ],
            "post_condition": "(CONTROL_OBJECTIVES & ( observedThrust = V2 ))",
            "responseTextRange": [
                115,
                164
            ],
            "diagramVariables": "TC = <b><i>((ACTIVE) & (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS & ( observedThrust = V1 )))</i></b>, SC = <b><i>(NOT_ACTIVE)</i></b>, Response = <b><i>(CONTROL_OBJECTIVES & ( observedThrust = V2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((ACTIVE) & (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS & ( observedThrust = V1 )))</i></b> is true and any point in the interval where <b><i>((ACTIVE) & (SENSOR_FAULTS & TRACKING_PILOT_COMMANDS & ( observedThrust = V1 )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "regular_condition_unexp_pt": "(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))",
            "regular_condition_unexp_ft": "(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))",
            "regular_condition_SMV_pt": "(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))",
            "regular_condition_SMV_ft": "(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))",
            "regular_condition_coco": "(ACTIVE and ((SENSOR_FAULTS and TRACKING_PILOT_COMMANDS) and (observedThrust=V1)))",
            "post_condition_unexp_pt": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_unexp_ft": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_SMV_pt": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_SMV_ft": "(CONTROL_OBJECTIVES & (observedThrust = V2))",
            "post_condition_coco": "(CONTROL_OBJECTIVES and (observedThrust=V2))",
            "stop_condition_unexp_pt": "NOT_ACTIVE",
            "stop_condition_SMV_pt": "NOT_ACTIVE",
            "stop_condition_coco": "NOT_ACTIVE",
            "stop_condition_unexp_ft": "NOT_ACTIVE",
            "stop_condition_SMV_ft": "NOT_ACTIVE",
            "ft": "((LAST V (((! <b><i>(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))</i></b>) & ((! LAST) & (X <b><i>(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))</i></b>))) -> (X ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>))))) & (<b><i>(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))</i></b> -> ((<b><i>NOT_ACTIVE</i></b> V (<b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b> | <b><i>NOT_ACTIVE</i></b>)) | (LAST V <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>))))",
            "pt": "(H ((H (! <b><i>(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))</i></b>)) | (((! <b><i>NOT_ACTIVE</i></b>) S ((! <b><i>NOT_ACTIVE</i></b>) & (<b><i>(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))</i></b> & ((Y (! <b><i>(ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))</i></b>)) | FTP)))) -> <b><i>(CONTROL_OBJECTIVES & (observedThrust = V2))</i></b>)))",
            "ptExpanded": "(H ((H (! (ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1))))) | (((! NOT_ACTIVE) S ((! NOT_ACTIVE) & ((ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1))) & ((Y (! (ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1))))) | (! (Y TRUE)))))) -> (CONTROL_OBJECTIVES & (observedThrust = V2)))))",
            "ftExpanded": "((LAST V (((! (ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))) & ((! LAST) & (X (ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1)))))) -> (X ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V2))))))) & ((ACTIVE & ((SENSOR_FAULTS & TRACKING_PILOT_COMMANDS) & (observedThrust = V1))) -> ((NOT_ACTIVE V ((CONTROL_OBJECTIVES & (observedThrust = V2)) | NOT_ACTIVE)) | (LAST V (CONTROL_OBJECTIVES & (observedThrust = V2))))))",
            "CoCoSpecCode": "(H((H( not (ACTIVE and ((SENSOR_FAULTS and TRACKING_PILOT_COMMANDS) and (observedThrust=V1))))) or ((SI( ((ACTIVE and ((SENSOR_FAULTS and TRACKING_PILOT_COMMANDS) and (observedThrust=V1))) and ((YtoPre( not (ACTIVE and ((SENSOR_FAULTS and TRACKING_PILOT_COMMANDS) and (observedThrust=V1))))) or FTP)), ( not NOT_ACTIVE) )) => (CONTROL_OBJECTIVES and (observedThrust=V2)))))",
            "component": "<b><i>Controller</i></b>"
        },
        "_id": "b36d1970-ccb2-11ed-a7d8-fbf99e06bd65"
    },
    {
        "reqid": "SENSOR_FAULTS",
        "parent_reqid": "",
        "project": "EngineController2.2",
        "rationale": "EXTRACT REQUIREMENT: extracted (sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) from UC5_R_1_1",
        "fulltext": "if (sensorValue_S > nominalValue + R) | (sensorValue_S < nominalValue - R) | (sensorValue_S = null) Engine shall satisfy SENSOR_FAULTS",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "sensorValue_S",
                "nominalValue",
                "R",
                "null",
                "SENSOR_FAULTS"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ))",
            "regular_condition": "(( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ))",
            "conditionTextRange": [
                0,
                98
            ],
            "component_name": "Engine",
            "componentTextRange": [
                100,
                105
            ],
            "post_condition": "(SENSOR_FAULTS)",
            "responseTextRange": [
                113,
                133
            ],
            "diagramVariables": "TC = <b><i>(( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ))</i></b>, Response = <b><i>(SENSOR_FAULTS)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ))</i></b> is true and any point in the interval where <b><i>(( sensorValue_S > nominalValue + R ) | ( sensorValue_S < nominalValue - R ) | ( sensorValue_S = null ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "regular_condition_unexp_pt": "(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))",
            "regular_condition_unexp_ft": "(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))",
            "regular_condition_SMV_pt": "(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))",
            "regular_condition_SMV_ft": "(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))",
            "regular_condition_coco": "(((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (sensorValue_S=null))",
            "post_condition_unexp_pt": "SENSOR_FAULTS",
            "post_condition_unexp_ft": "SENSOR_FAULTS",
            "post_condition_SMV_pt": "SENSOR_FAULTS",
            "post_condition_SMV_ft": "SENSOR_FAULTS",
            "post_condition_coco": "SENSOR_FAULTS",
            "ft": "((LAST V (((! <b><i>(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))</i></b>) & ((! LAST) & (X <b><i>(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))</i></b>))) -> (X ((! LAST) U <b><i>SENSOR_FAULTS</i></b>)))) & (<b><i>(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))</i></b> -> ((! LAST) U <b><i>SENSOR_FAULTS</i></b>)))",
            "pt": "((H (! <b><i>(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))</i></b>)) | (! ((! <b><i>SENSOR_FAULTS</i></b>) S ((! <b><i>SENSOR_FAULTS</i></b>) & (<b><i>(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))</i></b> & ((Y (! <b><i>(((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))</i></b>)) | FTP))))))",
            "ptExpanded": "((H (! (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null)))) | (! ((! SENSOR_FAULTS) S ((! SENSOR_FAULTS) & ((((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null)) & ((Y (! (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null)))) | (! (Y TRUE))))))))",
            "ftExpanded": "((LAST V (((! (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))) & ((! LAST) & (X (((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null))))) -> (X ((! LAST) U SENSOR_FAULTS)))) & ((((sensorValue_S > (nominalValue + R)) | (sensorValue_S < (nominalValue - R))) | (sensorValue_S = null)) -> ((! LAST) U SENSOR_FAULTS)))",
            "CoCoSpecCode": "((H( not (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (sensorValue_S=null)))) or ( not (SI( ((((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (sensorValue_S=null)) and ((YtoPre( not (((sensorValue_S>( nominalValue + R )) or (sensorValue_S<( nominalValue - R ))) or (sensorValue_S=null)))) or FTP)), ( not SENSOR_FAULTS) ))))",
            "component": "<b><i>Engine</i></b>"
        },
        "_id": "b36d6790-ccb2-11ed-a7d8-fbf99e06bd65"
    }
]
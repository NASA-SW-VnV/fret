[
  {
    "_id": "template-change-state",
    "title": "Change State",
    "description": "This template describes how the state of a finite-state-machine component changes. It describes the input state and some conditions based on which the change must occur. The corresponding output state must reflect the required change. The input and output states have a pre - post- relationship",
    "structure": [
      {
        "field": "component"
      },
      {
        "text": " shall always satisfy if ("
      },
      {
        "field": "input_state"
      },
      {
        "text": " & "
      },
      {
        "field": "condition"
      },
      {
        "text": ") then "
      },
      {
        "field": "output_state"
      }
    ],
    "fields": {
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "input_state": {
        "options": [
          {
            "suggestion": "state = value",
            "description": "The input state value is determined",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the value of the input state that may need to change."
      },
      "condition": {
        "options": [
          {
            "suggestion": "predicate",
            "description": "Predicate is described by name",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "! predicate",
            "description": "Predicate should not hold",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "predicate1 & predicate2",
            "description": "Conjunction",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "The condition under which the change is triggered. Usually expressed in terms of a predicate, the negation of a predicate, or a conjunction. "
      },
      "output_state": {
        "options": [
          {
            "suggestion": "STATE = value",
            "description": "The output state value is determined",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the value of the output state, reflecting the new value of the input state ."
      }
    },
    "examples": [
      {
        "component": "FSM_Autopilot",
        "input_state": "state = ap_standby_state",
        "condition": "! standby & ! apfail",
        "output_state": "STATE = ap_transition_state"
      }
    ]
  },
  {
    "_id": "template-process-command",
    "title": "Process Command",
    "description": "This pattern describes how a command should be processed. The command may be identified by name or through an operation code. The response may have to be immediate, or eventual, or within some timeframe, as specified by the timing.",
    "structure": [
      {
        "text": "Upon "
      },
      {
        "field": "command"
      },
      {
        "text": " the "
      },
      {
        "field": "component"
      },
      {
        "text": " shall "
      },
      {
        "field": "timing"
      },
      {
        "text": " satisfy "
      },
      {
        "field": "response"
      }
    ],
    "fields": {
      "command": {
        "options": [
          {
            "suggestion": "command_opcode = X",
            "description": "The response must be triggered when a command with the code given identifier is received",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "receipt_of_X_command",
            "description": "The response must be triggered when the specified command is received",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "receipt_of_X_command & something_done",
            "description": "The response must be triggered when the specified command is received and some action is completed",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "The command that triggers the desired reaction. The command may be identified by comparison to a command code or through a boolean variable."
      },
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "timing": {
        "options": [
          {
            "suggestion": "always",
            "description": "The response must always hold after reception of the command",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "immediately",
            "description": "The response must occur immediately after reception of the command",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "within T seconds",
            "description": "The reponse must occur within the specified time window after reception of the command",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the time points or intervals where the response has to occur after reception of the command."
      },
      "response": {
        "options": [
          {
            "suggestion": "action",
            "description": "After reception of the command, the specified action must be triggered",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "signal = value",
            "description": "After reception of the command, the specified signal must be set to a given value",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "response_1 & response_2",
            "description": "After reception of the command, the specified responses must be triggered",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the response to the command that the component must provide to fulfill the requirement. The response is specified as a boolean expression."
      }
    },
    "examples": [
      {
        "command": "command_opcode = 42 & landing_gear_down",
        "component": "software",
        "timing": "immediately",
        "response": "retract_landing_gear_command_received"
      },
      {
        "command": "receipt_of_retract_command",
        "component": "controller",
        "timing": "within 2 minutes",
        "response": "landing_gear_state = retracted & door_closed"
      }
    ]
  },
  {
    "_id": "template-check-bounds",
    "title": "Check Bounds",
    "description": "This pattern describes a signal that is constrained by bounds. The signal must always stay within or outside the specified bounds or be greater than or lower than a bound.",
    "structure": [
      {
        "text": "The "
      },
      {
        "field": "component"
      },
      {
        "text": " shall always satisfy "
      },
      {
        "field": "bounds"
      }
    ],
    "fields": {
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "bounds": {
        "options": [
          {
            "suggestion": "signal < bound",
            "description": "The signal must always stay below the bound",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "signal > bound",
            "description": "The signal must always stay inside the bounds",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "signal > lower & signal < upper",
            "description": "The signal must always stay below the bound",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "signal < lower | signal > upper",
            "description": "The signal must always stay outside the bounds",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the signal that must be bounded and the type of bounds. The bounds are specified as a single or a combination of relational expressions of the form signal RELOP bound, where RELOP is a relational operator (<, <=, >, >=)."
      }
    },
    "examples": [
      {
        "component": "autopilot",
        "bounds": "roll_angle < 60 & roll_angle > -60"
      },
      {
        "component": "angle_of_attack_protection",
        "bounds": "angle_of_attack <= 15"
      }
    ]
  },
  {
    "_id": "template-set-diagnostic-flag",
    "title": "Set Diagnostic Flag",
    "description": "This template relates to requirements that must set a diagnostic flag whenever some unexpected or unwanted conditions occur. Conditions are expressions involving system variables and relational or boolean operators. The response consists of setting some system flag. The response is typically expected to be immediate, but other timing operators may also be used.",
    "structure": [
      {
        "field": "condition"
      },
      {
        "text": " the "
      },
      {
        "field": "component"
      },
      {
        "text": " shall "
      },
      {
        "field": "timing"
      },
      {
        "text": " satisfy "
      },
      {
        "field": "response"
      }
    ],
    "fields": {
      "condition": {
        "options": [
          {
            "suggestion": "Upon anomalous_condition",
            "description": "Anomalous condition is described by name",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "If variable_RELOP_bound",
            "description": "Anomalous condition is described by a variable being outside some bounds. The bounds are specified as a single or a combination of relational expressions of the form variable RELOP bound, where RELOP is a relational operator (<, <=, >, >=)",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "The condition that expresses the anomaly and which must set the diagnostic flag. The anomaly can be expressed by name, or The bounds are specified as a single or a combination of relational expressions of the form signal RELOP bound, where RELOP is a relational operator (<, <=, >, >=)"
      },
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "timing": {
        "options": [
          {
            "suggestion": "immediately",
            "description": "The response must occur immediately after anomalous condition is detected",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "within T seconds",
            "description": "The reponse must occur within the specified time window after after anomalous condition is detected",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the time points or intervals where the response has to occur after anomalous condition is detected. In most cases this is expected to happen immediately."
      },
      "response": {
        "options": [
          {
            "suggestion": "set_flagname_flag",
            "description": "Select the name of the flag to be set",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "flag = value",
            "description": "The specified flag must be set to a given value",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Describes the diagnostic flag that must be set."
      }
    },
    "examples": [
      {
        "condition": "Upon invalid_checksum",
        "component": "communications_software",
        "timing": "immediately",
        "response": "checksum_error_flag"
      },
      {
        "condition": "If pressure < min_tank_pressure",
        "component": "control_software",
        "timing": "within 10 milliseconds",
        "response": "error_flag = low_pressure"
      }
    ]
  },
  {
    "_id": "template-prescribe-format",
    "title": "Prescribe Format",
    "description": "This template defines the expected format of commands or messages, often referring to telemetry. The format typically refers to some standard or document, identified by name or abbreviation.",
    "structure": [
      {
        "field": "component"
      },
      {
        "text": " shall always satisfy "
      },
      {
        "field": "response"
      }
    ],
    "fields": {
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "response": {
        "options": [
          {
            "suggestion": "document_format_name",
            "description": "Format of a message type specified by a document",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "message_field = value",
            "description": "Specifies value of field within a command or message",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the format that must be conformed to."
      }
    },
    "examples": [
      {
        "component": "The communications_software",
        "response": "telemetry_format = xml"
      },
      {
        "component": "The communications_software",
        "response": "CCSDS_format"
      }
    ]
  },
  {
    "_id": "template-state-transition",
    "title": "State Transition",
    "description": "This template describes a transition of a state-machine. It describes the input state and the guard condition upon which the transition occurs.",
    "structure": [
      {
        "text": "Upon ("
      },
      {
        "field": "input_state"
      },
      {
        "text": " & "
      },
      {
        "field": "condition"
      },
      {
        "text": ") "
      },
      {
        "field": "component"
      },
      {
        "text": " shall at the next timepoint satisfy "
      },
      {
        "field": "output_state"
      }
    ],
    "fields": {
      "input_state": {
        "options": [
          {
            "suggestion": "state = origin",
            "description": "The origin state number",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "state_proposition",
            "description": "The origin proposition",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the value of the input state that may need to change."
      },
      "condition": {
        "options": [
          {
            "suggestion": "boolexpr",
            "description": "A Boolean expression",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "The guard condition upon which the transition is triggered."
      },
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "output_state": {
        "options": [
          {
            "suggestion": "state = destination",
            "description": "The destination state number",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "! state_proposition",
            "description": "The negation of the origin proposition",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the value of the output state, reflecting the new value of the input state ."
      }
    },
    "examples": [
      {
        "input_state": "state = cruise_control_engaged",
        "condition": "brake_applied",
        "component": "cruise_control",
        "output_state": "state = cruise_control_paused"
      },
      {
        "input_state": "defrost",
        "condition": "toggle_defrost",
        "component": "vehicle",
        "output_state": "! defrost"
      }
    ]
  },
  {
    "_id": "template-state-transition-stay-pre",
    "title": "State Transition Stay Pre",
    "description": "This template describes for a state machine a transition of a state to itself. It describes the input state and the negation of the disjunction of outgoing guard conditions.",
    "structure": [
      {
        "field": "component"
      },
      {
        "text": " shall always satisfy if preBool(false, "
      },
      {
        "field": "state"
      },
      {
        "text": " & !("
      },
      {
        "field": "outgoing_guard_disjunction"
      },
      {
        "text": ")) then "
      },
      {
        "field": "same_state"
      }
    ],
    "fields": {
      "component": {
        "options": [
          {
            "suggestion": "component",
            "description": "Replace the text by the name of the target component",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the component of the system that the requirement applies to."
      },
      "state": {
        "options": [
          {
            "suggestion": "state = origin",
            "description": "The origin state number",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "state_proposition",
            "description": "The origin state proposition",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the value of the state that it stays at."
      },
      "outgoing_guard_disjunction": {
        "options": [
          {
            "suggestion": "(gc1 | gc2)",
            "description": "The disjunction of the outgoing guard conditions",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "gc",
            "description": "The guard condition of the outgoing transition if there is only one outgoing transition.",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "The disjunction of the outgoing guard conditions from the state."
      },
      "same_state": {
        "options": [
          {
            "suggestion": "state = origin",
            "description": "The origin state number",
            "selection": [
              0,
              0
            ]
          },
          {
            "suggestion": "state_proposition",
            "description": "The origin state proposition",
            "selection": [
              0,
              0
            ]
          }
        ],
        "description": "Specifies the same state."
      }
    },
    "examples": [
      {
        "component": "cruise_control",
        "state": "state = cruise_control_engaged",
        "outgoing_guard_disjunction": "(brake_applied | turn_off)",
        "same_state": "state = cruise_control_engaged"
      },
      {
        "component": "vehicle",
        "state": "defrost",
        "outgoing_guard_disjunction": "toggle_defrost",
        "same_state": "defrost"
      }
    ]
  }
]
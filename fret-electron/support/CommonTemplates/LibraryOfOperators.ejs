--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since Inclusive: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel

-- Pre for integers, with an initial value at FTP
node preInt(InitialValue, X: int) returns (Y:int);
let
  Y = InitialValue -> pre X;
tel

-- Pre for reals, with an initial value at FTP
node preReal(InitialValue, X: real) returns (Y:real);
let
  Y = InitialValue -> pre X;
tel

-- Pre for booleans, with an initial value at FTP
node preBool(InitialValue, X: bool) returns (Y:bool);
let
  Y = InitialValue -> pre X;
tel

-- The equivalent of LTL's Y in Lustre.
node YtoPre(X: bool) returns (Y:bool);
let
  Y = false -> pre X;
tel

-- The equivalent of LTL's Z in Lustre.
node ZtoPre(X: bool) returns (Y:bool);
let
  Y = true -> pre X;
tel

-- Absolute value for reals
node absReal(x:real) returns(y: real);
let
  y = if (x >= 0.0) then x else -x;
tel

-- Absolute value for integers
node absInt(x:int) returns(y: int);
let
  y = if (x >= 0) then x else -x;
tel

-- Maximum value between two reals
node maxReal (a : real; b : real)
returns (z : real);
let
  z = (if (((a) >= (b))) then (a) else (b));
tel

-- Maximum value between two integers
node maxInt (a : int; b : int)
returns (z : int);
let
  z = (if (((a) >= (b))) then (a) else (b));
tel

-- Minimum value between two integers
node minInt (a : int; b : int)
returns (z : int);
let
  z = (if (((a) <= (b))) then (a) else (b));
tel

-- Minimum value between two reals
node minReal (a : real; b : real)
returns (z : real);
let
  z = (if (((a) <= (b))) then (a) else (b));
tel

{
  "after,holding,bound,after,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,always,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(G $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(G $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,before,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(G (LAST => $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(G (LAST => $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,for,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[$post_condition$])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[$post_condition$])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,never,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(G (! $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(G (! $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,next,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(LAST | (X $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(LAST | (X $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,null,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,until,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,bound,within,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,after,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,always,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(G $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(G $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,before,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,finally,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(G (LAST => $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(G (LAST => $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,for,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[$post_condition$])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[$post_condition$])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,never,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(G (! $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(G (! $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,next,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(LAST | (X $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(LAST | (X $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,null,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,until,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,holding,null,within,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (G ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,after,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,always,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(G $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(G $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,before,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(F $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(F $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,finally,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(G (LAST => $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(G (LAST => $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,for,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(G[<=$duration$] $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(G[<=$duration$] $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[$post_condition$])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[$post_condition$])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,never,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(G (! $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(G (! $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,next,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(LAST | (X $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(LAST | (X $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,null,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(F $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(F $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,until,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,bound,within,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P$bound$[(F[<=$duration$] $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P$bound$[(F[<=$duration$] $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,after,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,always,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(G $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(G $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,before,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,eventually,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(F $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(F $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,finally,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(G (LAST => $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(G (LAST => $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,for,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(G[<=$duration$] $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(G[<=$duration$] $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,immediately,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[$post_condition$])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[$post_condition$])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,never,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(G (! $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(G (! $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,next,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(LAST | (X $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(LAST | (X $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,null,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(F $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(F $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,until,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,null,null,within,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X (P>=1[(F[<=$duration$] $post_condition$)])))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X (P>=1[(F[<=$duration$] $post_condition$)])))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,after,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,always,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,before,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ -> (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ => (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ => (P$bound$[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G (LAST => $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(G (LAST => $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G (LAST => $post_condition$))])))) & ($regular_condition$ => (P$bound$[(G (LAST => $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,for,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[$post_condition$])))) & ($regular_condition$ -> (P$bound$[$post_condition$])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[$post_condition$])))) & ($regular_condition$ => (P$bound$[$post_condition$])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,never,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G (! $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(G (! $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G (! $post_condition$))])))) & ($regular_condition$ => (P$bound$[(G (! $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,next,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(LAST | (X $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(LAST | (X $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(LAST | (X $post_condition$))])))) & ($regular_condition$ => (P$bound$[(LAST | (X $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,null,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ => (P$bound$[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,until,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ => (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,bound,within,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,after,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,always,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ => (P>=1[(G $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,before,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ -> (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ => (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ -> (P>=1[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ => (P>=1[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,finally,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G (LAST => $post_condition$))])))) & ($regular_condition$ -> (P>=1[(G (LAST => $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G (LAST => $post_condition$))])))) & ($regular_condition$ => (P>=1[(G (LAST => $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,for,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[$post_condition$])))) & ($regular_condition$ -> (P>=1[$post_condition$])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[$post_condition$])))) & ($regular_condition$ => (P>=1[$post_condition$])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,never,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G (! $post_condition$))])))) & ($regular_condition$ -> (P>=1[(G (! $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G (! $post_condition$))])))) & ($regular_condition$ => (P>=1[(G (! $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,next,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(LAST | (X $post_condition$))])))) & ($regular_condition$ -> (P>=1[(LAST | (X $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(LAST | (X $post_condition$))])))) & ($regular_condition$ => (P>=1[(LAST | (X $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,null,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ -> (P>=1[(F $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ => (P>=1[(F $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,until,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ -> (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ => (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "after,regular,null,within,satisfaction": {
    "pctl": "P>=1[(((! FLin_$scope_mode$) U (FLin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))))) | (G (! FLin_$scope_mode$)))]",
    "pctlExpanded": "P>=1[(((! ($scope_mode$ & (X (! $scope_mode$)))) U (($scope_mode$ & (X (! $scope_mode$))) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))))) | (G (! ($scope_mode$ & (X (! $scope_mode$))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FLin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "before,holding,bound,after,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,always,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,before,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,for,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,never,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,next,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,null,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,until,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,bound,within,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,after,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,always,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,before,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,finally,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,for,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,never,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,next,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,null,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,until,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,holding,null,within,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (FFin_$scope_mode$ V ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,after,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,always,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(FFin_$scope_mode$ R $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,before,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[((! FFin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,finally,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,for,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(G[<=$duration$] $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(G[<=$duration$] $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[$post_condition$]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[$post_condition$]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,never,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(FFin_$scope_mode$ R (! $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,next,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,null,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[((! FFin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,until,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,bound,within,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P$bound$[(F[<=$duration$] $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(F[<=$duration$] $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,after,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,always,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(FFin_$scope_mode$ R $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,before,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,eventually,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[((! FFin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,finally,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,for,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(G[<=$duration$] $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(G[<=$duration$] $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,immediately,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[$post_condition$]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[$post_condition$]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,never,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(FFin_$scope_mode$ R (! $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,next,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,null,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[((! FFin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,until,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,null,null,within,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | (P>=1[(F[<=$duration$] $post_condition$)]))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(F[<=$duration$] $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,after,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,always,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(FFin_$scope_mode$ R $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,before,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[((! FFin_$scope_mode$) U $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,for,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,never,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(FFin_$scope_mode$ R (! $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,next,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,null,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[((! FFin_$scope_mode$) U $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,until,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,bound,within,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,after,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,always,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(FFin_$scope_mode$ R $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,before,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | FFin_$scope_mode$))) & (! FFin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[((! FFin_$scope_mode$) U $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,finally,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ R (FFin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,for,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,never,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(FFin_$scope_mode$ R (! $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,next,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(FFin_$scope_mode$ | ((X $post_condition$) & (! FFin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,null,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[((! FFin_$scope_mode$) U $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! FFin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,until,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! FFin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & FFin_$scope_mode$) | FFin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "before,regular,null,within,satisfaction": {
    "pctl": "P>=1[(FFin_$scope_mode$ | ((FFin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FFin_$scope_mode$))) -> ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! FFin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FFin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "in,holding,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[$post_condition$])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[$post_condition$])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (! $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,holding,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | (Lin_$scope_mode$ V ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(Lin_$scope_mode$ R $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(Lin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[((! Lin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[$post_condition$])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[$post_condition$])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[((! Lin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(Lin_$scope_mode$ R $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(Lin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[((! Lin_$scope_mode$) U $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[((! Lin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[$post_condition$])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[$post_condition$])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(Lin_$scope_mode$ R (! $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(Lin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[((! Lin_$scope_mode$) U $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[((! Lin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,null,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ($scope_mode$ -> (Lin_$scope_mode$ | (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ R $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ R $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[$post_condition$])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[$post_condition$])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[$post_condition$])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ R $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ R $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | Lin_$scope_mode$))) & (! Lin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (Lin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (($scope_mode$ & (X (! $scope_mode$))) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[$post_condition$])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[$post_condition$])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[$post_condition$])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ R (! $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (! $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ R (! $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(Lin_$scope_mode$ | ((X $post_condition$) & (! Lin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((X $post_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((! Lin_$scope_mode$) U $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! Lin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! Lin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & Lin_$scope_mode$) | Lin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ($scope_mode$ & (X (! $scope_mode$)))) | ($scope_mode$ & (X (! $scope_mode$)))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "in,regular,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (Fin_$scope_mode$ & (! LAST))) | (X ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ -> (Lin_$scope_mode$ | ((Lin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! Lin_$scope_mode$))) -> ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! Lin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (((! $scope_mode$) & (X $scope_mode$)) & (! LAST))) | (X ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))))) & ($scope_mode$ => (($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "Fin_$scope_mode$",
      "right": "Lin_$scope_mode$",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "notin,holding,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,holding,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(LNin_$scope_mode$ R $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(LNin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[$post_condition$])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[$post_condition$])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(LNin_$scope_mode$ R $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(LNin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[$post_condition$])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[$post_condition$])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(LNin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,null,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(F[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(F[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | LNin_$scope_mode$))) & (! LNin_$scope_mode$)) U $stop_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (((! ((! $stop_condition$) & ($post_condition$ | ((! $scope_mode$) & (X $scope_mode$))))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $stop_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (LNin_$scope_mode$ => $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (((! $scope_mode$) & (X $scope_mode$)) => $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ | ((X $post_condition$) & (! LNin_$scope_mode$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) | ((X $post_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & LNin_$scope_mode$) | LNin_$scope_mode$) R $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ((! $post_condition$) & (! $stop_condition$)))) | ((($post_condition$ & ((! $scope_mode$) & (X $scope_mode$))) | ((! $scope_mode$) & (X $scope_mode$))) R $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "notin,regular,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(F[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "null,holding,bound,after,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,always,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(G $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(G $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,before,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(G (LAST => $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(G (LAST => $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,for,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[$post_condition$])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[$post_condition$])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,never,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(G (! $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(G (! $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,next,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(LAST | (X $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(LAST | (X $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,null,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,until,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,bound,within,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,after,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,always,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(G $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(G $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,before,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,finally,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(G (LAST => $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(G (LAST => $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,for,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[$post_condition$])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[$post_condition$])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,never,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(G (! $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(G (! $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,next,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(LAST | (X $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(LAST | (X $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,null,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,until,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,holding,null,within,satisfaction": {
    "pctl": "P>=1[(G ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[(G ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,after,satisfaction": {
    "pctl": "P>=1[(P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])]",
    "pctlExpanded": "P>=1[(P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,always,satisfaction": {
    "pctl": "P>=1[(P$bound$[(G $post_condition$)])]",
    "pctlExpanded": "P>=1[(P$bound$[(G $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,before,satisfaction": {
    "pctl": "P>=1[(P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])]",
    "pctlExpanded": "P>=1[(P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[(P$bound$[(F $post_condition$)])]",
    "pctlExpanded": "P>=1[(P$bound$[(F $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,finally,satisfaction": {
    "pctl": "P>=1[(P$bound$[(G (LAST => $post_condition$))])]",
    "pctlExpanded": "P>=1[(P$bound$[(G (LAST => $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,for,satisfaction": {
    "pctl": "P>=1[(P$bound$[(G[<=$duration$] $post_condition$)])]",
    "pctlExpanded": "P>=1[(P$bound$[(G[<=$duration$] $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[(P$bound$[$post_condition$])]",
    "pctlExpanded": "P>=1[(P$bound$[$post_condition$])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,never,satisfaction": {
    "pctl": "P>=1[(P$bound$[(G (! $post_condition$))])]",
    "pctlExpanded": "P>=1[(P$bound$[(G (! $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,next,satisfaction": {
    "pctl": "P>=1[(P$bound$[(LAST | (X $post_condition$))])]",
    "pctlExpanded": "P>=1[(P$bound$[(LAST | (X $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,null,satisfaction": {
    "pctl": "P>=1[(P$bound$[(F $post_condition$)])]",
    "pctlExpanded": "P>=1[(P$bound$[(F $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,until,satisfaction": {
    "pctl": "P>=1[(P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])]",
    "pctlExpanded": "P>=1[(P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,bound,within,satisfaction": {
    "pctl": "P>=1[(P$bound$[(F[<=$duration$] $post_condition$)])]",
    "pctlExpanded": "P>=1[(P$bound$[(F[<=$duration$] $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,after,satisfaction": {
    "pctl": "P>=1[(P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])]",
    "pctlExpanded": "P>=1[(P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,always,satisfaction": {
    "pctl": "P>=1[(P>=1[(G $post_condition$)])]",
    "pctlExpanded": "P>=1[(P>=1[(G $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,before,satisfaction": {
    "pctl": "P>=1[(P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])]",
    "pctlExpanded": "P>=1[(P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,eventually,satisfaction": {
    "pctl": "P>=1[(P>=1[(F $post_condition$)])]",
    "pctlExpanded": "P>=1[(P>=1[(F $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,finally,satisfaction": {
    "pctl": "P>=1[(P>=1[(G (LAST => $post_condition$))])]",
    "pctlExpanded": "P>=1[(P>=1[(G (LAST => $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,for,satisfaction": {
    "pctl": "P>=1[(P>=1[(G[<=$duration$] $post_condition$)])]",
    "pctlExpanded": "P>=1[(P>=1[(G[<=$duration$] $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,immediately,satisfaction": {
    "pctl": "P>=1[(P>=1[$post_condition$])]",
    "pctlExpanded": "P>=1[(P>=1[$post_condition$])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,never,satisfaction": {
    "pctl": "P>=1[(P>=1[(G (! $post_condition$))])]",
    "pctlExpanded": "P>=1[(P>=1[(G (! $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,next,satisfaction": {
    "pctl": "P>=1[(P>=1[(LAST | (X $post_condition$))])]",
    "pctlExpanded": "P>=1[(P>=1[(LAST | (X $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,null,satisfaction": {
    "pctl": "P>=1[(P>=1[(F $post_condition$)])]",
    "pctlExpanded": "P>=1[(P>=1[(F $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,until,satisfaction": {
    "pctl": "P>=1[(P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])]",
    "pctlExpanded": "P>=1[(P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,null,null,within,satisfaction": {
    "pctl": "P>=1[(P>=1[(F[<=$duration$] $post_condition$)])]",
    "pctlExpanded": "P>=1[(P>=1[(F[<=$duration$] $post_condition$)])]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,after,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ -> (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ => (P$bound$[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,always,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,before,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ -> (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ => (P$bound$[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ => (P$bound$[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G (LAST => $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(G (LAST => $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G (LAST => $post_condition$))])))) & ($regular_condition$ => (P$bound$[(G (LAST => $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,for,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[$post_condition$])))) & ($regular_condition$ -> (P$bound$[$post_condition$])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[$post_condition$])))) & ($regular_condition$ => (P$bound$[$post_condition$])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,never,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G (! $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(G (! $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G (! $post_condition$))])))) & ($regular_condition$ => (P$bound$[(G (! $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,next,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(LAST | (X $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(LAST | (X $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(LAST | (X $post_condition$))])))) & ($regular_condition$ => (P$bound$[(LAST | (X $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,null,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(F $post_condition$)])))) & ($regular_condition$ => (P$bound$[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,until,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ => (P$bound$[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,bound,within,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(F[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P$bound$[(F[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,after,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ -> (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))) & ($regular_condition$ => (P>=1[((G[<=$duration$] (! $post_condition$)) & (F[<=$duration$+1] $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,always,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ => (P>=1[(G $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,before,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ -> (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))) & ($regular_condition$ => (P>=1[(($post_condition$ | LAST) R (! $stop_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ -> (P>=1[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ => (P>=1[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,finally,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G (LAST => $post_condition$))])))) & ($regular_condition$ -> (P>=1[(G (LAST => $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G (LAST => $post_condition$))])))) & ($regular_condition$ => (P>=1[(G (LAST => $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,for,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[$post_condition$])))) & ($regular_condition$ -> (P>=1[$post_condition$])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[$post_condition$])))) & ($regular_condition$ => (P>=1[$post_condition$])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,never,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G (! $post_condition$))])))) & ($regular_condition$ -> (P>=1[(G (! $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G (! $post_condition$))])))) & ($regular_condition$ => (P>=1[(G (! $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,next,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(LAST | (X $post_condition$))])))) & ($regular_condition$ -> (P>=1[(LAST | (X $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(LAST | (X $post_condition$))])))) & ($regular_condition$ => (P>=1[(LAST | (X $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,null,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ -> (P>=1[(F $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(F $post_condition$)])))) & ($regular_condition$ => (P>=1[(F $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,until,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ -> (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))) & ($regular_condition$ => (P>=1[(($stop_condition$ R ($post_condition$ | $stop_condition$)) | (LAST R $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "null,regular,null,within,satisfaction": {
    "pctl": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P>=1[(F[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(F[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P>=1[(F[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "LAST",
      "PRISMleft": "FTP",
      "PRISMright": "LAST"
    }
  },
  "onlyAfter,holding,bound,after,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,always,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(FLin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,before,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,for,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,never,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(FLin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,next,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,null,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,until,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,bound,within,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,after,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,always,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(FLin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,before,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,finally,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,for,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,never,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(FLin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,next,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,null,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,until,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,holding,null,within,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (FLin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (($scope_mode$ & (X (! $scope_mode$))) R ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,after,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,always,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(FLin_$scope_mode$ R $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,before,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[((! FLin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,finally,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,for,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(G[<=$duration$] $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(G[<=$duration$] $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[$post_condition$]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[$post_condition$]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,never,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(FLin_$scope_mode$ R (! $post_condition$))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,next,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,null,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[((! FLin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,until,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,bound,within,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,after,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,always,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(FLin_$scope_mode$ R $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,before,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,eventually,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[((! FLin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,finally,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,for,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(G[<=$duration$] $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(G[<=$duration$] $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,immediately,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[$post_condition$]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[$post_condition$]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,never,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(FLin_$scope_mode$ R (! $post_condition$))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,next,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,null,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[((! FLin_$scope_mode$) U $post_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,until,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,null,null,within,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,after,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,always,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(FLin_$scope_mode$ R $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(FLin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,before,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[((! FLin_$scope_mode$) U $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,for,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[$post_condition$])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,never,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(FLin_$scope_mode$ R (! $post_condition$))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(FLin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,next,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,null,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[((! FLin_$scope_mode$) U $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,until,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,bound,within,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,after,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,always,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(FLin_$scope_mode$ R $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(FLin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,before,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((! (((! $stop_condition$) & (! FLin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & FLin_$scope_mode$)) & (! FLin_$scope_mode$)) U $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(! ((! (((! $stop_condition$) & (! ($scope_mode$ & (X (! $scope_mode$))))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ($scope_mode$ & (X (! $scope_mode$))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[((! FLin_$scope_mode$) U $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,finally,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! FLin_$scope_mode$) U (! (FLin_$scope_mode$ => (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U (! (($scope_mode$ & (X (! $scope_mode$))) => (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,for,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[$post_condition$])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,never,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(FLin_$scope_mode$ R (! $post_condition$))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(FLin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(($scope_mode$ & (X (! $scope_mode$))) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,next,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (FLin_$scope_mode$ | ((X (! $post_condition$)) & (! FLin_$scope_mode$))))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(! (($scope_mode$ & (X (! $scope_mode$))) | ((X (! $post_condition$)) & (! ($scope_mode$ & (X (! $scope_mode$)))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,null,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[((! FLin_$scope_mode$) U $post_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! FLin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[((! ($scope_mode$ & (X (! $scope_mode$)))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,until,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | FLin_$scope_mode$))) & (! FLin_$scope_mode$)) U $stop_condition$)]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(((! ((! $stop_condition$) & ((! $post_condition$) | ($scope_mode$ & (X (! $scope_mode$)))))) & (! ($scope_mode$ & (X (! $scope_mode$))))) U $stop_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyAfter,regular,null,within,satisfaction": {
    "pctl": "P>=1[(FLin_$scope_mode$ | ((FLin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! FLin_$scope_mode$))) -> ((X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])) & (! FLin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "pctlExpanded": "P>=1[(($scope_mode$ & (X (! $scope_mode$))) | ((($scope_mode$ & (X (! $scope_mode$))) R (((! $regular_condition$) & ((X $regular_condition$) & (! ($scope_mode$ & (X (! $scope_mode$)))))) => ((X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])) & (! ($scope_mode$ & (X (! $scope_mode$))))))) & ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FTP",
      "right": "FLin_$scope_mode$",
      "PRISMleft": "FTP",
      "PRISMright": "($scope_mode$ & X (! $scope_mode$))"
    }
  },
  "onlyBefore,holding,bound,after,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,always,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(G $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(G $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(G $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(G $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,before,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (G (LAST => (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (G (LAST => (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (G (LAST => (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (G (LAST => (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,for,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[$post_condition$])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[$post_condition$])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[$post_condition$])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[$post_condition$])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,never,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (F $post_condition$))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (F $post_condition$))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (F $post_condition$))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (F $post_condition$))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,next,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (LAST | (X (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (LAST | (X (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (LAST | (X (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (LAST | (X (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,null,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,until,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,bound,within,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,after,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,always,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(G $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(G $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(G $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(G $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,before,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,finally,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (G (LAST => (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (G (LAST => (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (G (LAST => (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (G (LAST => (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,for,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[$post_condition$])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[$post_condition$])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[$post_condition$])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[$post_condition$])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,never,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (F $post_condition$))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (F $post_condition$))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (F $post_condition$))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (F $post_condition$))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,next,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (LAST | (X (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (LAST | (X (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (LAST | (X (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (LAST | (X (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,null,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,until,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,holding,null,within,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (G ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (G ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (G ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (G ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,after,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,always,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(G $post_condition$)])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(G $post_condition$)])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(G $post_condition$)])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(G $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,before,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (G (! $post_condition$)))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (G (! $post_condition$)))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (G (! $post_condition$)))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (G (! $post_condition$)))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,finally,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (G (LAST => (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (G (LAST => (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (G (LAST => (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (G (LAST => (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,for,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(G[<=$duration$] $post_condition$)])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(G[<=$duration$] $post_condition$)])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(G[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[$post_condition$])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[$post_condition$])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[$post_condition$])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[$post_condition$])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,never,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (F $post_condition$))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (F $post_condition$))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (F $post_condition$))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (F $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,next,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (LAST | (X (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (LAST | (X (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (LAST | (X (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (LAST | (X (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,null,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (G (! $post_condition$)))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (G (! $post_condition$)))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (G (! $post_condition$)))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (G (! $post_condition$)))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,until,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,bound,within,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,after,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,always,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(G $post_condition$)])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(G $post_condition$)])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(G $post_condition$)])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(G $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,before,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,eventually,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (G (! $post_condition$)))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (G (! $post_condition$)))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (G (! $post_condition$)))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (G (! $post_condition$)))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,finally,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (G (LAST => (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (G (LAST => (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (G (LAST => (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (G (LAST => (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,for,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(G[<=$duration$] $post_condition$)])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(G[<=$duration$] $post_condition$)])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(G[<=$duration$] $post_condition$)])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(G[<=$duration$] $post_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,immediately,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[$post_condition$])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[$post_condition$])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[$post_condition$])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[$post_condition$])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,never,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (F $post_condition$))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (F $post_condition$))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (F $post_condition$))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (F $post_condition$))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,next,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (LAST | (X (! $post_condition$))))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (LAST | (X (! $post_condition$))))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (LAST | (X (! $post_condition$))))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (LAST | (X (! $post_condition$))))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,null,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (G (! $post_condition$)))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (G (! $post_condition$)))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (G (! $post_condition$)))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (G (! $post_condition$)))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,until,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,null,null,within,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,after,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,always,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,before,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! (G (LAST => (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! (G (LAST => (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! (G (LAST => (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! (G (LAST => (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,for,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[$post_condition$])))) & ($regular_condition$ -> (P$bound$[$post_condition$])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[$post_condition$])))) & ($regular_condition$ -> (P$bound$[$post_condition$])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[$post_condition$])))) & ($regular_condition$ => (P$bound$[$post_condition$])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[$post_condition$])))) & ($regular_condition$ => (P$bound$[$post_condition$])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,never,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (F $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(! (F $post_condition$))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (F $post_condition$))])))) & ($regular_condition$ -> (P$bound$[(! (F $post_condition$))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (F $post_condition$))])))) & ($regular_condition$ => (P$bound$[(! (F $post_condition$))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (F $post_condition$))])))) & ($regular_condition$ => (P$bound$[(! (F $post_condition$))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,next,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! (LAST | (X (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ -> (P$bound$[(! (LAST | (X (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! (LAST | (X (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ => (P$bound$[(! (LAST | (X (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,null,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P$bound$[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P$bound$[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,until,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ -> (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ -> (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ => (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ => (P$bound$[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,bound,within,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,after,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,always,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ => (P>=1[(G $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G $post_condition$)])))) & ($regular_condition$ => (P>=1[(G $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,before,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! (($stop_condition$ R (! ($post_condition$ & (! $stop_condition$)))) | (LAST R (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,finally,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! (G (LAST => (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! (G (LAST => (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! (G (LAST => (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G (LAST => (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! (G (LAST => (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,for,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[$post_condition$])))) & ($regular_condition$ -> (P>=1[$post_condition$])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[$post_condition$])))) & ($regular_condition$ -> (P>=1[$post_condition$])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[$post_condition$])))) & ($regular_condition$ => (P>=1[$post_condition$])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[$post_condition$])))) & ($regular_condition$ => (P>=1[$post_condition$])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,never,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (F $post_condition$))])))) & ($regular_condition$ -> (P>=1[(! (F $post_condition$))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (F $post_condition$))])))) & ($regular_condition$ -> (P>=1[(! (F $post_condition$))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (F $post_condition$))])))) & ($regular_condition$ => (P>=1[(! (F $post_condition$))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (F $post_condition$))])))) & ($regular_condition$ => (P>=1[(! (F $post_condition$))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,next,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! (LAST | (X (! $post_condition$))))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ -> (P>=1[(! (LAST | (X (! $post_condition$))))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! (LAST | (X (! $post_condition$))))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (LAST | (X (! $post_condition$))))])))) & ($regular_condition$ => (P>=1[(! (LAST | (X (! $post_condition$))))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,null,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ -> (P>=1[(! (G (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G (! $post_condition$)))])))) & ($regular_condition$ => (P>=1[(! (G (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,until,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ -> (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ -> (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ => (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))) & ($regular_condition$ => (P>=1[((! ((! $post_condition$) | LAST)) U $stop_condition$)])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyBefore,regular,null,within,satisfaction": {
    "pctl": "P>=1[(((! $scope_mode$) -> (((! FFin_$scope_mode$) U (FFin_$scope_mode$ & (X ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! FFin_$scope_mode$)))) & ($scope_mode$ -> ((G (((! $regular_condition$) & (X $regular_condition$)) -> (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "pctlExpanded": "P>=1[(((! $scope_mode$) => (((! ((! $scope_mode$) & (X $scope_mode$))) U (((! $scope_mode$) & (X $scope_mode$)) & (X ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) | (G (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($scope_mode$ => ((G (((! $regular_condition$) & (X $regular_condition$)) => (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) & ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FFin_$scope_mode$",
      "right": "LAST",
      "PRISMleft": "((! $scope_mode$) & (X $scope_mode$))",
      "PRISMright": "LAST"
    }
  },
  "onlyIn,holding,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,holding,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (LNin_$scope_mode$ V ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (((! $scope_mode$) & (X $scope_mode$)) R ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(LNin_$scope_mode$ R $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(LNin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[$post_condition$])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[$post_condition$]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[$post_condition$])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(LNin_$scope_mode$ R $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(LNin_$scope_mode$ R $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(G[<=$duration$] $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(G[<=$duration$] $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[$post_condition$])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[$post_condition$]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[$post_condition$])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[$post_condition$]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(LNin_$scope_mode$ R (! $post_condition$))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,null,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,bound,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P$bound$[(! (G[<=$duration$] (! $post_condition$)))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P$bound$[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,after,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! ((F[<=$duration$] $post_condition$) | (G[<=$duration$+1] (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,always,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,before,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((! (((! $stop_condition$) & (! LNin_$scope_mode$)) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! ((! (((! $stop_condition$) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($post_condition$ & (! $stop_condition$)))) | (! (((! ((! $post_condition$) & ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,eventually,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,finally,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U (! (LNin_$scope_mode$ => (! $post_condition$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U (! (((! $scope_mode$) & (X $scope_mode$)) => (! $post_condition$))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,for,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(G[<=$duration$] $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(G[<=$duration$] $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,immediately,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[$post_condition$])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[$post_condition$]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[$post_condition$])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[$post_condition$])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[$post_condition$]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,never,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(LNin_$scope_mode$ R (! $post_condition$))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(LNin_$scope_mode$ R (! $post_condition$))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(((! $scope_mode$) & (X $scope_mode$)) R (! $post_condition$))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,next,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (LNin_$scope_mode$ | ((X (! $post_condition$)) & (! LNin_$scope_mode$))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (((! $scope_mode$) & (X $scope_mode$)) | ((X (! $post_condition$)) & (! ((! $scope_mode$) & (X $scope_mode$))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,null,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[((! LNin_$scope_mode$) U $post_condition$)])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[((! LNin_$scope_mode$) U $post_condition$)]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[((! ((! $scope_mode$) & (X $scope_mode$))) U $post_condition$)]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,until,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)) & (! LNin_$scope_mode$)) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | LNin_$scope_mode$)))))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! ((($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))) & (! ((! $scope_mode$) & (X $scope_mode$)))) U ($stop_condition$ & ($stop_condition$ | ((! $post_condition$) | ((! $scope_mode$) & (X $scope_mode$)))))))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  },
  "onlyIn,regular,null,within,satisfaction": {
    "pctl": "P>=1[((G ((! (FNin_$scope_mode$ & (! LAST))) | (X ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) -> (LNin_$scope_mode$ | ((LNin_$scope_mode$ V (((! $regular_condition$) & ((X $regular_condition$) & (! LNin_$scope_mode$))) -> ((X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])) & (! LNin_$scope_mode$)))) & ($regular_condition$ -> (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "pctlExpanded": "P>=1[((G ((! (($scope_mode$ & (X (! $scope_mode$))) & (! LAST))) | (X ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))])))))) & ((! $scope_mode$) => (((! $scope_mode$) & (X $scope_mode$)) | ((((! $scope_mode$) & (X $scope_mode$)) R (((! $regular_condition$) & ((X $regular_condition$) & (! ((! $scope_mode$) & (X $scope_mode$))))) => ((X (P>=1[(! (G[<=$duration$] (! $post_condition$)))])) & (! ((! $scope_mode$) & (X $scope_mode$)))))) & ($regular_condition$ => (P>=1[(! (G[<=$duration$] (! $post_condition$)))]))))))]",
    "description": "We are working on adding a description for this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
    "diagram": "Undefined svg.",
    "endpoints": {
      "left": "FNin_$scope_mode$",
      "right": "LNin_$scope_mode$",
      "PRISMleft": "($scope_mode$ & X (! $scope_mode$))",
      "PRISMright": "((! $scope_mode$) & (X $scope_mode$))"
    }
  }
}
{
    "requirements": [
        {
            "reqid": "TUI-003v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Tustin_Integrator shall always satisfy normalv2 => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "normalv2",
                    "yout",
                    "timeStep",
                    "xin",
                    "xinpv",
                    "ypv"
                ],
                "component_name": "Tustin_Integrator",
                "componentTextRange": [
                    0,
                    16
                ],
                "timingTextRange": [
                    24,
                    29
                ],
                "post_condition": "(normalv2 => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv)",
                "responseTextRange": [
                    31,
                    95
                ],
                "diagramVariables": "Response = <b><i>(normalv2 => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_unexp_ft": "(normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_SMV_pt": "(normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_SMV_ft": "(normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "CoCoSpecCode": "H((normalv2 => (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftExpanded": "(LAST V (normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (normalv2 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "component": "Tustin_Integrator"
            },
            "_id": "027ad630-f45b-11ee-8874-8dbd3274a826"
        },
        {
            "reqid": "TUI-003v3",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Tustin_Integrator shall always satisfy normalv3 => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "normalv3",
                    "yout",
                    "timeStep",
                    "xin",
                    "xinpv",
                    "ypv"
                ],
                "component_name": "Tustin_Integrator",
                "componentTextRange": [
                    0,
                    16
                ],
                "timingTextRange": [
                    24,
                    29
                ],
                "post_condition": "(normalv3 => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv)",
                "responseTextRange": [
                    31,
                    95
                ],
                "diagramVariables": "Response = <b><i>(normalv3 => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_unexp_ft": "(normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_SMV_pt": "(normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_SMV_ft": "(normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "CoCoSpecCode": "H((normalv3 => (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftExpanded": "(LAST V (normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (normalv3 -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "component": "Tustin_Integrator"
            },
            "_id": "0b8c7620-f45b-11ee-8874-8dbd3274a826"
        },
        {
            "reqid": "FSM-012_weak",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_fault_state & (!request | !limits)) => SENSTATE = sen_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "component_name": "FSM_Sensor",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(( senstate = sen_fault_state & ( ! request | ! limits ) ) => SENSTATE = sen_transition_state)",
                "responseTextRange": [
                    24,
                    117
                ],
                "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ( ! request | ! limits ) ) => SENSTATE = sen_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state))",
                "post_condition_unexp_ft": "(((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_pt": "(((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_ft": "(((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state))",
                "ft": "(LAST V (((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state)))",
                "pt": "(H (((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state)))",
                "ptExpanded": "(H (((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state)))",
                "CoCoSpecCode": "H((((senstate = sen_fault_state) and (not (request) or not (limits))) => (SENSTATE = sen_transition_state)))",
                "ftExpanded": "(LAST V (((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state)))",
                "ftInfAUExpanded": "(G (((senstate = sen_fault_state) & ((! request) | (! limits))) -> (SENSTATE = sen_transition_state)))",
                "component": "FSM_Sensor"
            },
            "_id": "2590e860-faab-11ef-9707-3dbf4fc55ace"
        },
        {
            "reqid": "EUL-006C",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy c1xc1Transpose = 1.0 & c2xc2Transpose = 1.0 & c3xc3Transpose = 1.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "c1xc1Transpose",
                    "c2xc2Transpose",
                    "c3xc3Transpose"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(c1xc1Transpose = 1.0 & c2xc2Transpose = 1.0 & c3xc3Transpose = 1.0)",
                "responseTextRange": [
                    19,
                    92
                ],
                "diagramVariables": "Response = <b><i>(c1xc1Transpose = 1.0 & c2xc2Transpose = 1.0 & c3xc3Transpose = 1.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0))",
                "post_condition_unexp_ft": "(((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0))",
                "post_condition_SMV_pt": "(((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0))",
                "post_condition_SMV_ft": "(((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0)))",
                "CoCoSpecCode": "H((((c1xc1Transpose = 1.0) and (c2xc2Transpose = 1.0)) and (c3xc3Transpose = 1.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0)))",
                "ftExpanded": "(LAST V (((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((c1xc1Transpose = 1.0) & (c2xc2Transpose = 1.0)) & (c3xc3Transpose = 1.0)))",
                "component": "Euler"
            },
            "_id": "3b33fb60-f5cc-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "EUL-006D",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy c1xc2Transpose = 0.0 & c1xc3Transpose = 0.0 & c2xc3Transpose = 0.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "c1xc2Transpose",
                    "c1xc3Transpose",
                    "c2xc3Transpose"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(c1xc2Transpose = 0.0 & c1xc3Transpose = 0.0 & c2xc3Transpose = 0.0)",
                "responseTextRange": [
                    19,
                    92
                ],
                "diagramVariables": "Response = <b><i>(c1xc2Transpose = 0.0 & c1xc3Transpose = 0.0 & c2xc3Transpose = 0.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0))",
                "post_condition_unexp_ft": "(((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0))",
                "post_condition_SMV_pt": "(((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0))",
                "post_condition_SMV_ft": "(((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0)))",
                "CoCoSpecCode": "H((((c1xc2Transpose = 0.0) and (c1xc3Transpose = 0.0)) and (c2xc3Transpose = 0.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0)))",
                "ftExpanded": "(LAST V (((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((c1xc2Transpose = 0.0) & (c1xc3Transpose = 0.0)) & (c2xc3Transpose = 0.0)))",
                "component": "Euler"
            },
            "_id": "593c6d90-f5cc-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "EUL-004",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy absReal(theta) != pi/2.0 => det_3x3(DCM321_11, DCM321_21, DCM321_31, DCM321_12, DCM321_22, DCM321_32, DCM321_23, DCM321_33)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "theta",
                    "pi",
                    "det_3x3",
                    "DCM321_11",
                    "DCM321_21",
                    "DCM321_31",
                    "DCM321_12",
                    "DCM321_22",
                    "DCM321_32",
                    "DCM321_23",
                    "DCM321_33"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(absReal ( theta ) != pi / 2.0 => det_3x3 ( DCM321_11 , DCM321_21 , DCM321_31 , DCM321_12 , DCM321_22 , DCM321_32 , DCM321_23 , DCM321_33 ))",
                "responseTextRange": [
                    19,
                    149
                ],
                "diagramVariables": "Response = <b><i>(absReal ( theta ) != pi / 2.0 => det_3x3 ( DCM321_11 , DCM321_21 , DCM321_31 , DCM321_12 , DCM321_22 , DCM321_32 , DCM321_23 , DCM321_33 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33))",
                "post_condition_unexp_ft": "((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33))",
                "post_condition_SMV_pt": "((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33))",
                "post_condition_SMV_ft": "((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "CoCoSpecCode": "H(((absReal(theta) <> (pi / 2.0)) => det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "ftExpanded": "(LAST V ((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((absReal(theta) != (pi / 2.0)) -> det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_23,DCM321_33)))",
                "component": "Euler"
            },
            "_id": "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "EUL-003",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy Vb_1 * Vb_1 + Vb_2 * Vb_2 + Vb_3 * Vb_3 = Vi_1 * Vi_1 + Vi_2 * Vi_2 + Vi_3 * Vi_3",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "Vb_1",
                    "Vb_2",
                    "Vb_3",
                    "Vi_1",
                    "Vi_2",
                    "Vi_3"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(Vb_1 * Vb_1 + Vb_2 * Vb_2 + Vb_3 * Vb_3 = Vi_1 * Vi_1 + Vi_2 * Vi_2 + Vi_3 * Vi_3)",
                "responseTextRange": [
                    19,
                    107
                ],
                "diagramVariables": "Response = <b><i>(Vb_1 * Vb_1 + Vb_2 * Vb_2 + Vb_3 * Vb_3 = Vi_1 * Vi_1 + Vi_2 * Vi_2 + Vi_3 * Vi_3)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3)))",
                "post_condition_unexp_ft": "((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3)))",
                "post_condition_SMV_pt": "((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3)))",
                "post_condition_SMV_ft": "((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "CoCoSpecCode": "H(((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "ftExpanded": "(LAST V ((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((Vb_1 * Vb_1) + (Vb_2 * Vb_2)) + (Vb_3 * Vb_3)) = (((Vi_1 * Vi_1) + (Vi_2 * Vi_2)) + (Vi_3 * Vi_3))))",
                "component": "Euler"
            },
            "_id": "8252d6d0-f5ca-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "EUL-007",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy DCMxDCMTranspose_11 = 1.0 & DCMxDCMTranspose_12 = 0.0 & DCMxDCMTranspose_13 = 0.0 & DCMxDCMTranspose_21 = 0.0 & DCMxDCMTranspose_22 = 1.0 & DCMxDCMTranspose_23 = 0.0 & DCMxDCMTranspose_31 = 0.0 & DCMxDCMTranspose_32 = 0.0 & DCMxDCMTranspose_33 = 1.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCMxDCMTranspose_11",
                    "DCMxDCMTranspose_12",
                    "DCMxDCMTranspose_13",
                    "DCMxDCMTranspose_21",
                    "DCMxDCMTranspose_22",
                    "DCMxDCMTranspose_23",
                    "DCMxDCMTranspose_31",
                    "DCMxDCMTranspose_32",
                    "DCMxDCMTranspose_33"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCMxDCMTranspose_11 = 1.0 & DCMxDCMTranspose_12 = 0.0 & DCMxDCMTranspose_13 = 0.0 & DCMxDCMTranspose_21 = 0.0 & DCMxDCMTranspose_22 = 1.0 & DCMxDCMTranspose_23 = 0.0 & DCMxDCMTranspose_31 = 0.0 & DCMxDCMTranspose_32 = 0.0 & DCMxDCMTranspose_33 = 1.0)",
                "responseTextRange": [
                    19,
                    275
                ],
                "diagramVariables": "Response = <b><i>(DCMxDCMTranspose_11 = 1.0 & DCMxDCMTranspose_12 = 0.0 & DCMxDCMTranspose_13 = 0.0 & DCMxDCMTranspose_21 = 0.0 & DCMxDCMTranspose_22 = 1.0 & DCMxDCMTranspose_23 = 0.0 & DCMxDCMTranspose_31 = 0.0 & DCMxDCMTranspose_32 = 0.0 & DCMxDCMTranspose_33 = 1.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0))",
                "post_condition_unexp_ft": "(((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0))",
                "post_condition_SMV_pt": "(((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0))",
                "post_condition_SMV_ft": "(((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0)))",
                "CoCoSpecCode": "H((((((((((DCMxDCMTranspose_11 = 1.0) and (DCMxDCMTranspose_12 = 0.0)) and (DCMxDCMTranspose_13 = 0.0)) and (DCMxDCMTranspose_21 = 0.0)) and (DCMxDCMTranspose_22 = 1.0)) and (DCMxDCMTranspose_23 = 0.0)) and (DCMxDCMTranspose_31 = 0.0)) and (DCMxDCMTranspose_32 = 0.0)) and (DCMxDCMTranspose_33 = 1.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0)))",
                "ftExpanded": "(LAST V (((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((((((((DCMxDCMTranspose_11 = 1.0) & (DCMxDCMTranspose_12 = 0.0)) & (DCMxDCMTranspose_13 = 0.0)) & (DCMxDCMTranspose_21 = 0.0)) & (DCMxDCMTranspose_22 = 1.0)) & (DCMxDCMTranspose_23 = 0.0)) & (DCMxDCMTranspose_31 = 0.0)) & (DCMxDCMTranspose_32 = 0.0)) & (DCMxDCMTranspose_33 = 1.0)))",
                "component": "Euler"
            },
            "_id": "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "FSM-003v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_transition_state & good & supported & !standby) => STATE = ap_nominal_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "standby",
                    "STATE",
                    "ap_nominal_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_transition_state & good & supported & ! standby ) => STATE = ap_nominal_state)",
                "responseTextRange": [
                    27,
                    121
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported & ! standby ) => STATE = ap_nominal_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state))",
                "post_condition_unexp_ft": "(((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state))",
                "post_condition_SMV_pt": "(((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state))",
                "post_condition_SMV_ft": "(((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state)))",
                "CoCoSpecCode": "H((((((state = ap_transition_state) and good) and supported) and not (standby)) => (STATE = ap_nominal_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state)))",
                "ftExpanded": "(LAST V (((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((((state = ap_transition_state) & good) & supported) & (! standby)) -> (STATE = ap_nominal_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "96f47360-f6aa-11ee-bf4a-fb27967e923c"
        },
        {
            "reqid": "EUL-006A",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy r1xr1Transpose = 1.0 & r2xr2Transpose = 1.0 & r3xr3Transpose = 1.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "r1xr1Transpose",
                    "r2xr2Transpose",
                    "r3xr3Transpose"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(r1xr1Transpose = 1.0 & r2xr2Transpose = 1.0 & r3xr3Transpose = 1.0)",
                "responseTextRange": [
                    19,
                    92
                ],
                "diagramVariables": "Response = <b><i>(r1xr1Transpose = 1.0 & r2xr2Transpose = 1.0 & r3xr3Transpose = 1.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0))",
                "post_condition_unexp_ft": "(((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0))",
                "post_condition_SMV_pt": "(((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0))",
                "post_condition_SMV_ft": "(((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0)))",
                "CoCoSpecCode": "H((((r1xr1Transpose = 1.0) and (r2xr2Transpose = 1.0)) and (r3xr3Transpose = 1.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0)))",
                "ftExpanded": "(LAST V (((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((r1xr1Transpose = 1.0) & (r2xr2Transpose = 1.0)) & (r3xr3Transpose = 1.0)))",
                "component": "Euler"
            },
            "_id": "ad205e90-f5cb-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "EUL-008",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy det_3x3(DCM321_11, DCM321_21, DCM321_31, DCM321_12, DCM321_22, DCM321_32, DCM321_13, DCM321_23, DCM321_33)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "det_3x3",
                    "DCM321_11",
                    "DCM321_21",
                    "DCM321_31",
                    "DCM321_12",
                    "DCM321_22",
                    "DCM321_32",
                    "DCM321_13",
                    "DCM321_23",
                    "DCM321_33"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(det_3x3 ( DCM321_11 , DCM321_21 , DCM321_31 , DCM321_12 , DCM321_22 , DCM321_32 , DCM321_13 , DCM321_23 , DCM321_33 ))",
                "responseTextRange": [
                    19,
                    132
                ],
                "diagramVariables": "Response = <b><i>(det_3x3 ( DCM321_11 , DCM321_21 , DCM321_31 , DCM321_12 , DCM321_22 , DCM321_32 , DCM321_13 , DCM321_23 , DCM321_33 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33)",
                "post_condition_unexp_ft": "det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33)",
                "post_condition_SMV_pt": "det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33)",
                "post_condition_SMV_ft": "det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "CoCoSpecCode": "H(det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "ftExpanded": "(LAST V det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G det_3x3(DCM321_11,DCM321_21,DCM321_31,DCM321_12,DCM321_22,DCM321_32,DCM321_13,DCM321_23,DCM321_33))",
                "component": "Euler"
            },
            "_id": "b5689730-f5cf-11ee-9c69-3f6527c3093c"
        },
        {
            "reqid": "AP-003D",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The roll reference shall be set to the cockpit turn knob command, up to a 30 degree limit, if the turn knob is commanding 3 degrees or more in either direction. (we removed the \"up to a 30 degree limit\" part)",
            "fulltext": "RollAutopilot shall always satisfy (TurnKnob >= 3.0 | TurnKnob <= -3.0) & (TurnKnob <= 30.0 | TurnKnob >= -30.0) => roll_hold_reference = TurnKnob",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "TurnKnob",
                    "roll_hold_reference"
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)",
                "responseTextRange": [
                    27,
                    145
                ],
                "diagramVariables": "Response = <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob))",
                "post_condition_unexp_ft": "((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob))",
                "post_condition_SMV_pt": "((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob))",
                "post_condition_SMV_ft": "((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob)))",
                "CoCoSpecCode": "H(((((TurnKnob >= 3.0) or (TurnKnob <= -3.0)) and ((TurnKnob <= 30.0) or (TurnKnob >= -30.0))) => (roll_hold_reference = TurnKnob)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob)))",
                "ftExpanded": "(LAST V ((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((TurnKnob >= 3.0) | (TurnKnob <= -3.0)) & ((TurnKnob <= 30.0) | (TurnKnob >= -30.0))) -> (roll_hold_reference = TurnKnob)))",
                "component": "RollAutopilot"
            },
            "_id": "c829ea50-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NN-004",
            "parent_reqid": "NN.R1",
            "project": "LM_requirements",
            "rationale": "The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
            "comments": "Originally:\n\nNN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)",
            "fulltext": "NN shall for 200 secs satisfy ( x = xt & y = yt  => absReal(zt - z) <= 0.01)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "for",
                "response": "satisfaction",
                "variables": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "zt",
                    "z"
                ],
                "component_name": "NN",
                "componentTextRange": [
                    0,
                    1
                ],
                "duration": "200",
                "timingTextRange": [
                    9,
                    20
                ],
                "post_condition": "(( x = xt & y = yt => absReal ( zt - z ) <= 0.01 ))",
                "responseTextRange": [
                    22,
                    75
                ],
                "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(( x = xt & y = yt => absReal ( zt - z ) <= 0.01 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))",
                "post_condition_unexp_ft": "(((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))",
                "post_condition_SMV_pt": "(((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))",
                "post_condition_SMV_ft": "(((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))",
                "ft_fetched": "((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))",
                "ft": "((G[<=200] (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))) | (LAST V (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))))",
                "pt_fetched": "(H ((O[<=$duration$] FTP) -> $post_condition_unexp_pt$))",
                "pt": "(H ((O[<=200] FTP) -> (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))))",
                "ptExpanded_fetched": "(H ((O[<=$duration$] (! (Y TRUE))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((O[0,200] (! (Y TRUE))) -> (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))))",
                "CoCoSpecCode": "H((OT(200, 0, not (YtoPre(true))) => (((x = xt) and (y = yt)) => (absReal((zt - z)) <= 0.01))))",
                "ftExpanded_fetched": "((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((G[0,200] (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))) | (LAST V (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))))",
                "ftExpanded": "((G[0,200] (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))) | (LAST V (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))))",
                "ftInfAUExpanded_fetched": "((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G[0,200] (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))) | (G (((x = xt) & (y = yt)) -> (absReal((zt - z)) <= 0.01))))",
                "component": "NN"
            },
            "_id": "c829ea51-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
            "fulltext": "FSM_Autopilot shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
                "responseTextRange": [
                    27,
                    101
                ],
                "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state))",
                "post_condition_unexp_ft": "((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state))",
                "post_condition_SMV_pt": "((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state))",
                "post_condition_SMV_ft": "((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state)))",
                "CoCoSpecCode": "H(((standby and (state = ap_transition_state)) => (STATE = ap_standby_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state)))",
                "ftExpanded": "(LAST V ((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((standby & (state = ap_transition_state)) -> (STATE = ap_standby_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea52-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001C",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Euler shall always satisfy DCM321_13 = - sin(theta)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_13",
                    "sin",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_13 = - sin ( theta ))",
                "responseTextRange": [
                    19,
                    50
                ],
                "diagramVariables": "Response = <b><i>(DCM321_13 = - sin ( theta ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_13 = (- sin(theta)))",
                "post_condition_unexp_ft": "(DCM321_13 = (- sin(theta)))",
                "post_condition_SMV_pt": "(DCM321_13 = (- sin(theta)))",
                "post_condition_SMV_ft": "(DCM321_13 = (- sin(theta)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_13 = (- sin(theta))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_13 = (- sin(theta))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_13 = (- sin(theta))))",
                "CoCoSpecCode": "H((DCM321_13 = -(sin(theta))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_13 = (- sin(theta))))",
                "ftExpanded": "(LAST V (DCM321_13 = (- sin(theta))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_13 = (- sin(theta))))",
                "component": "Euler"
            },
            "_id": "c829ea53-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TSM-004",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nTriplexSignalMonitor shall always satisfy (single_fail_reported & failure_in_progress => set_val = preReal(0.0,set_val))\n\nwhere\n\nvar C1: bool = abs (ia - ib) > Tlevel ;\nvar C2: bool = abs (ib - ic) > Tlevel ;\nvar C3: bool = abs (ia - ic) > Tlevel ;\nvar miscompare : bool = (not C1 and C2 and C3) or (C1 and not C2\nand C3) or (C1 and C2 and not C3);\nvar failure_in_progress : bool = miscompare and prePC <= PCLimit\nand PC > 0;",
            "fulltext": "TriplexSignalMonitor shall always satisfy (single_fail_reported & (((!(absReal(ia - ib) > Tlevel) & (absReal(ib - ic) > Tlevel) & (absReal(ia - ic) > Tlevel)) | ((absReal(ia - ib) > Tlevel) & !(absReal(ib - ic) > Tlevel) & (absReal(ia - ic) > Tlevel)) | ((absReal(ia - ib) > Tlevel) & (absReal(ib - ic) > Tlevel) & !(absReal(ia - ic) > Tlevel))) & preInt(0,PC) <= PCLimit & PC > 0) => set_val = preReal(0.0,set_val))",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "single_fail_reported",
                    "ia",
                    "ib",
                    "Tlevel",
                    "ic",
                    "PC",
                    "PCLimit",
                    "set_val"
                ],
                "component_name": "TriplexSignalMonitor",
                "componentTextRange": [
                    0,
                    19
                ],
                "timingTextRange": [
                    27,
                    32
                ],
                "post_condition": "(( single_fail_reported & ( ( ( ! ( absReal ( ia - ib ) > Tlevel ) & ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ! ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ( absReal ( ib - ic ) > Tlevel ) & ! ( absReal ( ia - ic ) > Tlevel ) ) ) & preInt ( 0 , PC ) <= PCLimit & PC > 0 ) => set_val = preReal ( 0.0 , set_val ) ))",
                "responseTextRange": [
                    34,
                    415
                ],
                "diagramVariables": "Response = <b><i>(( single_fail_reported & ( ( ( ! ( absReal ( ia - ib ) > Tlevel ) & ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ! ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ( absReal ( ib - ic ) > Tlevel ) & ! ( absReal ( ia - ic ) > Tlevel ) ) ) & preInt ( 0 , PC ) <= PCLimit & PC > 0 ) => set_val = preReal ( 0.0 , set_val ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val)))",
                "post_condition_unexp_ft": "((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val)))",
                "post_condition_SMV_pt": "((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val)))",
                "post_condition_SMV_ft": "((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val))))",
                "CoCoSpecCode": "H(((single_fail_reported and ((((((not ((absReal((ia - ib)) > Tlevel)) and (absReal((ib - ic)) > Tlevel)) and (absReal((ia - ic)) > Tlevel)) or (((absReal((ia - ib)) > Tlevel) and not ((absReal((ib - ic)) > Tlevel))) and (absReal((ia - ic)) > Tlevel))) or (((absReal((ia - ib)) > Tlevel) and (absReal((ib - ic)) > Tlevel)) and not ((absReal((ia - ic)) > Tlevel)))) and (preInt(0,PC) <= PCLimit)) and (PC > 0))) => (set_val = preReal(0.0,set_val))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val))))",
                "ftExpanded": "(LAST V ((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((single_fail_reported & (((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) <= PCLimit)) & (PC > 0))) -> (set_val = preReal(0.0,set_val))))",
                "component": "TriplexSignalMonitor"
            },
            "_id": "c829ea54-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
            "comments": "Originally split into two requirements:\nAP-002A: in roll_hold mode RollAutopilot shall always satisfy \nautopilot_engaged & !HDGmode\nAP-002B: in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd\nAP-002B (Andreas's simplification): in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_reference",
            "fulltext": "in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_reference",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "roll_hold",
                    "roll_cmd",
                    "roll_hold_reference"
                ],
                "scope_mode": "roll_hold",
                "scopeTextRange": [
                    0,
                    16
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    18,
                    30
                ],
                "timingTextRange": [
                    38,
                    43
                ],
                "post_condition": "(roll_cmd = roll_hold_reference)",
                "responseTextRange": [
                    45,
                    82
                ],
                "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(roll_cmd = roll_hold_reference)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
                "scope_mode_pt": "roll_hold",
                "scope_mode_ft": "roll_hold",
                "post_condition_unexp_pt": "(roll_cmd = roll_hold_reference)",
                "post_condition_unexp_ft": "(roll_cmd = roll_hold_reference)",
                "post_condition_SMV_pt": "(roll_cmd = roll_hold_reference)",
                "post_condition_SMV_ft": "(roll_cmd = roll_hold_reference)",
                "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V (roll_hold -> (roll_cmd = roll_hold_reference)))",
                "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (roll_hold -> (roll_cmd = roll_hold_reference)))",
                "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H (roll_hold -> (roll_cmd = roll_hold_reference)))",
                "CoCoSpecCode": "H((roll_hold => (roll_cmd = roll_hold_reference)))",
                "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (roll_hold -> (roll_cmd = roll_hold_reference)))",
                "ftExpanded": "(LAST V (roll_hold -> (roll_cmd = roll_hold_reference)))",
                "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (roll_hold -> (roll_cmd = roll_hold_reference)))",
                "component": "RollAutopilot"
            },
            "_id": "c829ea55-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001I",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nEuler shall always satisfy DCM321_33 = CosPhi * CosTheta",
            "fulltext": "Euler shall always satisfy DCM321_33 = cos(phi) * cos(theta)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_33",
                    "cos",
                    "phi",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_33 = cos ( phi ) * cos ( theta ))",
                "responseTextRange": [
                    19,
                    59
                ],
                "diagramVariables": "Response = <b><i>(DCM321_33 = cos ( phi ) * cos ( theta ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_33 = (cos(phi) * cos(theta)))",
                "post_condition_unexp_ft": "(DCM321_33 = (cos(phi) * cos(theta)))",
                "post_condition_SMV_pt": "(DCM321_33 = (cos(phi) * cos(theta)))",
                "post_condition_SMV_ft": "(DCM321_33 = (cos(phi) * cos(theta)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_33 = (cos(phi) * cos(theta))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_33 = (cos(phi) * cos(theta))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_33 = (cos(phi) * cos(theta))))",
                "CoCoSpecCode": "H((DCM321_33 = (cos(phi) * cos(theta))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_33 = (cos(phi) * cos(theta))))",
                "ftExpanded": "(LAST V (DCM321_33 = (cos(phi) * cos(theta))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_33 = (cos(phi) * cos(theta))))",
                "component": "Euler"
            },
            "_id": "c829ea56-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EB-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nEB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps6  &  abs(check_1_2)<eps6  &  abs(check_1_3)<eps6  & abs(check_2_1)<eps6  &  abs(check_2_2  -  1.0)<eps6  &  abs(check_2_3)<eps6  & abs(check_3_1)<eps6 & abs(check_3_2)< eps6 & abs(check_3_3 - 1.0)<eps6",
            "fulltext": "EB  shall  always  satisfy  (det_3x3(B_11*B_11 + B_12*B_12 + B_13*B_13 + B_14*B_14 + B_15*B_15 , B_11*B_21 + B_12*B_22 + B_13*B_23 + B_14*B_24 + B_15*B_25 , B_11*B_31 + B_12*B_32 + B_13*B_33 + B_14*B_34 + B_15*B_35 ,B_11*B_21 + B_12*B_22 + B_13*B_23 + B_14*B_24 + B_15*B_25 , B_21*B_21 + B_22*B_22 + B_23*B_23 + B_24*B_24 + B_25*B_25 , B_21*B_31 + B_22*B_32 + B_23*B_33 + B_24*B_34 + B_25*B_35 , B_11*B_31 + B_12*B_32 + B_13*B_33 + B_14*B_34 + B_15*B_35 , B_21*B_31 + B_22*B_32 + B_23*B_33 + B_24*B_34 + B_25*B_35 ,B_31*B_31 + B_32*B_32 + B_33*B_33 + B_34*B_34 + B_35*B_35) <= eps12) => (ridge_on) &  absReal(check_11  - 1.0)<eps6  &  absReal(check_12)<eps6  &  absReal(check_13)<eps6  & absReal(check_21)<eps6  &  absReal(check_22  -  1.0)<eps6  &  absReal(check_23)<eps6  & absReal(check_31)<eps6 & absReal(check_32)< eps6 & absReal(check_33 - 1.0)<eps6",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "det_3x3",
                    "B_11",
                    "B_12",
                    "B_13",
                    "B_14",
                    "B_15",
                    "B_21",
                    "B_22",
                    "B_23",
                    "B_24",
                    "B_25",
                    "B_31",
                    "B_32",
                    "B_33",
                    "B_34",
                    "B_35",
                    "eps12",
                    "ridge_on",
                    "check_11",
                    "eps6",
                    "check_12",
                    "check_13",
                    "check_21",
                    "check_22",
                    "check_23",
                    "check_31",
                    "check_32",
                    "check_33"
                ],
                "component_name": "EB",
                "componentTextRange": [
                    0,
                    1
                ],
                "timingTextRange": [
                    11,
                    16
                ],
                "post_condition": "(( det_3x3 ( B_11 * B_11 + B_12 * B_12 + B_13 * B_13 + B_14 * B_14 + B_15 * B_15 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_21 * B_21 + B_22 * B_22 + B_23 * B_23 + B_24 * B_24 + B_25 * B_25 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_31 * B_31 + B_32 * B_32 + B_33 * B_33 + B_34 * B_34 + B_35 * B_35 ) <= eps12 ) => ( ridge_on ) & absReal ( check_11 - 1.0 ) < eps6 & absReal ( check_12 ) < eps6 & absReal ( check_13 ) < eps6 & absReal ( check_21 ) < eps6 & absReal ( check_22 - 1.0 ) < eps6 & absReal ( check_23 ) < eps6 & absReal ( check_31 ) < eps6 & absReal ( check_32 ) < eps6 & absReal ( check_33 - 1.0 ) < eps6)",
                "responseTextRange": [
                    19,
                    854
                ],
                "diagramVariables": "Response = <b><i>(( det_3x3 ( B_11 * B_11 + B_12 * B_12 + B_13 * B_13 + B_14 * B_14 + B_15 * B_15 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_21 * B_21 + B_22 * B_22 + B_23 * B_23 + B_24 * B_24 + B_25 * B_25 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_31 * B_31 + B_32 * B_32 + B_33 * B_33 + B_34 * B_34 + B_35 * B_35 ) <= eps12 ) => ( ridge_on ) & absReal ( check_11 - 1.0 ) < eps6 & absReal ( check_12 ) < eps6 & absReal ( check_13 ) < eps6 & absReal ( check_21 ) < eps6 & absReal ( check_22 - 1.0 ) < eps6 & absReal ( check_23 ) < eps6 & absReal ( check_31 ) < eps6 & absReal ( check_32 ) < eps6 & absReal ( check_33 - 1.0 ) < eps6)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6)))",
                "post_condition_unexp_ft": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6)))",
                "post_condition_SMV_pt": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6)))",
                "post_condition_SMV_ft": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6))))",
                "CoCoSpecCode": "H(((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) => (((((((((ridge_on and (absReal((check_11 - 1.0)) < eps6)) and (absReal(check_12) < eps6)) and (absReal(check_13) < eps6)) and (absReal(check_21) < eps6)) and (absReal((check_22 - 1.0)) < eps6)) and (absReal(check_23) < eps6)) and (absReal(check_31) < eps6)) and (absReal(check_32) < eps6)) and (absReal((check_33 - 1.0)) < eps6))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6))))",
                "ftExpanded": "(LAST V ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps6)) & (absReal(check_12) < eps6)) & (absReal(check_13) < eps6)) & (absReal(check_21) < eps6)) & (absReal((check_22 - 1.0)) < eps6)) & (absReal(check_23) < eps6)) & (absReal(check_31) < eps6)) & (absReal(check_32) < eps6)) & (absReal((check_33 - 1.0)) < eps6))))",
                "component": "EB"
            },
            "_id": "c829ea57-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-010a",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nwhen in hdg mode, when hdg steady state Autopilot shall always satisfy\nabs hdg err <=1.0\n\ninlined and using predicates results in:\n\nwhen in hdg mode, when preBool(false, absReal(Psi - HDGmodeCmd - preReal(113.0, Psi - HDGmodeCmd)) <= 1.0) Autopilot shall always satisfy absReal(Psi - HDGmodeCmd) <= 1.0\n\nbut the past-time formula is too big, and Kind 2's were actually used",
            "fulltext": "whenever hdg & preBool(false, absReal(Psi - HDGmodeCmd - preReal(113.0, Psi - HDGmodeCmd)) <= 1.0) Autopilot shall immediately satisfy absReal(Psi - HDGmodeCmd) <= 1.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "noTrigger",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "hdg",
                    "Psi",
                    "HDGmodeCmd"
                ],
                "qualifier_word": "whenever",
                "pre_condition": "(hdg & preBool ( false , absReal ( Psi - HDGmodeCmd - preReal ( 113.0 , Psi - HDGmodeCmd ) ) <= 1.0 ))",
                "regular_condition": "(hdg & preBool ( false , absReal ( Psi - HDGmodeCmd - preReal ( 113.0 , Psi - HDGmodeCmd ) ) <= 1.0 ))",
                "conditionTextRange": [
                    0,
                    97
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    99,
                    107
                ],
                "timingTextRange": [
                    115,
                    125
                ],
                "post_condition": "(absReal ( Psi - HDGmodeCmd ) <= 1.0)",
                "responseTextRange": [
                    127,
                    166
                ],
                "diagramVariables": "CC = <b><i>(hdg & preBool ( false , absReal ( Psi - HDGmodeCmd - preReal ( 113.0 , Psi - HDGmodeCmd ) ) <= 1.0 ))</i></b>, Response = <b><i>(absReal ( Psi - HDGmodeCmd ) <= 1.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(hdg & preBool ( false , absReal ( Psi - HDGmodeCmd - preReal ( 113.0 , Psi - HDGmodeCmd ) ) <= 1.0 ))</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(hdg & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0)))))",
                "regular_condition_unexp_ft": "(hdg & preBool(FALSE,(absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0)))",
                "regular_condition_SMV_pt": "(hdg & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0)))))",
                "regular_condition_SMV_ft": "(hdg & preBool(FALSE,(absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0)))",
                "post_condition_unexp_pt": "(absReal((Psi - HDGmodeCmd)) <= 1.0)",
                "post_condition_unexp_ft": "(absReal((Psi - HDGmodeCmd)) <= 1.0)",
                "post_condition_SMV_pt": "(absReal((Psi - HDGmodeCmd)) <= 1.0)",
                "post_condition_SMV_ft": "(absReal((Psi - HDGmodeCmd)) <= 1.0)",
                "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V ((hdg & preBool(FALSE,(absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))) -> (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "pt_fetched": "(H ($regular_condition_unexp_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H ((hdg & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))))) -> (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "ptExpanded_fetched": "(H ($regular_condition_SMV_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((hdg & (Y (absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))) -> (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "CoCoSpecCode": "H(((hdg and YtoPre((absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))) => (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V ((hdg & preBool(FALSE,(absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))) -> (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "ftExpanded": "(LAST V ((hdg & preBool(FALSE,(absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))) -> (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G ((hdg & preBool(FALSE,(absReal(((Psi - HDGmodeCmd) - preReal(113.0,(Psi - HDGmodeCmd)))) <= 1.0))) -> (absReal((Psi - HDGmodeCmd)) <= 1.0)))",
                "component": "Autopilot"
            },
            "_id": "c829ea58-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "NLGuidance shall always satisfy Vv * yout > 0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "Vv",
                    "yout"
                ],
                "component_name": "NLGuidance",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(Vv * yout > 0)",
                "responseTextRange": [
                    24,
                    44
                ],
                "diagramVariables": "Response = <b><i>(Vv * yout > 0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((Vv * yout) > 0)",
                "post_condition_unexp_ft": "((Vv * yout) > 0)",
                "post_condition_SMV_pt": "((Vv * yout) > 0)",
                "post_condition_SMV_ft": "((Vv * yout) > 0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((Vv * yout) > 0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((Vv * yout) > 0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Vv * yout) > 0))",
                "CoCoSpecCode": "H(((Vv * yout) > 0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((Vv * yout) > 0))",
                "ftExpanded": "(LAST V ((Vv * yout) > 0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((Vv * yout) > 0))",
                "component": "NLGuidance"
            },
            "_id": "c829ea59-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-002&3",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "NLGuidance shall always satisfy mag(yout - Xtarg) >= r & dot((yout - Xtarg),(yout - Xv)) = 0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": {
                    "regular": [
                        "mag",
                        "yout",
                        "Xtarg",
                        "r",
                        "dot",
                        "Xv"
                    ],
                    "modes": []
                },
                "component_name": "NLGuidance",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)",
                "responseTextRange": [
                    24,
                    91
                ],
                "ft": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
                "pt": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
                "ftExpanded": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
                "ptExpanded": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
                "component": "<b><i>NLGuidance</i></b>",
                "CoCoSpecCode": "(H((mag ( yout - Xtarg ) >= r and dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)))",
                "diagramVariables": "Response = <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
                "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
            },
            "_id": "c829ea5a-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TUI-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "yout",
                    "TL",
                    "BL"
                ],
                "component_name": "Tustin_Integrator",
                "componentTextRange": [
                    0,
                    16
                ],
                "timingTextRange": [
                    24,
                    29
                ],
                "post_condition": "(yout <= TL & yout >= BL)",
                "responseTextRange": [
                    31,
                    62
                ],
                "diagramVariables": "Response = <b><i>(yout <= TL & yout >= BL)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((yout <= TL) & (yout >= BL))",
                "post_condition_unexp_ft": "((yout <= TL) & (yout >= BL))",
                "post_condition_SMV_pt": "((yout <= TL) & (yout >= BL))",
                "post_condition_SMV_ft": "((yout <= TL) & (yout >= BL))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((yout <= TL) & (yout >= BL)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((yout <= TL) & (yout >= BL)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((yout <= TL) & (yout >= BL)))",
                "CoCoSpecCode": "H(((yout <= TL) and (yout >= BL)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((yout <= TL) & (yout >= BL)))",
                "ftExpanded": "(LAST V ((yout <= TL) & (yout >= BL)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((yout <= TL) & (yout >= BL)))",
                "component": "Tustin_Integrator"
            },
            "_id": "c829ea5b-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001A",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Rotation Matrix Output, DCM321, of this Function Shall Equal a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3 Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.",
            "comments": "Originally:\n\nEuler shall always satisfy DCM321_11 = CosTheta * CosPsi",
            "fulltext": "Euler shall always satisfy DCM321_11 = cos(theta) * cos(psi)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_11",
                    "cos",
                    "theta",
                    "psi"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_11 = cos ( theta ) * cos ( psi ))",
                "responseTextRange": [
                    19,
                    59
                ],
                "diagramVariables": "Response = <b><i>(DCM321_11 = cos ( theta ) * cos ( psi ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_11 = (cos(theta) * cos(psi)))",
                "post_condition_unexp_ft": "(DCM321_11 = (cos(theta) * cos(psi)))",
                "post_condition_SMV_pt": "(DCM321_11 = (cos(theta) * cos(psi)))",
                "post_condition_SMV_ft": "(DCM321_11 = (cos(theta) * cos(psi)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_11 = (cos(theta) * cos(psi))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_11 = (cos(theta) * cos(psi))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_11 = (cos(theta) * cos(psi))))",
                "CoCoSpecCode": "H((DCM321_11 = (cos(theta) * cos(psi))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_11 = (cos(theta) * cos(psi))))",
                "ftExpanded": "(LAST V (DCM321_11 = (cos(theta) * cos(psi))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_11 = (cos(theta) * cos(psi))))",
                "component": "Euler"
            },
            "_id": "c829ea5c-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EB-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "EB  shall  always  satisfy  (det_3x3(B_11*B_11 + B_12*B_12 + B_13*B_13 + B_14*B_14 + B_15*B_15 , B_11*B_21 + B_12*B_22 + B_13*B_23 + B_14*B_24 + B_15*B_25 , B_11*B_31 + B_12*B_32 + B_13*B_33 + B_14*B_34 + B_15*B_35 ,B_11*B_21 + B_12*B_22 + B_13*B_23 + B_14*B_24 + B_15*B_25 , B_21*B_21 + B_22*B_22 + B_23*B_23 + B_24*B_24 + B_25*B_25 , B_21*B_31 + B_22*B_32 + B_23*B_33 + B_24*B_34 + B_25*B_35 , B_11*B_31 + B_12*B_32 + B_13*B_33 + B_14*B_34 + B_15*B_35 , B_21*B_31 + B_22*B_32 + B_23*B_33 + B_24*B_34 + B_25*B_35 ,B_31*B_31 + B_32*B_32 + B_33*B_33 + B_34*B_34 + B_35*B_35)  <= eps12) => (ridge_on) &  absReal(check_11  - 1.0)<eps12  &  absReal(check_12)<eps12  &  absReal(check_13)<eps12  & absReal(check_21)<eps12  &  absReal(check_22  -  1.0)<eps12  &  absReal(check_23)<eps12  & absReal(check_31)<eps12 & absReal(check_32)< eps12 & absReal(check_33 - 1.0)<eps12",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "det_3x3",
                    "B_11",
                    "B_12",
                    "B_13",
                    "B_14",
                    "B_15",
                    "B_21",
                    "B_22",
                    "B_23",
                    "B_24",
                    "B_25",
                    "B_31",
                    "B_32",
                    "B_33",
                    "B_34",
                    "B_35",
                    "eps12",
                    "ridge_on",
                    "check_11",
                    "check_12",
                    "check_13",
                    "check_21",
                    "check_22",
                    "check_23",
                    "check_31",
                    "check_32",
                    "check_33"
                ],
                "component_name": "EB",
                "componentTextRange": [
                    0,
                    1
                ],
                "timingTextRange": [
                    11,
                    16
                ],
                "post_condition": "(( det_3x3 ( B_11 * B_11 + B_12 * B_12 + B_13 * B_13 + B_14 * B_14 + B_15 * B_15 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_21 * B_21 + B_22 * B_22 + B_23 * B_23 + B_24 * B_24 + B_25 * B_25 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_31 * B_31 + B_32 * B_32 + B_33 * B_33 + B_34 * B_34 + B_35 * B_35 ) <= eps12 ) => ( ridge_on ) & absReal ( check_11 - 1.0 ) < eps12 & absReal ( check_12 ) < eps12 & absReal ( check_13 ) < eps12 & absReal ( check_21 ) < eps12 & absReal ( check_22 - 1.0 ) < eps12 & absReal ( check_23 ) < eps12 & absReal ( check_31 ) < eps12 & absReal ( check_32 ) < eps12 & absReal ( check_33 - 1.0 ) < eps12)",
                "responseTextRange": [
                    19,
                    864
                ],
                "diagramVariables": "Response = <b><i>(( det_3x3 ( B_11 * B_11 + B_12 * B_12 + B_13 * B_13 + B_14 * B_14 + B_15 * B_15 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_11 * B_21 + B_12 * B_22 + B_13 * B_23 + B_14 * B_24 + B_15 * B_25 , B_21 * B_21 + B_22 * B_22 + B_23 * B_23 + B_24 * B_24 + B_25 * B_25 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_11 * B_31 + B_12 * B_32 + B_13 * B_33 + B_14 * B_34 + B_15 * B_35 , B_21 * B_31 + B_22 * B_32 + B_23 * B_33 + B_24 * B_34 + B_25 * B_35 , B_31 * B_31 + B_32 * B_32 + B_33 * B_33 + B_34 * B_34 + B_35 * B_35 ) <= eps12 ) => ( ridge_on ) & absReal ( check_11 - 1.0 ) < eps12 & absReal ( check_12 ) < eps12 & absReal ( check_13 ) < eps12 & absReal ( check_21 ) < eps12 & absReal ( check_22 - 1.0 ) < eps12 & absReal ( check_23 ) < eps12 & absReal ( check_31 ) < eps12 & absReal ( check_32 ) < eps12 & absReal ( check_33 - 1.0 ) < eps12)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12)))",
                "post_condition_unexp_ft": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12)))",
                "post_condition_SMV_pt": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12)))",
                "post_condition_SMV_ft": "((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12))))",
                "CoCoSpecCode": "H(((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) => (((((((((ridge_on and (absReal((check_11 - 1.0)) < eps12)) and (absReal(check_12) < eps12)) and (absReal(check_13) < eps12)) and (absReal(check_21) < eps12)) and (absReal((check_22 - 1.0)) < eps12)) and (absReal(check_23) < eps12)) and (absReal(check_31) < eps12)) and (absReal(check_32) < eps12)) and (absReal((check_33 - 1.0)) < eps12))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12))))",
                "ftExpanded": "(LAST V ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((det_3x3((((((B_11 * B_11) + (B_12 * B_12)) + (B_13 * B_13)) + (B_14 * B_14)) + (B_15 * B_15)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_11 * B_21) + (B_12 * B_22)) + (B_13 * B_23)) + (B_14 * B_24)) + (B_15 * B_25)),(((((B_21 * B_21) + (B_22 * B_22)) + (B_23 * B_23)) + (B_24 * B_24)) + (B_25 * B_25)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_11 * B_31) + (B_12 * B_32)) + (B_13 * B_33)) + (B_14 * B_34)) + (B_15 * B_35)),(((((B_21 * B_31) + (B_22 * B_32)) + (B_23 * B_33)) + (B_24 * B_34)) + (B_25 * B_35)),(((((B_31 * B_31) + (B_32 * B_32)) + (B_33 * B_33)) + (B_34 * B_34)) + (B_35 * B_35))) <= eps12) -> (((((((((ridge_on & (absReal((check_11 - 1.0)) < eps12)) & (absReal(check_12) < eps12)) & (absReal(check_13) < eps12)) & (absReal(check_21) < eps12)) & (absReal((check_22 - 1.0)) < eps12)) & (absReal(check_23) < eps12)) & (absReal(check_31) < eps12)) & (absReal(check_32) < eps12)) & (absReal((check_33 - 1.0)) < eps12))))",
                "component": "EB"
            },
            "_id": "c829ea5d-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-003A",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy !(Cb | Cc1 | Cc2 | Cd)  => roll_hold_reference = roll_angle",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "roll_hold",
                    "Cb",
                    "Cc1",
                    "Cc2",
                    "Cd",
                    "roll_hold_reference",
                    "roll_angle"
                ],
                "scope_mode": "roll_hold",
                "scopeTextRange": [
                    0,
                    16
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    18,
                    30
                ],
                "timingTextRange": [
                    38,
                    48
                ],
                "post_condition": "(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)",
                "responseTextRange": [
                    50,
                    116
                ],
                "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg",
                "scope_mode_pt": "roll_hold",
                "scope_mode_ft": "roll_hold",
                "post_condition_unexp_pt": "((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))",
                "post_condition_unexp_ft": "((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))",
                "post_condition_SMV_pt": "((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))",
                "post_condition_SMV_ft": "((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X $post_condition_unexp_ft$))) & ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "((LAST V ((! (Fin_roll_hold & (! LAST))) | (X ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))) & (roll_hold -> ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))",
                "pt_fetched": "(H (Fin_$scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (Fin_roll_hold -> ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))",
                "ptExpanded_fetched": "(H (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((roll_hold & (Z (! roll_hold))) -> ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))",
                "CoCoSpecCode": "H(((roll_hold and ZtoPre(not (roll_hold))) => (not ((((Cb or Cc1) or Cc2) or Cd)) => (roll_hold_reference = roll_angle))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! roll_hold) & (! LAST)) & (X roll_hold)) & (! LAST))) | (X ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))) & (roll_hold -> ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))",
                "ftExpanded": "((LAST V ((! ((((! roll_hold) & (! LAST)) & (X roll_hold)) & (! LAST))) | (X ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))) & (roll_hold -> ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G ((! ((! roll_hold) & (X roll_hold))) | (X ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))) & (roll_hold -> ((! (((Cb | Cc1) | Cc2) | Cd)) -> (roll_hold_reference = roll_angle))))",
                "component": "RollAutopilot"
            },
            "_id": "c829ea5e-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-005",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
            "fulltext": "FSM_Autopilot shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
                "responseTextRange": [
                    27,
                    97
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state))",
                "post_condition_unexp_ft": "(((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state))",
                "post_condition_SMV_pt": "(((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state))",
                "post_condition_SMV_ft": "(((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state)))",
                "CoCoSpecCode": "H((((state = ap_nominal_state) and standby) => (STATE = ap_standby_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state)))",
                "ftExpanded": "(LAST V (((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((state = ap_nominal_state) & standby) -> (STATE = ap_standby_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea5f-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "SWIM-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "2.\tWhen a low speed warning is allowed, as computed by the SWIM Airspeed algorithm, a low speed warning shall be true when the vehicle air data impact pressure is less than the warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished where:\n\nThe warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished is computed as\n\nSWIM_Qcmin_lbspft2 = [(-2.0906 + 0.020306*Auto GCAS Minimum Vcas) + 0.1] * (70.7184 (lbspft2/in Hg))",
            "comments": "Originally:\n\nSWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)\n\nwhere\n\nvar E_SWIM_WARNING_ON : real = 1.0;\nvar lowSpeedWarningTrue : bool = swimGet_AgcasLowSpeedWarn =\nE_SWIM_WARNING_ON ;",
            "fulltext": "SWIM shall always satisfy ((lowSpeedWarningAllowed = 1.0  & vehAirPress < warningTrigForMinPress) => swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "lowSpeedWarningAllowed",
                    "vehAirPress",
                    "warningTrigForMinPress",
                    "swimGet_AgcasLowSpeedWarn",
                    "E_SWIM_WARNING_ON"
                ],
                "component_name": "SWIM",
                "componentTextRange": [
                    0,
                    3
                ],
                "timingTextRange": [
                    11,
                    16
                ],
                "post_condition": "(( ( lowSpeedWarningAllowed = 1.0 & vehAirPress < warningTrigForMinPress ) => swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON ))",
                "responseTextRange": [
                    18,
                    146
                ],
                "diagramVariables": "Response = <b><i>(( ( lowSpeedWarningAllowed = 1.0 & vehAirPress < warningTrigForMinPress ) => swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON))",
                "post_condition_unexp_ft": "(((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON))",
                "post_condition_SMV_pt": "(((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON))",
                "post_condition_SMV_ft": "(((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON))",
                "ft": "(LAST V (((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)))",
                "pt": "(H (((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)))",
                "ptExpanded": "(H (((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)))",
                "CoCoSpecCode": "H((((lowSpeedWarningAllowed = 1.0) and (vehAirPress < warningTrigForMinPress)) => (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)))",
                "ftExpanded": "(LAST V (((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)))",
                "ftInfAUExpanded": "(G (((lowSpeedWarningAllowed = 1.0) & (vehAirPress < warningTrigForMinPress)) -> (swimGet_AgcasLowSpeedWarn = E_SWIM_WARNING_ON)))",
                "component": "SWIM"
            },
            "_id": "c829ea60-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TSM-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
            "comments": "Originally:\n\nTriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)\n\nwhere\n\nC1: bool = abs (ia - ib) > Tlevel ;\nC2: bool = abs (ib - ic) > Tlevel ;\nC3: bool = abs (ia - ic) > Tlevel ;\nmiscompare : bool = (not C1 and C2 and C3) or (C1 and not C2 and C3) or (C1 and C2 and not C3);\nfailure_must_be_latched : bool = miscompare and prePC > PCLimit;\nsingle_fail_reported : bool = (FC =1) or (FC =2) or (FC =4);\n\n\nTriplexSignalMonitor shall always satisfy ((preBool(true, no_fail) & (((!((absReal(ia - ib) > Tlevel)) & (absReal(ib - ic) > Tlevel) & (absReal(ia - ic) > Tlevel)) | ((absReal(ia - ib) > Tlevel) & !(absReal(ib - ic) > Tlevel) & (absReal(ia - ic) > Tlevel)) | ((absReal(ia - ib) > Tlevel) & (absReal(ib - ic) > Tlevel) & !(absReal(ia - ic) > Tlevel))) & preInt(0, PC) > PCLimit)) => single_fail_reported)",
            "fulltext": "TriplexSignalMonitor shall always satisfy ((preBool(true, no_fail) & (((!((absReal(ia - ib) > Tlevel)) & (absReal(ib - ic) > Tlevel) & (absReal(ia - ic) > Tlevel)) | ((absReal(ia - ib) > Tlevel) & !(absReal(ib - ic) > Tlevel) & (absReal(ia - ic) > Tlevel)) | ((absReal(ia - ib) > Tlevel) & (absReal(ib - ic) > Tlevel) & !(absReal(ia - ic) > Tlevel))) & preInt(0, PC) > PCLimit)) => single_fail_reported)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "no_fail",
                    "ia",
                    "ib",
                    "Tlevel",
                    "ic",
                    "PC",
                    "PCLimit",
                    "single_fail_reported"
                ],
                "component_name": "TriplexSignalMonitor",
                "componentTextRange": [
                    0,
                    19
                ],
                "timingTextRange": [
                    27,
                    32
                ],
                "post_condition": "(( ( preBool ( true , no_fail ) & ( ( ( ! ( ( absReal ( ia - ib ) > Tlevel ) ) & ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ! ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ( absReal ( ib - ic ) > Tlevel ) & ! ( absReal ( ia - ic ) > Tlevel ) ) ) & preInt ( 0 , PC ) > PCLimit ) ) => single_fail_reported ))",
                "responseTextRange": [
                    34,
                    402
                ],
                "diagramVariables": "Response = <b><i>(( ( preBool ( true , no_fail ) & ( ( ( ! ( ( absReal ( ia - ib ) > Tlevel ) ) & ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ! ( absReal ( ib - ic ) > Tlevel ) & ( absReal ( ia - ic ) > Tlevel ) ) | ( ( absReal ( ia - ib ) > Tlevel ) & ( absReal ( ib - ic ) > Tlevel ) & ! ( absReal ( ia - ic ) > Tlevel ) ) ) & preInt ( 0 , PC ) > PCLimit ) ) => single_fail_reported ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((((! (Y TRUE)) & TRUE) | ((! (! (Y TRUE))) & (Y no_fail))) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported)",
                "post_condition_unexp_ft": "((preBool(TRUE,no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported)",
                "post_condition_SMV_pt": "(((((! (Y TRUE)) & TRUE) | ((! (! (Y TRUE))) & (Y no_fail))) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported)",
                "post_condition_SMV_ft": "((preBool(TRUE,no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((preBool(TRUE,no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((((! (Y TRUE)) & TRUE) | ((! (! (Y TRUE))) & (Y no_fail))) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((Z no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported))",
                "CoCoSpecCode": "H(((ZtoPre(no_fail) and (((((not ((absReal((ia - ib)) > Tlevel)) and (absReal((ib - ic)) > Tlevel)) and (absReal((ia - ic)) > Tlevel)) or (((absReal((ia - ib)) > Tlevel) and not ((absReal((ib - ic)) > Tlevel))) and (absReal((ia - ic)) > Tlevel))) or (((absReal((ia - ib)) > Tlevel) and (absReal((ib - ic)) > Tlevel)) and not ((absReal((ia - ic)) > Tlevel)))) and (preInt(0,PC) > PCLimit))) => single_fail_reported))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((preBool(TRUE,no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported))",
                "ftExpanded": "(LAST V ((preBool(TRUE,no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((preBool(TRUE,no_fail) & ((((((! (absReal((ia - ib)) > Tlevel)) & (absReal((ib - ic)) > Tlevel)) & (absReal((ia - ic)) > Tlevel)) | (((absReal((ia - ib)) > Tlevel) & (! (absReal((ib - ic)) > Tlevel))) & (absReal((ia - ic)) > Tlevel))) | (((absReal((ia - ib)) > Tlevel) & (absReal((ib - ic)) > Tlevel)) & (! (absReal((ia - ic)) > Tlevel)))) & (preInt(0,PC) > PCLimit))) -> single_fail_reported))",
                "component": "TriplexSignalMonitor"
            },
            "_id": "c829ea61-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TUI-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "BL",
                    "IC",
                    "TL",
                    "RESET",
                    "yout"
                ],
                "component_name": "Tustin_Integrator",
                "componentTextRange": [
                    0,
                    16
                ],
                "timingTextRange": [
                    24,
                    29
                ],
                "post_condition": "(( BL <= IC & IC <= TL & RESET ) => yout = IC)",
                "responseTextRange": [
                    31,
                    81
                ],
                "diagramVariables": "Response = <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC))",
                "post_condition_unexp_ft": "((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC))",
                "post_condition_SMV_pt": "((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC))",
                "post_condition_SMV_ft": "((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC)))",
                "CoCoSpecCode": "H(((((BL <= IC) and (IC <= TL)) and RESET) => (yout = IC)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC)))",
                "ftExpanded": "(LAST V ((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((BL <= IC) & (IC <= TL)) & RESET) -> (yout = IC)))",
                "component": "Tustin_Integrator"
            },
            "_id": "c829ea62-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EB-004",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nEB shall always satisfy Buminusd_norm<0.0001",
            "fulltext": "EB shall always satisfy (Buminusd_1 * Buminusd_1 + Buminusd_2 * Buminusd_2 + Buminusd_3 * Buminusd_3) < 0.0001",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "Buminusd_1",
                    "Buminusd_2",
                    "Buminusd_3"
                ],
                "component_name": "EB",
                "componentTextRange": [
                    0,
                    1
                ],
                "timingTextRange": [
                    9,
                    14
                ],
                "post_condition": "(( Buminusd_1 * Buminusd_1 + Buminusd_2 * Buminusd_2 + Buminusd_3 * Buminusd_3 ) < 0.0001)",
                "responseTextRange": [
                    16,
                    109
                ],
                "diagramVariables": "Response = <b><i>(( Buminusd_1 * Buminusd_1 + Buminusd_2 * Buminusd_2 + Buminusd_3 * Buminusd_3 ) < 0.0001)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001)",
                "post_condition_unexp_ft": "((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001)",
                "post_condition_SMV_pt": "((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001)",
                "post_condition_SMV_ft": "((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "CoCoSpecCode": "H(((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "ftExpanded": "(LAST V ((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((Buminusd_1 * Buminusd_1) + (Buminusd_2 * Buminusd_2)) + (Buminusd_3 * Buminusd_3)) < 0.0001))",
                "component": "EB"
            },
            "_id": "c829ea63-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NN-003B",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "for",
                "response": "satisfaction",
                "variables": [
                    "DeltaZDividedByYt"
                ],
                "component_name": "NN",
                "componentTextRange": [
                    0,
                    1
                ],
                "duration": "200",
                "timingTextRange": [
                    9,
                    20
                ],
                "post_condition": "(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)",
                "responseTextRange": [
                    22,
                    83
                ],
                "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))",
                "post_condition_unexp_ft": "((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))",
                "post_condition_SMV_pt": "((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))",
                "post_condition_SMV_ft": "((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))",
                "ft_fetched": "((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))",
                "ft": "((G[<=200] ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))) | (LAST V ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))))",
                "pt_fetched": "(H ((O[<=$duration$] FTP) -> $post_condition_unexp_pt$))",
                "pt": "(H ((O[<=200] FTP) -> ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))))",
                "ptExpanded_fetched": "(H ((O[<=$duration$] (! (Y TRUE))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((O[0,200] (! (Y TRUE))) -> ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))))",
                "CoCoSpecCode": "H((OT(200, 0, not (YtoPre(true))) => ((DeltaZDividedByYt <= 10.0) and (DeltaZDividedByYt >= -35.0))))",
                "ftExpanded_fetched": "((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((G[0,200] ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))) | (LAST V ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))))",
                "ftExpanded": "((G[0,200] ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))) | (LAST V ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))))",
                "ftInfAUExpanded_fetched": "((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G[0,200] ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))) | (G ((DeltaZDividedByYt <= 10.0) & (DeltaZDividedByYt >= -35.0))))",
                "component": "NN"
            },
            "_id": "c829ea64-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-003",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
                "responseTextRange": [
                    27,
                    110
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state))",
                "post_condition_unexp_ft": "((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state))",
                "post_condition_SMV_pt": "((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state))",
                "post_condition_SMV_ft": "((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state)))",
                "CoCoSpecCode": "H(((((state = ap_transition_state) and good) and supported) => (STATE = ap_nominal_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state)))",
                "ftExpanded": "(LAST V ((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((state = ap_transition_state) & good) & supported) -> (STATE = ap_nominal_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea65-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-008v1",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
            "fulltext": " FSM_Autopilot shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
                "responseTextRange": [
                    27,
                    102
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state))",
                "post_condition_unexp_ft": "(((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state))",
                "post_condition_SMV_pt": "(((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state))",
                "post_condition_SMV_ft": "(((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state)))",
                "CoCoSpecCode": "H((((state = ap_standby_state) and not (standby)) => (STATE = ap_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state)))",
                "ftExpanded": "(LAST V (((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((state = ap_standby_state) & (! standby)) -> (STATE = ap_transition_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea66-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-011v1",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
            "fulltext": "FSM_Sensor shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "component_name": "FSM_Sensor",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
                "responseTextRange": [
                    25,
                    108
                ],
                "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state))",
                "post_condition_unexp_ft": "(((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_pt": "(((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_ft": "(((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state)))",
                "CoCoSpecCode": "H((((senstate = sen_nominal_state) and not (request)) => (SENSTATE = sen_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state)))",
                "ftExpanded": "(LAST V (((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((senstate = sen_nominal_state) & (! request)) -> (SENSTATE = sen_transition_state)))",
                "component": "FSM_Sensor"
            },
            "_id": "c829ea67-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-010b",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "when in hdg mode Autopilot shall always satisfy (roll_angle - roll_cmd - rollAtZero)/(roll_cmd - rollAtZero) <= 0.1",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "hdg",
                    "roll_angle",
                    "roll_cmd",
                    "rollAtZero"
                ],
                "scope_mode": "hdg",
                "scopeTextRange": [
                    0,
                    15
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    17,
                    25
                ],
                "timingTextRange": [
                    33,
                    38
                ],
                "post_condition": "(( roll_angle - roll_cmd - rollAtZero ) / ( roll_cmd - rollAtZero ) <= 0.1)",
                "responseTextRange": [
                    40,
                    114
                ],
                "diagramVariables": "M = <b><i>hdg</i></b>, Response = <b><i>(( roll_angle - roll_cmd - rollAtZero ) / ( roll_cmd - rollAtZero ) <= 0.1)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>hdg</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
                "scope_mode_pt": "hdg",
                "scope_mode_ft": "hdg",
                "post_condition_unexp_pt": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "post_condition_unexp_ft": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "post_condition_SMV_pt": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "post_condition_SMV_ft": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V (hdg -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (hdg -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H (hdg -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "CoCoSpecCode": "H((hdg => ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (hdg -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ftExpanded": "(LAST V (hdg -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (hdg -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "component": "Autopilot"
            },
            "_id": "c829ea68-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-002C",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Euler shall always satisfy Vb_3 = Vi_1 * DCM321_31 + Vi_2 * DCM321_32 + Vi_3 * DCM321_33",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "Vb_3",
                    "Vi_1",
                    "DCM321_31",
                    "Vi_2",
                    "DCM321_32",
                    "Vi_3",
                    "DCM321_33"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(Vb_3 = Vi_1 * DCM321_31 + Vi_2 * DCM321_32 + Vi_3 * DCM321_33)",
                "responseTextRange": [
                    19,
                    87
                ],
                "diagramVariables": "Response = <b><i>(Vb_3 = Vi_1 * DCM321_31 + Vi_2 * DCM321_32 + Vi_3 * DCM321_33)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33)))",
                "post_condition_unexp_ft": "(Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33)))",
                "post_condition_SMV_pt": "(Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33)))",
                "post_condition_SMV_ft": "(Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "CoCoSpecCode": "H((Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "ftExpanded": "(LAST V (Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (Vb_3 = (((Vi_1 * DCM321_31) + (Vi_2 * DCM321_32)) + (Vi_3 * DCM321_33))))",
                "component": "Euler"
            },
            "_id": "c829ea69-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-004",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
            "fulltext": "Regulator shall never satisfy persisted(100,xcvdt_cmd_fcs_fps2 > 32.0)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "never",
                "response": "satisfaction",
                "variables": [
                    "xcvdt_cmd_fcs_fps2"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    20
                ],
                "post_condition": "(persisted ( 100 , xcvdt_cmd_fcs_fps2 > 32.0 ))",
                "responseTextRange": [
                    22,
                    69
                ],
                "diagramVariables": "Response = <b><i>(persisted ( 100 , xcvdt_cmd_fcs_fps2 > 32.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((H[<=100] (xcvdt_cmd_fcs_fps2 > 32.0)) & (H[<100] (! FTP)))",
                "post_condition_unexp_ft": "persisted(100,(xcvdt_cmd_fcs_fps2 > 32.0))",
                "post_condition_SMV_pt": "((H[<=100] (xcvdt_cmd_fcs_fps2 > 32.0)) & (H[<100] (! (!(Y TRUE)))))",
                "post_condition_SMV_ft": "persisted(100,(xcvdt_cmd_fcs_fps2 > 32.0))",
                "ft_fetched": "(LAST V (! $post_condition_unexp_ft$))",
                "ft": "(LAST V (! persisted(100,(xcvdt_cmd_fcs_fps2 > 32.0))))",
                "pt_fetched": "(H (! $post_condition_unexp_pt$))",
                "pt": "(H (! ((H[<=100] (xcvdt_cmd_fcs_fps2 > 32.0)) & (H[<100] (! FTP)))))",
                "ptExpanded_fetched": "(H (! $post_condition_SMV_pt$))",
                "ptExpanded": "(H (! ((H[0,100] (xcvdt_cmd_fcs_fps2 > 32.0)) & (H[0,99] (Y TRUE)))))",
                "CoCoSpecCode": "H(not ((HT(100, 0, (xcvdt_cmd_fcs_fps2 > 32.0)) and HT(99, 0, YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V (! $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (! persisted(100,(xcvdt_cmd_fcs_fps2 > 32.0))))",
                "ftExpanded": "(LAST V (! persisted(100,(xcvdt_cmd_fcs_fps2 > 32.0))))",
                "ftInfAUExpanded_fetched": "(G (! $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (! persisted(100,(xcvdt_cmd_fcs_fps2 > 32.0))))",
                "component": "Regulator"
            },
            "_id": "c829ea6a-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
            "fulltext": "Regulator shall never satisfy persisted(100,lcvdt_cmd_fcs_dps2 > 50.0) ",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "never",
                "response": "satisfaction",
                "variables": [
                    "lcvdt_cmd_fcs_dps2"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    20
                ],
                "post_condition": "(persisted ( 100 , lcvdt_cmd_fcs_dps2 > 50.0 ))",
                "responseTextRange": [
                    22,
                    69
                ],
                "diagramVariables": "Response = <b><i>(persisted ( 100 , lcvdt_cmd_fcs_dps2 > 50.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((H[<=100] (lcvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! FTP)))",
                "post_condition_unexp_ft": "persisted(100,(lcvdt_cmd_fcs_dps2 > 50.0))",
                "post_condition_SMV_pt": "((H[<=100] (lcvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! (!(Y TRUE)))))",
                "post_condition_SMV_ft": "persisted(100,(lcvdt_cmd_fcs_dps2 > 50.0))",
                "ft_fetched": "(LAST V (! $post_condition_unexp_ft$))",
                "ft": "(LAST V (! persisted(100,(lcvdt_cmd_fcs_dps2 > 50.0))))",
                "pt_fetched": "(H (! $post_condition_unexp_pt$))",
                "pt": "(H (! ((H[<=100] (lcvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! FTP)))))",
                "ptExpanded_fetched": "(H (! $post_condition_SMV_pt$))",
                "ptExpanded": "(H (! ((H[0,100] (lcvdt_cmd_fcs_dps2 > 50.0)) & (H[0,99] (Y TRUE)))))",
                "CoCoSpecCode": "H(not ((HT(100, 0, (lcvdt_cmd_fcs_dps2 > 50.0)) and HT(99, 0, YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V (! $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (! persisted(100,(lcvdt_cmd_fcs_dps2 > 50.0))))",
                "ftExpanded": "(LAST V (! persisted(100,(lcvdt_cmd_fcs_dps2 > 50.0))))",
                "ftInfAUExpanded_fetched": "(G (! $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (! persisted(100,(lcvdt_cmd_fcs_dps2 > 50.0))))",
                "component": "Regulator"
            },
            "_id": "c829ea6c-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001d",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Euler shall always satisfy DCM321_21 = (- cos(phi) * sin(psi) + sin(phi) * sin(theta) * cos(psi))",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_21",
                    "cos",
                    "phi",
                    "sin",
                    "psi",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_21 = ( - cos ( phi ) * sin ( psi ) + sin ( phi ) * sin ( theta ) * cos ( psi ) ))",
                "responseTextRange": [
                    19,
                    96
                ],
                "diagramVariables": "Response = <b><i>(DCM321_21 = ( - cos ( phi ) * sin ( psi ) + sin ( phi ) * sin ( theta ) * cos ( psi ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi))))",
                "post_condition_unexp_ft": "(DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi))))",
                "post_condition_SMV_pt": "(DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi))))",
                "post_condition_SMV_ft": "(DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "CoCoSpecCode": "H((DCM321_21 = ((-(cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "ftExpanded": "(LAST V (DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_21 = (((- cos(phi)) * sin(psi)) + ((sin(phi) * sin(theta)) * cos(psi)))))",
                "component": "Euler"
            },
            "_id": "c829ea6d-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-001v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\nif autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup\n",
            "fulltext": "if autopilot & preBool(false,autopilot) & preBool(false,limits) FSM shall immediately satisfy pullup",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "autopilot",
                    "limits",
                    "pullup"
                ],
                "qualifier_word": "if",
                "pre_condition": "(autopilot & preBool ( false , autopilot ) & preBool ( false , limits ))",
                "regular_condition": "(autopilot & preBool ( false , autopilot ) & preBool ( false , limits ))",
                "conditionTextRange": [
                    0,
                    62
                ],
                "component_name": "FSM",
                "componentTextRange": [
                    64,
                    66
                ],
                "timingTextRange": [
                    74,
                    84
                ],
                "post_condition": "(pullup)",
                "responseTextRange": [
                    86,
                    99
                ],
                "diagramVariables": "TC = <b><i>(autopilot & preBool ( false , autopilot ) & preBool ( false , limits ))</i></b>, Response = <b><i>(pullup)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(autopilot & preBool ( false , autopilot ) & preBool ( false , limits ))</i></b> is true and any point in the interval where <b><i>(autopilot & preBool ( false , autopilot ) & preBool ( false , limits ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((autopilot & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y autopilot)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits))))",
                "regular_condition_unexp_ft": "((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))",
                "regular_condition_SMV_pt": "((autopilot & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y autopilot)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits))))",
                "regular_condition_SMV_ft": "((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))",
                "post_condition_unexp_pt": "pullup",
                "post_condition_unexp_ft": "pullup",
                "post_condition_SMV_pt": "pullup",
                "post_condition_SMV_ft": "pullup",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
                "ft": "((LAST V (((! ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))) & ((! LAST) & (X ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))))) -> (X pullup))) & (((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits)) -> pullup))",
                "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
                "pt": "(H ((((autopilot & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y autopilot)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits)))) & ((Y (! ((autopilot & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y autopilot)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits)))))) | FTP)) -> pullup))",
                "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((((autopilot & (Y autopilot)) & (Y limits)) & (Z (! ((autopilot & (Y autopilot)) & (Y limits))))) -> pullup))",
                "CoCoSpecCode": "H(((((autopilot and YtoPre(autopilot)) and YtoPre(limits)) and ZtoPre(not (((autopilot and YtoPre(autopilot)) and YtoPre(limits))))) => pullup))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((LAST V (((! ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))) & ((! LAST) & (X ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))))) -> (X pullup))) & (((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits)) -> pullup))",
                "ftExpanded": "((LAST V (((! ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))) & ((! LAST) & (X ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))))) -> (X pullup))) & (((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits)) -> pullup))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G (((! ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits))) & (X ((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits)))) -> (X pullup))) & (((autopilot & preBool(FALSE,autopilot)) & preBool(FALSE,limits)) -> pullup))",
                "component": "FSM"
            },
            "_id": "c829ea6e-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TSM-003b",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "FC",
                    "set_val",
                    "ia",
                    "ic"
                ],
                "component_name": "TriplexSignalMonitor",
                "componentTextRange": [
                    0,
                    19
                ],
                "timingTextRange": [
                    27,
                    32
                ],
                "post_condition": "(FC = 2 => set_val = 0.5 * ( ia + ic ))",
                "responseTextRange": [
                    34,
                    75
                ],
                "diagramVariables": "Response = <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((FC = 2) -> (set_val = (0.5 * (ia + ic))))",
                "post_condition_unexp_ft": "((FC = 2) -> (set_val = (0.5 * (ia + ic))))",
                "post_condition_SMV_pt": "((FC = 2) -> (set_val = (0.5 * (ia + ic))))",
                "post_condition_SMV_ft": "((FC = 2) -> (set_val = (0.5 * (ia + ic))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((FC = 2) -> (set_val = (0.5 * (ia + ic)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((FC = 2) -> (set_val = (0.5 * (ia + ic)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((FC = 2) -> (set_val = (0.5 * (ia + ic)))))",
                "CoCoSpecCode": "H(((FC = 2) => (set_val = (0.5 * (ia + ic)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((FC = 2) -> (set_val = (0.5 * (ia + ic)))))",
                "ftExpanded": "(LAST V ((FC = 2) -> (set_val = (0.5 * (ia + ic)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((FC = 2) -> (set_val = (0.5 * (ia + ic)))))",
                "component": "TriplexSignalMonitor"
            },
            "_id": "c829ea6f-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-006",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Roll Regulator Shall not command transient changes in angular roll acceleration greater than 50 deg/sec2/sec.",
            "fulltext": "Regulator shall always satisfy roll_command_acceleration <= 50.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "roll_command_acceleration"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(roll_command_acceleration <= 50.0)",
                "responseTextRange": [
                    23,
                    63
                ],
                "diagramVariables": "Response = <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(roll_command_acceleration <= 50.0)",
                "post_condition_unexp_ft": "(roll_command_acceleration <= 50.0)",
                "post_condition_SMV_pt": "(roll_command_acceleration <= 50.0)",
                "post_condition_SMV_ft": "(roll_command_acceleration <= 50.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (roll_command_acceleration <= 50.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (roll_command_acceleration <= 50.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (roll_command_acceleration <= 50.0))",
                "CoCoSpecCode": "H((roll_command_acceleration <= 50.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (roll_command_acceleration <= 50.0))",
                "ftExpanded": "(LAST V (roll_command_acceleration <= 50.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (roll_command_acceleration <= 50.0))",
                "component": "Regulator"
            },
            "_id": "c829ea70-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-009",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
                "responseTextRange": [
                    27,
                    98
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state))",
                "post_condition_unexp_ft": "(((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state))",
                "post_condition_SMV_pt": "(((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state))",
                "post_condition_SMV_ft": "(((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state)))",
                "CoCoSpecCode": "H((((state = ap_standby_state) and apfail) => (STATE = ap_maneuver_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state)))",
                "ftExpanded": "(LAST V (((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((state = ap_standby_state) & apfail) -> (STATE = ap_maneuver_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea71-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-001v3",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\nif  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup\n\nif  persisted(3, autopilot)  & persisted(3,preBool(false,preBool(false,!limits)))  &  preBool(false,limits)  FSM  shall  immediately satisfy pullup\n\nI think the logic in this is off by one step in both persisted predicates",
            "fulltext": "if  persisted(3, autopilot)  & persisted(3,preBool(false,preBool(false,!limits)))  &  preBool(false,limits)  FSM  shall  immediately satisfy pullup",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "autopilot",
                    "limits",
                    "pullup"
                ],
                "qualifier_word": "if",
                "pre_condition": "(persisted ( 3 , autopilot ) & persisted ( 3 , preBool ( false , preBool ( false , ! limits ) ) ) & preBool ( false , limits ))",
                "regular_condition": "(persisted ( 3 , autopilot ) & persisted ( 3 , preBool ( false , preBool ( false , ! limits ) ) ) & preBool ( false , limits ))",
                "conditionTextRange": [
                    0,
                    106
                ],
                "component_name": "FSM",
                "componentTextRange": [
                    109,
                    111
                ],
                "timingTextRange": [
                    121,
                    131
                ],
                "post_condition": "(pullup)",
                "responseTextRange": [
                    133,
                    146
                ],
                "diagramVariables": "TC = <b><i>(persisted ( 3 , autopilot ) & persisted ( 3 , preBool ( false , preBool ( false , ! limits ) ) ) & preBool ( false , limits ))</i></b>, Response = <b><i>(pullup)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(persisted ( 3 , autopilot ) & persisted ( 3 , preBool ( false , preBool ( false , ! limits ) ) ) & preBool ( false , limits ))</i></b> is true and any point in the interval where <b><i>(persisted ( 3 , autopilot ) & persisted ( 3 , preBool ( false , preBool ( false , ! limits ) ) ) & preBool ( false , limits ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((((H[<=3] autopilot) & (H[<3] (! FTP))) & ((H[<=3] (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (! limits)))))))) & (H[<3] (! FTP)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits))))",
                "regular_condition_unexp_ft": "((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))",
                "regular_condition_SMV_pt": "((((H[<=3] autopilot) & (H[<3] (! (!(Y TRUE))))) & ((H[<=3] (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (! limits)))))))) & (H[<3] (! (!(Y TRUE)))))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits))))",
                "regular_condition_SMV_ft": "((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))",
                "post_condition_unexp_pt": "pullup",
                "post_condition_unexp_ft": "pullup",
                "post_condition_SMV_pt": "pullup",
                "post_condition_SMV_ft": "pullup",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
                "ft": "((LAST V (((! ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))) & ((! LAST) & (X ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))))) -> (X pullup))) & (((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits)) -> pullup))",
                "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
                "pt": "(H ((((((H[<=3] autopilot) & (H[<3] (! FTP))) & ((H[<=3] (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (! limits)))))))) & (H[<3] (! FTP)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits)))) & ((Y (! ((((H[<=3] autopilot) & (H[<3] (! FTP))) & ((H[<=3] (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (! limits)))))))) & (H[<3] (! FTP)))) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y limits)))))) | FTP)) -> pullup))",
                "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((((((H[0,3] autopilot) & (H[0,2] (Y TRUE))) & ((H[0,3] (Y (Y (! limits)))) & (H[0,2] (Y TRUE)))) & (Y limits)) & (Z (! ((((H[0,3] autopilot) & (H[0,2] (Y TRUE))) & ((H[0,3] (Y (Y (! limits)))) & (H[0,2] (Y TRUE)))) & (Y limits))))) -> pullup))",
                "CoCoSpecCode": "H((((((HT(3, 0, autopilot) and HT(2, 0, YtoPre(true))) and (HT(3, 0, YtoPre(YtoPre(not (limits)))) and HT(2, 0, YtoPre(true)))) and YtoPre(limits)) and ZtoPre(not ((((HT(3, 0, autopilot) and HT(2, 0, YtoPre(true))) and (HT(3, 0, YtoPre(YtoPre(not (limits)))) and HT(2, 0, YtoPre(true)))) and YtoPre(limits))))) => pullup))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((LAST V (((! ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))) & ((! LAST) & (X ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))))) -> (X pullup))) & (((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits)) -> pullup))",
                "ftExpanded": "((LAST V (((! ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))) & ((! LAST) & (X ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))))) -> (X pullup))) & (((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits)) -> pullup))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G (((! ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits))) & (X ((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits)))) -> (X pullup))) & (((persisted(3,autopilot) & persisted(3,preBool(FALSE,preBool(FALSE,(! limits))))) & preBool(FALSE,limits)) -> pullup))",
                "component": "FSM"
            },
            "_id": "c829ea72-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-005",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
            "fulltext": "Regulator shall never satisfy persisted(100,hcvdt_cmd_fcs_fps2 > 32.0)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "never",
                "response": "satisfaction",
                "variables": [
                    "hcvdt_cmd_fcs_fps2"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    20
                ],
                "post_condition": "(persisted ( 100 , hcvdt_cmd_fcs_fps2 > 32.0 ))",
                "responseTextRange": [
                    22,
                    69
                ],
                "diagramVariables": "Response = <b><i>(persisted ( 100 , hcvdt_cmd_fcs_fps2 > 32.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((H[<=100] (hcvdt_cmd_fcs_fps2 > 32.0)) & (H[<100] (! FTP)))",
                "post_condition_unexp_ft": "persisted(100,(hcvdt_cmd_fcs_fps2 > 32.0))",
                "post_condition_SMV_pt": "((H[<=100] (hcvdt_cmd_fcs_fps2 > 32.0)) & (H[<100] (! (!(Y TRUE)))))",
                "post_condition_SMV_ft": "persisted(100,(hcvdt_cmd_fcs_fps2 > 32.0))",
                "ft_fetched": "(LAST V (! $post_condition_unexp_ft$))",
                "ft": "(LAST V (! persisted(100,(hcvdt_cmd_fcs_fps2 > 32.0))))",
                "pt_fetched": "(H (! $post_condition_unexp_pt$))",
                "pt": "(H (! ((H[<=100] (hcvdt_cmd_fcs_fps2 > 32.0)) & (H[<100] (! FTP)))))",
                "ptExpanded_fetched": "(H (! $post_condition_SMV_pt$))",
                "ptExpanded": "(H (! ((H[0,100] (hcvdt_cmd_fcs_fps2 > 32.0)) & (H[0,99] (Y TRUE)))))",
                "CoCoSpecCode": "H(not ((HT(100, 0, (hcvdt_cmd_fcs_fps2 > 32.0)) and HT(99, 0, YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V (! $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (! persisted(100,(hcvdt_cmd_fcs_fps2 > 32.0))))",
                "ftExpanded": "(LAST V (! persisted(100,(hcvdt_cmd_fcs_fps2 > 32.0))))",
                "ftInfAUExpanded_fetched": "(G (! $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (! persisted(100,(hcvdt_cmd_fcs_fps2 > 32.0))))",
                "component": "Regulator"
            },
            "_id": "c829ea73-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-004v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in contronl (standby)",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
                "responseTextRange": [
                    27,
                    110
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state))",
                "post_condition_unexp_ft": "((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state))",
                "post_condition_SMV_pt": "((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state))",
                "post_condition_SMV_ft": "((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state)))",
                "CoCoSpecCode": "H(((((state = ap_nominal_state) and not (good)) and not (standby)) => (STATE = ap_maneuver_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state)))",
                "ftExpanded": "(LAST V ((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((state = ap_nominal_state) & (! good)) & (! standby)) -> (STATE = ap_maneuver_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea74-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-004a",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nwhen in roll_hold mode, when steady_state Autopilot shall always satisfy abs_roller_err <= 1.0\n\ninlining and updating predicate usage results in:\n\nwhile (autopilot_engaged & !hdg) when preBool(false, roll_angle - roll_cmd - preReal(roll_angle - roll_cmd, roll_angle - roll_cmd) <= epsilon) Autopilot shall always satisfy absReal(roll_angle - roll_cmd) <= 1.0\n\nbut the formula is too big. Furthermore, the actual CoCoSpec requirements seem to be using Kind 2's modes, which do not have the same semantics as scope.",
            "fulltext": "whenever (autopilot_engaged & !hdg) & preBool(false, roll_angle - roll_cmd - preReal(roll_angle - roll_cmd, roll_angle - roll_cmd) <= epsilon) Autopilot shall immediately satisfy absReal(roll_angle - roll_cmd) <= 1.0 ",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "noTrigger",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "autopilot_engaged",
                    "hdg",
                    "roll_angle",
                    "roll_cmd",
                    "epsilon"
                ],
                "qualifier_word": "whenever",
                "pre_condition": "(( autopilot_engaged & ! hdg ) & preBool ( false , roll_angle - roll_cmd - preReal ( roll_angle - roll_cmd , roll_angle - roll_cmd ) <= epsilon ))",
                "regular_condition": "(( autopilot_engaged & ! hdg ) & preBool ( false , roll_angle - roll_cmd - preReal ( roll_angle - roll_cmd , roll_angle - roll_cmd ) <= epsilon ))",
                "conditionTextRange": [
                    0,
                    141
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    143,
                    151
                ],
                "timingTextRange": [
                    159,
                    169
                ],
                "post_condition": "(absReal ( roll_angle - roll_cmd ) <= 1.0)",
                "responseTextRange": [
                    171,
                    215
                ],
                "diagramVariables": "CC = <b><i>(( autopilot_engaged & ! hdg ) & preBool ( false , roll_angle - roll_cmd - preReal ( roll_angle - roll_cmd , roll_angle - roll_cmd ) <= epsilon ))</i></b>, Response = <b><i>(absReal ( roll_angle - roll_cmd ) <= 1.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(( autopilot_engaged & ! hdg ) & preBool ( false , roll_angle - roll_cmd - preReal ( roll_angle - roll_cmd , roll_angle - roll_cmd ) <= epsilon ))</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((autopilot_engaged & (! hdg)) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon)))))",
                "regular_condition_unexp_ft": "((autopilot_engaged & (! hdg)) & preBool(FALSE,(((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon)))",
                "regular_condition_SMV_pt": "((autopilot_engaged & (! hdg)) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon)))))",
                "regular_condition_SMV_ft": "((autopilot_engaged & (! hdg)) & preBool(FALSE,(((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon)))",
                "post_condition_unexp_pt": "(absReal((roll_angle - roll_cmd)) <= 1.0)",
                "post_condition_unexp_ft": "(absReal((roll_angle - roll_cmd)) <= 1.0)",
                "post_condition_SMV_pt": "(absReal((roll_angle - roll_cmd)) <= 1.0)",
                "post_condition_SMV_ft": "(absReal((roll_angle - roll_cmd)) <= 1.0)",
                "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V (((autopilot_engaged & (! hdg)) & preBool(FALSE,(((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))) -> (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "pt_fetched": "(H ($regular_condition_unexp_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (((autopilot_engaged & (! hdg)) & (((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))))) -> (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "ptExpanded_fetched": "(H ($regular_condition_SMV_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H (((autopilot_engaged & (! hdg)) & (Y (((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))) -> (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "CoCoSpecCode": "H((((autopilot_engaged and not (hdg)) and YtoPre((((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))) => (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (((autopilot_engaged & (! hdg)) & preBool(FALSE,(((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))) -> (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "ftExpanded": "(LAST V (((autopilot_engaged & (! hdg)) & preBool(FALSE,(((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))) -> (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (((autopilot_engaged & (! hdg)) & preBool(FALSE,(((roll_angle - roll_cmd) - preReal((roll_angle - roll_cmd),(roll_angle - roll_cmd))) <= epsilon))) -> (absReal((roll_angle - roll_cmd)) <= 1.0)))",
                "component": "Autopilot"
            },
            "_id": "c829ea75-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-008v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
                "responseTextRange": [
                    27,
                    115
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state))",
                "post_condition_unexp_ft": "((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state))",
                "post_condition_SMV_pt": "((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state))",
                "post_condition_SMV_ft": "((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state)))",
                "CoCoSpecCode": "H(((((state = ap_standby_state) and not (standby)) and not (apfail)) => (STATE = ap_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state)))",
                "ftExpanded": "(LAST V ((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((state = ap_standby_state) & (! standby)) & (! apfail)) -> (STATE = ap_transition_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea76-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-005a",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "if mag(Xr) < r & mag(r1) < mag(r2) NLGuidance shall always satisfy yout = Xap1",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "always",
                "response": "satisfaction",
                "variables": {
                    "regular": [
                        "mag",
                        "Xr",
                        "r",
                        "r1",
                        "r2",
                        "yout",
                        "Xap1"
                    ],
                    "modes": []
                },
                "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
                "qualifier_word": "if",
                "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
                "conditionTextRange": [
                    0,
                    33
                ],
                "component_name": "NLGuidance",
                "componentTextRange": [
                    35,
                    44
                ],
                "timingTextRange": [
                    52,
                    57
                ],
                "post_condition": "(yout = Xap1)",
                "responseTextRange": [
                    59,
                    77
                ],
                "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
                "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | FTP))))))",
                "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
                "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
                "component": "<b><i>NLGuidance</i></b>",
                "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or FTP)), (yout = Xap1) ))))",
                "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap1)</i></b>.",
                "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap1)</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
            },
            "_id": "c829ea77-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-007",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Pitch Regulator Shall not command transient changes in angular pitch acceleration greater than 50 deg/sec2/sec.",
            "fulltext": "Regulator shall always satisfy pitch_command_acceleration <= 50.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "pitch_command_acceleration"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(pitch_command_acceleration <= 50.0)",
                "responseTextRange": [
                    23,
                    64
                ],
                "diagramVariables": "Response = <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(pitch_command_acceleration <= 50.0)",
                "post_condition_unexp_ft": "(pitch_command_acceleration <= 50.0)",
                "post_condition_SMV_pt": "(pitch_command_acceleration <= 50.0)",
                "post_condition_SMV_ft": "(pitch_command_acceleration <= 50.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (pitch_command_acceleration <= 50.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (pitch_command_acceleration <= 50.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (pitch_command_acceleration <= 50.0))",
                "CoCoSpecCode": "H((pitch_command_acceleration <= 50.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (pitch_command_acceleration <= 50.0))",
                "ftExpanded": "(LAST V (pitch_command_acceleration <= 50.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (pitch_command_acceleration <= 50.0))",
                "component": "Regulator"
            },
            "_id": "c829ea78-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TSM-003c",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "FC",
                    "set_val",
                    "ib",
                    "ic"
                ],
                "component_name": "TriplexSignalMonitor",
                "componentTextRange": [
                    0,
                    19
                ],
                "timingTextRange": [
                    27,
                    32
                ],
                "post_condition": "(FC = 4 => set_val = 0.5 * ( ib + ic ))",
                "responseTextRange": [
                    34,
                    74
                ],
                "diagramVariables": "Response = <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((FC = 4) -> (set_val = (0.5 * (ib + ic))))",
                "post_condition_unexp_ft": "((FC = 4) -> (set_val = (0.5 * (ib + ic))))",
                "post_condition_SMV_pt": "((FC = 4) -> (set_val = (0.5 * (ib + ic))))",
                "post_condition_SMV_ft": "((FC = 4) -> (set_val = (0.5 * (ib + ic))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((FC = 4) -> (set_val = (0.5 * (ib + ic)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((FC = 4) -> (set_val = (0.5 * (ib + ic)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((FC = 4) -> (set_val = (0.5 * (ib + ic)))))",
                "CoCoSpecCode": "H(((FC = 4) => (set_val = (0.5 * (ib + ic)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((FC = 4) -> (set_val = (0.5 * (ib + ic)))))",
                "ftExpanded": "(LAST V ((FC = 4) -> (set_val = (0.5 * (ib + ic)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((FC = 4) -> (set_val = (0.5 * (ib + ic)))))",
                "component": "TriplexSignalMonitor"
            },
            "_id": "c829ea79-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-000",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The altitude hold autopilot shall maintain altitude within 35 feet of the initial condition. ",
            "comments": "Originally:\n\nAutopilot shall always satisfy altitude_hold => absOf_alt_minus_altIC <= 35.0",
            "fulltext": "Autopilot shall always satisfy altitude_hold => absReal(altitude - altitude_IC) <= 35.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "altitude_hold",
                    "altitude",
                    "altitude_IC"
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(altitude_hold => absReal ( altitude - altitude_IC ) <= 35.0)",
                "responseTextRange": [
                    23,
                    86
                ],
                "diagramVariables": "Response = <b><i>(altitude_hold => absReal ( altitude - altitude_IC ) <= 35.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0))",
                "post_condition_unexp_ft": "(altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0))",
                "post_condition_SMV_pt": "(altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0))",
                "post_condition_SMV_ft": "(altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0)))",
                "CoCoSpecCode": "H((altitude_hold => (absReal((altitude - altitude_IC)) <= 35.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0)))",
                "ftExpanded": "(LAST V (altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (altitude_hold -> (absReal((altitude - altitude_IC)) <= 35.0)))",
                "component": "Autopilot"
            },
            "_id": "c829ea7a-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-005b",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "if mag(Xr) < r & mag(r1) >= mag(r2) NLGuidance shall always satisfy yout = Xap2",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "always",
                "response": "satisfaction",
                "variables": {
                    "regular": [
                        "mag",
                        "Xr",
                        "r",
                        "r1",
                        "r2",
                        "yout",
                        "Xap2"
                    ],
                    "modes": []
                },
                "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
                "qualifier_word": "if",
                "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
                "conditionTextRange": [
                    0,
                    34
                ],
                "component_name": "NLGuidance",
                "componentTextRange": [
                    36,
                    45
                ],
                "timingTextRange": [
                    53,
                    58
                ],
                "post_condition": "(yout = Xap2)",
                "responseTextRange": [
                    60,
                    78
                ],
                "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
                "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | FTP))))))",
                "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
                "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
                "component": "<b><i>NLGuidance</i></b>",
                "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or FTP)), (yout = Xap2) ))))",
                "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap2)</i></b>.",
                "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap2)</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
            },
            "_id": "c829ea7b-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-002A",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Body Vector Output, Vb, of this Function Shall Equal a 3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input Inertial Vector, Vi.",
            "fulltext": "Euler shall always satisfy Vb_1 = Vi_1 * DCM321_11 + Vi_2 * DCM321_12 + Vi_3 * DCM321_13",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "Vb_1",
                    "Vi_1",
                    "DCM321_11",
                    "Vi_2",
                    "DCM321_12",
                    "Vi_3",
                    "DCM321_13"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(Vb_1 = Vi_1 * DCM321_11 + Vi_2 * DCM321_12 + Vi_3 * DCM321_13)",
                "responseTextRange": [
                    19,
                    87
                ],
                "diagramVariables": "Response = <b><i>(Vb_1 = Vi_1 * DCM321_11 + Vi_2 * DCM321_12 + Vi_3 * DCM321_13)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13)))",
                "post_condition_unexp_ft": "(Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13)))",
                "post_condition_SMV_pt": "(Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13)))",
                "post_condition_SMV_ft": "(Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "CoCoSpecCode": "H((Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "ftExpanded": "(LAST V (Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (Vb_1 = (((Vi_1 * DCM321_11) + (Vi_2 * DCM321_12)) + (Vi_3 * DCM321_13))))",
                "component": "Euler"
            },
            "_id": "c829ea7c-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-004b",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nwhen in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1",
            "fulltext": "while (autopilot_engaged & !hdg) Autopilot shall always satisfy (roll_angle - roll_cmd - rollAtZero)/(roll_cmd - rollAtZero) <= 0.1",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "autopilot_engaged",
                    "hdg",
                    "roll_angle",
                    "roll_cmd",
                    "rollAtZero"
                ],
                "scope_mode": "(( autopilot_engaged & ! hdg ))",
                "scopeTextRange": [
                    0,
                    31
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    33,
                    41
                ],
                "timingTextRange": [
                    49,
                    54
                ],
                "post_condition": "(( roll_angle - roll_cmd - rollAtZero ) / ( roll_cmd - rollAtZero ) <= 0.1)",
                "responseTextRange": [
                    56,
                    130
                ],
                "diagramVariables": "M = <b><i>(( autopilot_engaged & ! hdg ))</i></b>, Response = <b><i>(( roll_angle - roll_cmd - rollAtZero ) / ( roll_cmd - rollAtZero ) <= 0.1)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>(( autopilot_engaged & ! hdg ))</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
                "scope_mode_pt": "(autopilot_engaged & (! hdg))",
                "scope_mode_ft": "(autopilot_engaged & (! hdg))",
                "post_condition_unexp_pt": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "post_condition_unexp_ft": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "post_condition_SMV_pt": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "post_condition_SMV_ft": "((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)",
                "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V ((autopilot_engaged & (! hdg)) -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H ((autopilot_engaged & (! hdg)) -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((autopilot_engaged & (! hdg)) -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "CoCoSpecCode": "H(((autopilot_engaged and not (hdg)) => ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V ((autopilot_engaged & (! hdg)) -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ftExpanded": "(LAST V ((autopilot_engaged & (! hdg)) -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G ((autopilot_engaged & (! hdg)) -> ((((roll_angle - roll_cmd) - rollAtZero) / (roll_cmd - rollAtZero)) <= 0.1)))",
                "component": "Autopilot"
            },
            "_id": "c829ea7d-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-008",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Yaw Regulator Shall not command transient changes in angular yaw acceleration greater than 50 deg/sec2/sec.",
            "fulltext": "Regulator shall always satisfy yaw_command_acceleration <= 50.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "yaw_command_acceleration"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(yaw_command_acceleration <= 50.0)",
                "responseTextRange": [
                    23,
                    62
                ],
                "diagramVariables": "Response = <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(yaw_command_acceleration <= 50.0)",
                "post_condition_unexp_ft": "(yaw_command_acceleration <= 50.0)",
                "post_condition_SMV_pt": "(yaw_command_acceleration <= 50.0)",
                "post_condition_SMV_ft": "(yaw_command_acceleration <= 50.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (yaw_command_acceleration <= 50.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (yaw_command_acceleration <= 50.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (yaw_command_acceleration <= 50.0))",
                "CoCoSpecCode": "H((yaw_command_acceleration <= 50.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (yaw_command_acceleration <= 50.0))",
                "ftExpanded": "(LAST V (yaw_command_acceleration <= 50.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (yaw_command_acceleration <= 50.0))",
                "component": "Regulator"
            },
            "_id": "c829ea7e-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NN-003A",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "3.\tUsing a first order finite backward difference equation, the spatial derivatives of Δz/ Δxt = (z(n,1)-z(n-1))/(xt(n,1)-xt(n-1,1) and Δz/ Δyt = (z(n,1)-z(n-1))/(yt(n,1)-yt(n-1,1) shall never exceed a top bound of +10 or bottom bound of -35 (e.g. -35 <= Δz/ Δ(xt,yt) <= 10), where n denotes an index to the current values and n-1 denotes the prior values in the included truth data for xt and yt.    ",
            "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "for",
                "response": "satisfaction",
                "variables": [
                    "DeltaZDividedByXt"
                ],
                "component_name": "NN",
                "componentTextRange": [
                    0,
                    1
                ],
                "duration": "200",
                "timingTextRange": [
                    9,
                    20
                ],
                "post_condition": "(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)",
                "responseTextRange": [
                    22,
                    82
                ],
                "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))",
                "post_condition_unexp_ft": "((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))",
                "post_condition_SMV_pt": "((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))",
                "post_condition_SMV_ft": "((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))",
                "ft_fetched": "((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))",
                "ft": "((G[<=200] ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))) | (LAST V ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))))",
                "pt_fetched": "(H ((O[<=$duration$] FTP) -> $post_condition_unexp_pt$))",
                "pt": "(H ((O[<=200] FTP) -> ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))))",
                "ptExpanded_fetched": "(H ((O[<=$duration$] (! (Y TRUE))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((O[0,200] (! (Y TRUE))) -> ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))))",
                "CoCoSpecCode": "H((OT(200, 0, not (YtoPre(true))) => ((DeltaZDividedByXt <= 10.0) and (DeltaZDividedByXt >= -35.0))))",
                "ftExpanded_fetched": "((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((G[0,200] ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))) | (LAST V ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))))",
                "ftExpanded": "((G[0,200] ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))) | (LAST V ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))))",
                "ftInfAUExpanded_fetched": "((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G[0,200] ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))) | (G ((DeltaZDividedByXt <= 10.0) & (DeltaZDividedByXt >= -35.0))))",
                "component": "NN"
            },
            "_id": "c829ea7f-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TUI-003",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nTustin_Integrator shall always satisfy normal => yout = normal_yout\n\nwhere\n\nnormal_yout = T * 0.5 * ( xin + xinpv ) + ypv\n\nFurthermore, T cannot be used as a variable in FRET. Renamed to timeStep",
            "fulltext": "Tustin_Integrator shall always satisfy normal => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "normal",
                    "yout",
                    "timeStep",
                    "xin",
                    "xinpv",
                    "ypv"
                ],
                "component_name": "Tustin_Integrator",
                "componentTextRange": [
                    0,
                    16
                ],
                "timingTextRange": [
                    24,
                    29
                ],
                "post_condition": "(normal => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv)",
                "responseTextRange": [
                    31,
                    93
                ],
                "diagramVariables": "Response = <b><i>(normal => yout = timeStep * 0.5 * ( xin + xinpv ) + ypv)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_unexp_ft": "(normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_SMV_pt": "(normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "post_condition_SMV_ft": "(normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "CoCoSpecCode": "H((normal => (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftExpanded": "(LAST V (normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (normal -> (yout = (((timeStep * 0.5) * (xin + xinpv)) + ypv))))",
                "component": "Tustin_Integrator"
            },
            "_id": "c829ea80-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-005",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nAutopilot shall always satisfy  abs_roll_rate <= 6.6",
            "fulltext": "Autopilot shall always satisfy  absReal(roll_rate) <= 6.6",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "roll_rate"
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(absReal ( roll_rate ) <= 6.6)",
                "responseTextRange": [
                    23,
                    56
                ],
                "diagramVariables": "Response = <b><i>(absReal ( roll_rate ) <= 6.6)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(absReal(roll_rate) <= 6.6)",
                "post_condition_unexp_ft": "(absReal(roll_rate) <= 6.6)",
                "post_condition_SMV_pt": "(absReal(roll_rate) <= 6.6)",
                "post_condition_SMV_ft": "(absReal(roll_rate) <= 6.6)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (absReal(roll_rate) <= 6.6))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (absReal(roll_rate) <= 6.6))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (absReal(roll_rate) <= 6.6))",
                "CoCoSpecCode": "H((absReal(roll_rate) <= 6.6))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (absReal(roll_rate) <= 6.6))",
                "ftExpanded": "(LAST V (absReal(roll_rate) <= 6.6))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (absReal(roll_rate) <= 6.6))",
                "component": "Autopilot"
            },
            "_id": "c829ea81-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001F",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nEuler shall always satisfy DCM321_23 = SinPhi * CosTheta",
            "fulltext": "Euler shall always satisfy DCM321_23 = sin(phi) * cos(theta)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_23",
                    "sin",
                    "phi",
                    "cos",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_23 = sin ( phi ) * cos ( theta ))",
                "responseTextRange": [
                    19,
                    59
                ],
                "diagramVariables": "Response = <b><i>(DCM321_23 = sin ( phi ) * cos ( theta ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_23 = (sin(phi) * cos(theta)))",
                "post_condition_unexp_ft": "(DCM321_23 = (sin(phi) * cos(theta)))",
                "post_condition_SMV_pt": "(DCM321_23 = (sin(phi) * cos(theta)))",
                "post_condition_SMV_ft": "(DCM321_23 = (sin(phi) * cos(theta)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_23 = (sin(phi) * cos(theta))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_23 = (sin(phi) * cos(theta))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_23 = (sin(phi) * cos(theta))))",
                "CoCoSpecCode": "H((DCM321_23 = (sin(phi) * cos(theta))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_23 = (sin(phi) * cos(theta))))",
                "ftExpanded": "(LAST V (DCM321_23 = (sin(phi) * cos(theta))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_23 = (sin(phi) * cos(theta))))",
                "component": "Euler"
            },
            "_id": "c829ea82-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-012",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
            "fulltext": "FSM_Sensor shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "component_name": "FSM_Sensor",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
                "responseTextRange": [
                    26,
                    117
                ],
                "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "post_condition_unexp_ft": "((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_pt": "((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_ft": "((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "CoCoSpecCode": "H(((((senstate = sen_fault_state) and not (request)) and not (limits)) => (SENSTATE = sen_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "ftExpanded": "(LAST V ((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((senstate = sen_fault_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "component": "FSM_Sensor"
            },
            "_id": "c829ea83-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-009",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Airspeed Regulator Shall not command transient changes in translational axial acceleration greater than 32 ft/sec2/sec.",
            "fulltext": "Regulator shall always satisfy airspeed_command_acceleration <= 32.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "airspeed_command_acceleration"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(airspeed_command_acceleration <= 32.0)",
                "responseTextRange": [
                    23,
                    67
                ],
                "diagramVariables": "Response = <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(airspeed_command_acceleration <= 32.0)",
                "post_condition_unexp_ft": "(airspeed_command_acceleration <= 32.0)",
                "post_condition_SMV_pt": "(airspeed_command_acceleration <= 32.0)",
                "post_condition_SMV_ft": "(airspeed_command_acceleration <= 32.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (airspeed_command_acceleration <= 32.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (airspeed_command_acceleration <= 32.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (airspeed_command_acceleration <= 32.0))",
                "CoCoSpecCode": "H((airspeed_command_acceleration <= 32.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (airspeed_command_acceleration <= 32.0))",
                "ftExpanded": "(LAST V (airspeed_command_acceleration <= 32.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (airspeed_command_acceleration <= 32.0))",
                "component": "Regulator"
            },
            "_id": "c829ea84-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-010",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
            "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "component_name": "FSM_Sensor",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
                "responseTextRange": [
                    24,
                    100
                ],
                "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state))",
                "post_condition_unexp_ft": "(((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state))",
                "post_condition_SMV_pt": "(((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state))",
                "post_condition_SMV_ft": "(((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state)))",
                "CoCoSpecCode": "H((((senstate = sen_nominal_state) and limits) => (SENSTATE = sen_fault_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state)))",
                "ftExpanded": "(LAST V (((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((senstate = sen_nominal_state) & limits) -> (SENSTATE = sen_fault_state)))",
                "component": "FSM_Sensor"
            },
            "_id": "c829ea85-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
            "comments": "RollAutopilot shall always satisfy ! autopilot_engaged => roll_actuator_command = 0.0",
            "fulltext": "RollAutopilot shall always satisfy ! autopilot_engaged => aileron_cmd = 0.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "autopilot_engaged",
                    "aileron_cmd"
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(! autopilot_engaged => aileron_cmd = 0.0)",
                "responseTextRange": [
                    27,
                    74
                ],
                "diagramVariables": "Response = <b><i>(! autopilot_engaged => aileron_cmd = 0.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((! autopilot_engaged) -> (aileron_cmd = 0.0))",
                "post_condition_unexp_ft": "((! autopilot_engaged) -> (aileron_cmd = 0.0))",
                "post_condition_SMV_pt": "((! autopilot_engaged) -> (aileron_cmd = 0.0))",
                "post_condition_SMV_ft": "((! autopilot_engaged) -> (aileron_cmd = 0.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((! autopilot_engaged) -> (aileron_cmd = 0.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((! autopilot_engaged) -> (aileron_cmd = 0.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((! autopilot_engaged) -> (aileron_cmd = 0.0)))",
                "CoCoSpecCode": "H((not (autopilot_engaged) => (aileron_cmd = 0.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((! autopilot_engaged) -> (aileron_cmd = 0.0)))",
                "ftExpanded": "(LAST V ((! autopilot_engaged) -> (aileron_cmd = 0.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((! autopilot_engaged) -> (aileron_cmd = 0.0)))",
                "component": "RollAutopilot"
            },
            "_id": "c829ea86-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-003B",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy (roll_angle < 6.0 & roll_angle > -6.0) => roll_hold_reference =0.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "roll_hold",
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "scope_mode": "roll_hold",
                "scopeTextRange": [
                    0,
                    16
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    18,
                    30
                ],
                "timingTextRange": [
                    38,
                    48
                ],
                "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
                "responseTextRange": [
                    50,
                    123
                ],
                "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg",
                "scope_mode_pt": "roll_hold",
                "scope_mode_ft": "roll_hold",
                "post_condition_unexp_pt": "(((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))",
                "post_condition_unexp_ft": "(((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))",
                "post_condition_SMV_pt": "(((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))",
                "post_condition_SMV_ft": "(((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X $post_condition_unexp_ft$))) & ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "((LAST V ((! (Fin_roll_hold & (! LAST))) | (X (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))) & (roll_hold -> (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))",
                "pt_fetched": "(H (Fin_$scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (Fin_roll_hold -> (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))",
                "ptExpanded_fetched": "(H (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((roll_hold & (Z (! roll_hold))) -> (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))",
                "CoCoSpecCode": "H(((roll_hold and ZtoPre(not (roll_hold))) => (((roll_angle < 6.0) and (roll_angle > -6.0)) => (roll_hold_reference = 0.0))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! roll_hold) & (! LAST)) & (X roll_hold)) & (! LAST))) | (X (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))) & (roll_hold -> (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))",
                "ftExpanded": "((LAST V ((! ((((! roll_hold) & (! LAST)) & (X roll_hold)) & (! LAST))) | (X (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))) & (roll_hold -> (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G ((! ((! roll_hold) & (X roll_hold))) | (X (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))) & (roll_hold -> (((roll_angle < 6.0) & (roll_angle > -6.0)) -> (roll_hold_reference = 0.0))))",
                "component": "RollAutopilot"
            },
            "_id": "c829ea87-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NN-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values",
            "fulltext": "NN shall always satisfy z >= -0.2",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "z"
                ],
                "component_name": "NN",
                "componentTextRange": [
                    0,
                    1
                ],
                "timingTextRange": [
                    9,
                    14
                ],
                "post_condition": "(z >= -0.2)",
                "responseTextRange": [
                    16,
                    32
                ],
                "diagramVariables": "Response = <b><i>(z >= -0.2)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(z >= -0.2)",
                "post_condition_unexp_ft": "(z >= -0.2)",
                "post_condition_SMV_pt": "(z >= -0.2)",
                "post_condition_SMV_ft": "(z >= -0.2)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (z >= -0.2))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (z >= -0.2))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (z >= -0.2))",
                "CoCoSpecCode": "H((z >= -0.2))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (z >= -0.2))",
                "ftExpanded": "(LAST V (z >= -0.2))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (z >= -0.2))",
                "component": "NN"
            },
            "_id": "c829ea88-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-006",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Autopilot shall always satisfy abs_roll_angle < 33.0",
            "fulltext": "Autopilot shall always satisfy -33.0 < roll_angle & roll_angle < 33.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "roll_angle"
                ],
                "component_name": "Autopilot",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(-33.0 < roll_angle & roll_angle < 33.0)",
                "responseTextRange": [
                    23,
                    68
                ],
                "diagramVariables": "Response = <b><i>(-33.0 < roll_angle & roll_angle < 33.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((-33.0 < roll_angle) & (roll_angle < 33.0))",
                "post_condition_unexp_ft": "((-33.0 < roll_angle) & (roll_angle < 33.0))",
                "post_condition_SMV_pt": "((-33.0 < roll_angle) & (roll_angle < 33.0))",
                "post_condition_SMV_ft": "((-33.0 < roll_angle) & (roll_angle < 33.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((-33.0 < roll_angle) & (roll_angle < 33.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((-33.0 < roll_angle) & (roll_angle < 33.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((-33.0 < roll_angle) & (roll_angle < 33.0)))",
                "CoCoSpecCode": "H(((-33.0 < roll_angle) and (roll_angle < 33.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((-33.0 < roll_angle) & (roll_angle < 33.0)))",
                "ftExpanded": "(LAST V ((-33.0 < roll_angle) & (roll_angle < 33.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((-33.0 < roll_angle) & (roll_angle < 33.0)))",
                "component": "Autopilot"
            },
            "_id": "c829ea89-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-013",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
            "comments": "Originally:\n\nFSM_Sensor shall always satisfy (senstate = sen_transition_state & request & MODE) => SENSTATE = sen_nominal_state\n\nMODE cannot be used as a variable of the latest FRET release",
            "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_transition_state & request & activeMode) => SENSTATE = sen_nominal_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "activeMode",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "component_name": "FSM_Sensor",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(( senstate = sen_transition_state & request & activeMode ) => SENSTATE = sen_nominal_state)",
                "responseTextRange": [
                    24,
                    119
                ],
                "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request & activeMode ) => SENSTATE = sen_nominal_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state))",
                "post_condition_unexp_ft": "((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state))",
                "post_condition_SMV_pt": "((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state))",
                "post_condition_SMV_ft": "((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state)))",
                "CoCoSpecCode": "H(((((senstate = sen_transition_state) and request) and activeMode) => (SENSTATE = sen_nominal_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state)))",
                "ftExpanded": "(LAST V ((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((senstate = sen_transition_state) & request) & activeMode) -> (SENSTATE = sen_nominal_state)))",
                "component": "FSM_Sensor"
            },
            "_id": "c829ea8a-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "SWIM-001a",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The SWIM Airspeed algorithm shall output the minimum AGCAS airspeed required to perform a 2g flyup as follows:\n\nAuto GCAS Minimum Vcas (knots) = \nSQRT{[2*Load Factor*Gross Weight]/[Air Density at sea level * \n\t\tCoefficient of Lift Max*Wing Area]} / 1.6891 (ft/s/knots)\nwhere\n\tLoad Factor = 2 gs\n\tGross weight of the aircraft\n\tAir Density at sea level = 0.0023769 slugs/ft^3\n\tCoefficient of Lift Max = 1.24 (CAT I) and 1.10 (CAT III)\n\tWing Area of the F-16 = 300 ft^2\nThus,\nIF CAT I, Auto GCAS Minimum Vcas (knots)  = 1.25921 * SQRT(Gross Weight)  + 10.0\nIF CAT III, Auto GCAS Minimum Vcas (knots)  = 1.33694 * SQRT(Gross Weight) + 10.0",
            "comments": "Originally:\n\nSWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))",
            "fulltext": "SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrt(weight) + 10.0))",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "storeCat",
                    "CAT1",
                    "CalAirspeedMin",
                    "sqrt",
                    "weight"
                ],
                "component_name": "SWIM",
                "componentTextRange": [
                    0,
                    3
                ],
                "timingTextRange": [
                    11,
                    16
                ],
                "post_condition": "(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrt ( weight ) + 10.0 ) ))",
                "responseTextRange": [
                    18,
                    97
                ],
                "diagramVariables": "Response = <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrt ( weight ) + 10.0 ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0)))",
                "post_condition_unexp_ft": "((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0)))",
                "post_condition_SMV_pt": "((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0)))",
                "post_condition_SMV_ft": "((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "CoCoSpecCode": "H(((storeCat = CAT1) => (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "ftExpanded": "(LAST V ((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((storeCat = CAT1) -> (CalAirspeedMin = ((1.25921 * sqrt(weight)) + 10.0))))",
                "component": "SWIM"
            },
            "_id": "c829ea8b-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-006",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "NLGuidance shall always satisfy mag(yout - pre_yout) <= T * mag(Vt + Vv)",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": {
                    "regular": [
                        "mag",
                        "yout",
                        "pre_yout",
                        "T",
                        "Vt",
                        "Vv"
                    ],
                    "modes": []
                },
                "component_name": "NLGuidance",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))",
                "responseTextRange": [
                    24,
                    71
                ],
                "ft": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
                "pt": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
                "ftExpanded": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
                "ptExpanded": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
                "component": "<b><i>NLGuidance</i></b>",
                "CoCoSpecCode": "(H((mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))))",
                "diagramVariables": "Response = <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
                "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
            },
            "_id": "c829ea8c-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-007",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
                "responseTextRange": [
                    27,
                    111
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state))",
                "post_condition_unexp_ft": "((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state))",
                "post_condition_SMV_pt": "((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state))",
                "post_condition_SMV_ft": "((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state)))",
                "CoCoSpecCode": "H(((((state = ap_maneuver_state) and supported) and good) => (STATE = ap_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state)))",
                "ftExpanded": "(LAST V ((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((state = ap_maneuver_state) & supported) & good) -> (STATE = ap_transition_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea8d-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-004",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "NLGuidance shall always satisfy yout * Xr > 0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": {
                    "regular": [
                        "yout",
                        "Xr"
                    ],
                    "modes": []
                },
                "component_name": "NLGuidance",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(yout * Xr > 0)",
                "responseTextRange": [
                    24,
                    44
                ],
                "ft": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
                "pt": "(H <b><i>(yout * Xr > 0)</i></b>)",
                "ftExpanded": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
                "ptExpanded": "(H <b><i>(yout * Xr > 0)</i></b>)",
                "component": "<b><i>NLGuidance</i></b>",
                "CoCoSpecCode": "(H((yout * Xr > 0)))",
                "diagramVariables": "Response = <b><i>(yout * Xr > 0)</i></b>.",
                "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout * Xr > 0)</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
            },
            "_id": "c829ea8e-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-007",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0",
            "fulltext": "RollAutopilot shall always satisfy -15.0 <= aileron_cmd & aileron_cmd <= 15.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "aileron_cmd"
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(-15.0 <= aileron_cmd & aileron_cmd <= 15.0)",
                "responseTextRange": [
                    27,
                    76
                ],
                "diagramVariables": "Response = <b><i>(-15.0 <= aileron_cmd & aileron_cmd <= 15.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0))",
                "post_condition_unexp_ft": "((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0))",
                "post_condition_SMV_pt": "((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0))",
                "post_condition_SMV_ft": "((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0)))",
                "CoCoSpecCode": "H(((-15.0 <= aileron_cmd) and (aileron_cmd <= 15.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0)))",
                "ftExpanded": "(LAST V ((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((-15.0 <= aileron_cmd) & (aileron_cmd <= 15.0)))",
                "component": "RollAutopilot"
            },
            "_id": "c829ea8f-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-004",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "FSM_Autopilot shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
                "responseTextRange": [
                    27,
                    98
                ],
                "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state))",
                "post_condition_unexp_ft": "(((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state))",
                "post_condition_SMV_pt": "(((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state))",
                "post_condition_SMV_ft": "(((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state)))",
                "CoCoSpecCode": "H(((not (good) and (state = ap_nominal_state)) => (STATE = ap_maneuver_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state)))",
                "ftExpanded": "(LAST V (((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((! good) & (state = ap_nominal_state)) -> (STATE = ap_maneuver_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea90-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-007v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
                "responseTextRange": [
                    27,
                    123
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state))",
                "post_condition_unexp_ft": "(((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state))",
                "post_condition_SMV_pt": "(((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state))",
                "post_condition_SMV_ft": "(((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state)))",
                "CoCoSpecCode": "H((((((state = ap_maneuver_state) and supported) and good) and not (standby)) => (STATE = ap_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state)))",
                "ftExpanded": "(LAST V (((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((((state = ap_maneuver_state) & supported) & good) & (! standby)) -> (STATE = ap_transition_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829ea91-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TSM-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "TriplexSignalMonitor  shall  always  satisfy  (no_fail => (set_val = mid_value))",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "no_fail",
                    "set_val",
                    "mid_value"
                ],
                "component_name": "TriplexSignalMonitor",
                "componentTextRange": [
                    0,
                    19
                ],
                "timingTextRange": [
                    29,
                    34
                ],
                "post_condition": "(( no_fail => ( set_val = mid_value ) ))",
                "responseTextRange": [
                    37,
                    79
                ],
                "diagramVariables": "Response = <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(no_fail -> (set_val = mid_value))",
                "post_condition_unexp_ft": "(no_fail -> (set_val = mid_value))",
                "post_condition_SMV_pt": "(no_fail -> (set_val = mid_value))",
                "post_condition_SMV_ft": "(no_fail -> (set_val = mid_value))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (no_fail -> (set_val = mid_value)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (no_fail -> (set_val = mid_value)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (no_fail -> (set_val = mid_value)))",
                "CoCoSpecCode": "H((no_fail => (set_val = mid_value)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (no_fail -> (set_val = mid_value)))",
                "ftExpanded": "(LAST V (no_fail -> (set_val = mid_value)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (no_fail -> (set_val = mid_value)))",
                "component": "TriplexSignalMonitor"
            },
            "_id": "c829ea92-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "SWIM-001b",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nSWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0)) ",
            "fulltext": "SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrt(weight) + 10.0)) ",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "storeCat",
                    "CAT3",
                    "CalAirspeedMin",
                    "sqrt",
                    "weight"
                ],
                "component_name": "SWIM",
                "componentTextRange": [
                    0,
                    3
                ],
                "timingTextRange": [
                    11,
                    16
                ],
                "post_condition": "(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrt ( weight ) + 10.0 ) ))",
                "responseTextRange": [
                    18,
                    96
                ],
                "diagramVariables": "Response = <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrt ( weight ) + 10.0 ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0)))",
                "post_condition_unexp_ft": "((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0)))",
                "post_condition_SMV_pt": "((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0)))",
                "post_condition_SMV_ft": "((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "CoCoSpecCode": "H(((storeCat = CAT3) => (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "ftExpanded": "(LAST V ((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((storeCat = CAT3) -> (CalAirspeedMin = ((1.33694 * sqrt(weight)) + 10.0))))",
                "component": "SWIM"
            },
            "_id": "c829ea93-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-010",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Height Regulator Shall not command transient changes in translational height acceleration greater than 32 ft/sec2/sec.",
            "fulltext": "Regulator shall always satisfy height_command_acceleration <= 32.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "height_command_acceleration"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    21
                ],
                "post_condition": "(height_command_acceleration <= 32.0)",
                "responseTextRange": [
                    23,
                    65
                ],
                "diagramVariables": "Response = <b><i>(height_command_acceleration <= 32.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(height_command_acceleration <= 32.0)",
                "post_condition_unexp_ft": "(height_command_acceleration <= 32.0)",
                "post_condition_SMV_pt": "(height_command_acceleration <= 32.0)",
                "post_condition_SMV_ft": "(height_command_acceleration <= 32.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (height_command_acceleration <= 32.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (height_command_acceleration <= 32.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (height_command_acceleration <= 32.0))",
                "CoCoSpecCode": "H((height_command_acceleration <= 32.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (height_command_acceleration <= 32.0))",
                "ftExpanded": "(LAST V (height_command_acceleration <= 32.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (height_command_acceleration <= 32.0))",
                "component": "Regulator"
            },
            "_id": "c829ea94-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001G",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Originally:\n\nEuler shall always satisfy DCM321_31 = SinPhi * SinPsi + CosTheta *SinTheta * CosPsi",
            "fulltext": "Euler shall always satisfy DCM321_31 = sin(phi) * sin(psi) + cos(theta) * sin(theta) * cos(psi)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_31",
                    "sin",
                    "phi",
                    "psi",
                    "cos",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_31 = sin ( phi ) * sin ( psi ) + cos ( theta ) * sin ( theta ) * cos ( psi ))",
                "responseTextRange": [
                    19,
                    94
                ],
                "diagramVariables": "Response = <b><i>(DCM321_31 = sin ( phi ) * sin ( psi ) + cos ( theta ) * sin ( theta ) * cos ( psi ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi))))",
                "post_condition_unexp_ft": "(DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi))))",
                "post_condition_SMV_pt": "(DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi))))",
                "post_condition_SMV_ft": "(DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "CoCoSpecCode": "H((DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "ftExpanded": "(LAST V (DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_31 = ((sin(phi) * sin(psi)) + ((cos(theta) * sin(theta)) * cos(psi)))))",
                "component": "Euler"
            },
            "_id": "c829ea95-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NN-001",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The maximum value of NN output, z, shall always be less than or equal to 1.1, regardless of the input values",
            "fulltext": "NN shall always satisfy z <=1.1",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "z"
                ],
                "component_name": "NN",
                "componentTextRange": [
                    0,
                    1
                ],
                "timingTextRange": [
                    9,
                    14
                ],
                "post_condition": "(z <= 1.1)",
                "responseTextRange": [
                    16,
                    30
                ],
                "diagramVariables": "Response = <b><i>(z <= 1.1)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(z <= 1.1)",
                "post_condition_unexp_ft": "(z <= 1.1)",
                "post_condition_SMV_pt": "(z <= 1.1)",
                "post_condition_SMV_ft": "(z <= 1.1)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (z <= 1.1))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (z <= 1.1))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (z <= 1.1))",
                "CoCoSpecCode": "H((z <= 1.1))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (z <= 1.1))",
                "ftExpanded": "(LAST V (z <= 1.1))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (z <= 1.1))",
                "component": "NN"
            },
            "_id": "c829ea96-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-011v2",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "component_name": "FSM_Sensor",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
                "responseTextRange": [
                    24,
                    117
                ],
                "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "post_condition_unexp_ft": "((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_pt": "((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "post_condition_SMV_ft": "((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "CoCoSpecCode": "H(((((senstate = sen_nominal_state) and not (request)) and not (limits)) => (SENSTATE = sen_transition_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "ftExpanded": "(LAST V ((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((senstate = sen_nominal_state) & (! request)) & (! limits)) -> (SENSTATE = sen_transition_state)))",
                "component": "FSM_Sensor"
            },
            "_id": "c829ea97-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-002",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Pitch Regulator shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
            "fulltext": "Regulator shall never satisfy persisted(100,mcvdt_cmd_fcs_dps2 > 50.0) ",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "never",
                "response": "satisfaction",
                "variables": [
                    "mcvdt_cmd_fcs_dps2"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    20
                ],
                "post_condition": "(persisted ( 100 , mcvdt_cmd_fcs_dps2 > 50.0 ))",
                "responseTextRange": [
                    22,
                    69
                ],
                "diagramVariables": "Response = <b><i>(persisted ( 100 , mcvdt_cmd_fcs_dps2 > 50.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((H[<=100] (mcvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! FTP)))",
                "post_condition_unexp_ft": "persisted(100,(mcvdt_cmd_fcs_dps2 > 50.0))",
                "post_condition_SMV_pt": "((H[<=100] (mcvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! (!(Y TRUE)))))",
                "post_condition_SMV_ft": "persisted(100,(mcvdt_cmd_fcs_dps2 > 50.0))",
                "ft_fetched": "(LAST V (! $post_condition_unexp_ft$))",
                "ft": "(LAST V (! persisted(100,(mcvdt_cmd_fcs_dps2 > 50.0))))",
                "pt_fetched": "(H (! $post_condition_unexp_pt$))",
                "pt": "(H (! ((H[<=100] (mcvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! FTP)))))",
                "ptExpanded_fetched": "(H (! $post_condition_SMV_pt$))",
                "ptExpanded": "(H (! ((H[0,100] (mcvdt_cmd_fcs_dps2 > 50.0)) & (H[0,99] (Y TRUE)))))",
                "CoCoSpecCode": "H(not ((HT(100, 0, (mcvdt_cmd_fcs_dps2 > 50.0)) and HT(99, 0, YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V (! $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (! persisted(100,(mcvdt_cmd_fcs_dps2 > 50.0))))",
                "ftExpanded": "(LAST V (! persisted(100,(mcvdt_cmd_fcs_dps2 > 50.0))))",
                "ftInfAUExpanded_fetched": "(G (! $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (! persisted(100,(mcvdt_cmd_fcs_dps2 > 50.0))))",
                "component": "Regulator"
            },
            "_id": "c829ea98-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "NLG-007",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "NLGuidance shall always satisfy yout(3) - Xtarg(3) = 0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": {
                    "regular": [
                        "yout",
                        "Xtarg"
                    ],
                    "modes": []
                },
                "component_name": "NLGuidance",
                "componentTextRange": [
                    0,
                    9
                ],
                "timingTextRange": [
                    17,
                    22
                ],
                "post_condition": "(yout ( 3 ) - Xtarg ( 3 ) = 0)",
                "responseTextRange": [
                    24,
                    53
                ],
                "ft": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
                "pt": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
                "ftExpanded": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
                "ptExpanded": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
                "component": "<b><i>NLGuidance</i></b>",
                "CoCoSpecCode": "(H((yout ( 3 ) - Xtarg ( 3 ) = 0)))",
                "diagramVariables": "Response = <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
                "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
            },
            "_id": "c829ea99-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-001v1",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
            "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "component_name": "FSM",
                "componentTextRange": [
                    0,
                    2
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
                "responseTextRange": [
                    20,
                    78
                ],
                "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((limits & (! standby)) & (! apfail)) & supported) -> pullup)",
                "post_condition_unexp_ft": "((((limits & (! standby)) & (! apfail)) & supported) -> pullup)",
                "post_condition_SMV_pt": "((((limits & (! standby)) & (! apfail)) & supported) -> pullup)",
                "post_condition_SMV_ft": "((((limits & (! standby)) & (! apfail)) & supported) -> pullup)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((limits & (! standby)) & (! apfail)) & supported) -> pullup))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((limits & (! standby)) & (! apfail)) & supported) -> pullup))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((limits & (! standby)) & (! apfail)) & supported) -> pullup))",
                "CoCoSpecCode": "H(((((limits and not (standby)) and not (apfail)) and supported) => pullup))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((limits & (! standby)) & (! apfail)) & supported) -> pullup))",
                "ftExpanded": "(LAST V ((((limits & (! standby)) & (! apfail)) & supported) -> pullup))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((limits & (! standby)) & (! apfail)) & supported) -> pullup))",
                "component": "FSM"
            },
            "_id": "c829ea9a-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001E",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Euler shall always satisfy DCM321_22 = (cos(phi) * cos(psi) + sin(phi) * sin(theta) * sin(psi))",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_22",
                    "cos",
                    "phi",
                    "psi",
                    "sin",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_22 = ( cos ( phi ) * cos ( psi ) + sin ( phi ) * sin ( theta ) * sin ( psi ) ))",
                "responseTextRange": [
                    19,
                    94
                ],
                "diagramVariables": "Response = <b><i>(DCM321_22 = ( cos ( phi ) * cos ( psi ) + sin ( phi ) * sin ( theta ) * sin ( psi ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi))))",
                "post_condition_unexp_ft": "(DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi))))",
                "post_condition_SMV_pt": "(DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi))))",
                "post_condition_SMV_ft": "(DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "CoCoSpecCode": "H((DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "ftExpanded": "(LAST V (DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_22 = ((cos(phi) * cos(psi)) + ((sin(phi) * sin(theta)) * sin(psi)))))",
                "component": "Euler"
            },
            "_id": "c829ea9c-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "TSM-003a",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "In the single fail state, a good channel average of the remaining two good branches shall be used to determine the selected value (1)",
            "fulltext": "TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "FC",
                    "set_val",
                    "ia",
                    "ib"
                ],
                "component_name": "TriplexSignalMonitor",
                "componentTextRange": [
                    0,
                    19
                ],
                "timingTextRange": [
                    27,
                    32
                ],
                "post_condition": "(FC = 1 => set_val = 0.5 * ( ia + ib ))",
                "responseTextRange": [
                    34,
                    74
                ],
                "diagramVariables": "Response = <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((FC = 1) -> (set_val = (0.5 * (ia + ib))))",
                "post_condition_unexp_ft": "((FC = 1) -> (set_val = (0.5 * (ia + ib))))",
                "post_condition_SMV_pt": "((FC = 1) -> (set_val = (0.5 * (ia + ib))))",
                "post_condition_SMV_ft": "((FC = 1) -> (set_val = (0.5 * (ia + ib))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((FC = 1) -> (set_val = (0.5 * (ia + ib)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((FC = 1) -> (set_val = (0.5 * (ia + ib)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((FC = 1) -> (set_val = (0.5 * (ia + ib)))))",
                "CoCoSpecCode": "H(((FC = 1) => (set_val = (0.5 * (ia + ib)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((FC = 1) -> (set_val = (0.5 * (ia + ib)))))",
                "ftExpanded": "(LAST V ((FC = 1) -> (set_val = (0.5 * (ia + ib)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((FC = 1) -> (set_val = (0.5 * (ia + ib)))))",
                "component": "TriplexSignalMonitor"
            },
            "_id": "c829ea9d-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "REG-003",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
            "fulltext": "Regulator shall never satisfy persisted(100,ncvdt_cmd_fcs_dps2 > 50.0) ",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "never",
                "response": "satisfaction",
                "variables": [
                    "ncvdt_cmd_fcs_dps2"
                ],
                "component_name": "Regulator",
                "componentTextRange": [
                    0,
                    8
                ],
                "timingTextRange": [
                    16,
                    20
                ],
                "post_condition": "(persisted ( 100 , ncvdt_cmd_fcs_dps2 > 50.0 ))",
                "responseTextRange": [
                    22,
                    69
                ],
                "diagramVariables": "Response = <b><i>(persisted ( 100 , ncvdt_cmd_fcs_dps2 > 50.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((H[<=100] (ncvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! FTP)))",
                "post_condition_unexp_ft": "persisted(100,(ncvdt_cmd_fcs_dps2 > 50.0))",
                "post_condition_SMV_pt": "((H[<=100] (ncvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! (!(Y TRUE)))))",
                "post_condition_SMV_ft": "persisted(100,(ncvdt_cmd_fcs_dps2 > 50.0))",
                "ft_fetched": "(LAST V (! $post_condition_unexp_ft$))",
                "ft": "(LAST V (! persisted(100,(ncvdt_cmd_fcs_dps2 > 50.0))))",
                "pt_fetched": "(H (! $post_condition_unexp_pt$))",
                "pt": "(H (! ((H[<=100] (ncvdt_cmd_fcs_dps2 > 50.0)) & (H[<100] (! FTP)))))",
                "ptExpanded_fetched": "(H (! $post_condition_SMV_pt$))",
                "ptExpanded": "(H (! ((H[0,100] (ncvdt_cmd_fcs_dps2 > 50.0)) & (H[0,99] (Y TRUE)))))",
                "CoCoSpecCode": "H(not ((HT(100, 0, (ncvdt_cmd_fcs_dps2 > 50.0)) and HT(99, 0, YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V (! $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (! persisted(100,(ncvdt_cmd_fcs_dps2 > 50.0))))",
                "ftExpanded": "(LAST V (! persisted(100,(ncvdt_cmd_fcs_dps2 > 50.0))))",
                "ftInfAUExpanded_fetched": "(G (! $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (! persisted(100,(ncvdt_cmd_fcs_dps2 > 50.0))))",
                "component": "Regulator"
            },
            "_id": "c829ea9e-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-002B",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Euler shall always satisfy Vb_2 = Vi_1 * DCM321_21 + Vi_2 * DCM321_22 + Vi_3 * DCM321_23",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "Vb_2",
                    "Vi_1",
                    "DCM321_21",
                    "Vi_2",
                    "DCM321_22",
                    "Vi_3",
                    "DCM321_23"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(Vb_2 = Vi_1 * DCM321_21 + Vi_2 * DCM321_22 + Vi_3 * DCM321_23)",
                "responseTextRange": [
                    19,
                    87
                ],
                "diagramVariables": "Response = <b><i>(Vb_2 = Vi_1 * DCM321_21 + Vi_2 * DCM321_22 + Vi_3 * DCM321_23)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23)))",
                "post_condition_unexp_ft": "(Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23)))",
                "post_condition_SMV_pt": "(Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23)))",
                "post_condition_SMV_ft": "(Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "CoCoSpecCode": "H((Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "ftExpanded": "(LAST V (Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (Vb_2 = (((Vi_1 * DCM321_21) + (Vi_2 * DCM321_22)) + (Vi_3 * DCM321_23))))",
                "component": "Euler"
            },
            "_id": "c829ea9f-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-008",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Previously split into two requirements:\nAP-008A: in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active\nAP-008B: in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd (same as current)",
            "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "hdg_hold",
                    "roll_cmd",
                    "hdg_hold_mode_cmd"
                ],
                "scope_mode": "hdg_hold",
                "scopeTextRange": [
                    0,
                    15
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    17,
                    29
                ],
                "timingTextRange": [
                    37,
                    42
                ],
                "post_condition": "(roll_cmd = hdg_hold_mode_cmd)",
                "responseTextRange": [
                    44,
                    79
                ],
                "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>hdg_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
                "scope_mode_pt": "hdg_hold",
                "scope_mode_ft": "hdg_hold",
                "post_condition_unexp_pt": "(roll_cmd = hdg_hold_mode_cmd)",
                "post_condition_unexp_ft": "(roll_cmd = hdg_hold_mode_cmd)",
                "post_condition_SMV_pt": "(roll_cmd = hdg_hold_mode_cmd)",
                "post_condition_SMV_ft": "(roll_cmd = hdg_hold_mode_cmd)",
                "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "(LAST V (hdg_hold -> (roll_cmd = hdg_hold_mode_cmd)))",
                "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (hdg_hold -> (roll_cmd = hdg_hold_mode_cmd)))",
                "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H (hdg_hold -> (roll_cmd = hdg_hold_mode_cmd)))",
                "CoCoSpecCode": "H((hdg_hold => (roll_cmd = hdg_hold_mode_cmd)))",
                "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "(LAST V (hdg_hold -> (roll_cmd = hdg_hold_mode_cmd)))",
                "ftExpanded": "(LAST V (hdg_hold -> (roll_cmd = hdg_hold_mode_cmd)))",
                "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "(G (hdg_hold -> (roll_cmd = hdg_hold_mode_cmd)))",
                "component": "RollAutopilot"
            },
            "_id": "c829eaa0-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "AP-003C",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The roll hold reference shall be set to 30 degrees in the same direction as the actual roll angle if the actual roll angle is greater than 30 degrees at the time of roll hold engagement.",
            "comments": "in roll_hold  mode RollAutopilot shall immediately satisfy abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign(roll_angle)",
            "fulltext": "in roll_hold  mode RollAutopilot shall immediately satisfy (-30.0 >= roll_angle | roll_angle >= 30.0) => roll_hold_reference = 30.0 * sign_roll_angle",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "in"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "roll_hold",
                    "roll_angle",
                    "roll_hold_reference",
                    "sign_roll_angle"
                ],
                "scope_mode": "roll_hold",
                "scopeTextRange": [
                    0,
                    17
                ],
                "component_name": "RollAutopilot",
                "componentTextRange": [
                    19,
                    31
                ],
                "timingTextRange": [
                    39,
                    49
                ],
                "post_condition": "(( -30.0 >= roll_angle | roll_angle >= 30.0 ) => roll_hold_reference = 30.0 * sign_roll_angle)",
                "responseTextRange": [
                    51,
                    148
                ],
                "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( -30.0 >= roll_angle | roll_angle >= 30.0 ) => roll_hold_reference = 30.0 * sign_roll_angle)</i></b>.",
                "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg",
                "scope_mode_pt": "roll_hold",
                "scope_mode_ft": "roll_hold",
                "post_condition_unexp_pt": "(((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))",
                "post_condition_unexp_ft": "(((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))",
                "post_condition_SMV_pt": "(((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))",
                "post_condition_SMV_ft": "(((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))",
                "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X $post_condition_unexp_ft$))) & ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
                "ft": "((LAST V ((! (Fin_roll_hold & (! LAST))) | (X (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))) & (roll_hold -> (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "pt_fetched": "(H (Fin_$scope_mode_pt$ -> $post_condition_unexp_pt$))",
                "pt": "(H (Fin_roll_hold -> (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "ptExpanded_fetched": "(H (($scope_mode_pt$ & (Z (! $scope_mode_pt$))) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((roll_hold & (Z (! roll_hold))) -> (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "CoCoSpecCode": "H(((roll_hold and ZtoPre(not (roll_hold))) => (((-30.0 >= roll_angle) or (roll_angle >= 30.0)) => (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftExpandedUnoptimized": "((LAST V ((! ((((! roll_hold) & (! LAST)) & (X roll_hold)) & (! LAST))) | (X (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))) & (roll_hold -> (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "ftExpanded": "((LAST V ((! ((((! roll_hold) & (! LAST)) & (X roll_hold)) & (! LAST))) | (X (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))) & (roll_hold -> (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
                "ftInfAUExpanded": "((G ((! ((! roll_hold) & (X roll_hold))) | (X (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))) & (roll_hold -> (((-30.0 >= roll_angle) | (roll_angle >= 30.0)) -> (roll_hold_reference = (30.0 * sign_roll_angle)))))",
                "component": "RollAutopilot"
            },
            "_id": "c829eaa1-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001B",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "fulltext": "Euler shall always satisfy DCM321_12 = cos(theta) * sin(psi)",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_12",
                    "cos",
                    "theta",
                    "sin",
                    "psi"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_12 = cos ( theta ) * sin ( psi ))",
                "responseTextRange": [
                    19,
                    59
                ],
                "diagramVariables": "Response = <b><i>(DCM321_12 = cos ( theta ) * sin ( psi ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_12 = (cos(theta) * sin(psi)))",
                "post_condition_unexp_ft": "(DCM321_12 = (cos(theta) * sin(psi)))",
                "post_condition_SMV_pt": "(DCM321_12 = (cos(theta) * sin(psi)))",
                "post_condition_SMV_ft": "(DCM321_12 = (cos(theta) * sin(psi)))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_12 = (cos(theta) * sin(psi))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_12 = (cos(theta) * sin(psi))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_12 = (cos(theta) * sin(psi))))",
                "CoCoSpecCode": "H((DCM321_12 = (cos(theta) * sin(psi))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_12 = (cos(theta) * sin(psi))))",
                "ftExpanded": "(LAST V (DCM321_12 = (cos(theta) * sin(psi))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_12 = (cos(theta) * sin(psi))))",
                "component": "Euler"
            },
            "_id": "c829eaa2-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-001H",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "Euler shall always satisfy DCM321_32 = (- SinPhi * CosPsi) + (CosPhi * SinTheta * SinPsi)",
            "fulltext": "Euler shall always satisfy DCM321_32 = (- sin(phi) * cos(psi)) + (cos(phi) * sin(theta) * sin(psi))",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "DCM321_32",
                    "sin",
                    "phi",
                    "cos",
                    "psi",
                    "theta"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(DCM321_32 = ( - sin ( phi ) * cos ( psi ) ) + ( cos ( phi ) * sin ( theta ) * sin ( psi ) ))",
                "responseTextRange": [
                    19,
                    98
                ],
                "diagramVariables": "Response = <b><i>(DCM321_32 = ( - sin ( phi ) * cos ( psi ) ) + ( cos ( phi ) * sin ( theta ) * sin ( psi ) ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi))))",
                "post_condition_unexp_ft": "(DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi))))",
                "post_condition_SMV_pt": "(DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi))))",
                "post_condition_SMV_ft": "(DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi))))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "CoCoSpecCode": "H((DCM321_32 = ((-(sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "ftExpanded": "(LAST V (DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (DCM321_32 = (((- sin(phi)) * cos(psi)) + ((cos(phi) * sin(theta)) * sin(psi)))))",
                "component": "Euler"
            },
            "_id": "c829eaa3-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "FSM-006",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
            "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "component_name": "FSM_Autopilot",
                "componentTextRange": [
                    0,
                    12
                ],
                "timingTextRange": [
                    20,
                    25
                ],
                "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
                "responseTextRange": [
                    27,
                    106
                ],
                "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state))",
                "post_condition_unexp_ft": "((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state))",
                "post_condition_SMV_pt": "((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state))",
                "post_condition_SMV_ft": "((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state)))",
                "CoCoSpecCode": "H(((((state = ap_maneuver_state) and standby) and good) => (STATE = ap_standby_state)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state)))",
                "ftExpanded": "(LAST V ((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((state = ap_maneuver_state) & standby) & good) -> (STATE = ap_standby_state)))",
                "component": "FSM_Autopilot"
            },
            "_id": "c829eaa4-eae3-11ee-a414-a1a504cbafae"
        },
        {
            "reqid": "EUL-006B",
            "parent_reqid": "",
            "project": "LM_requirements",
            "rationale": "",
            "comments": "",
            "fulltext": "Euler shall always satisfy r1xr2Transpose = 0.0 & r1xr3Transpose = 0.0 & r2xr3Transpose = 0.0",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "r1xr2Transpose",
                    "r1xr3Transpose",
                    "r2xr3Transpose"
                ],
                "component_name": "Euler",
                "componentTextRange": [
                    0,
                    4
                ],
                "timingTextRange": [
                    12,
                    17
                ],
                "post_condition": "(r1xr2Transpose = 0.0 & r1xr3Transpose = 0.0 & r2xr3Transpose = 0.0)",
                "responseTextRange": [
                    19,
                    92
                ],
                "diagramVariables": "Response = <b><i>(r1xr2Transpose = 0.0 & r1xr3Transpose = 0.0 & r2xr3Transpose = 0.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0))",
                "post_condition_unexp_ft": "(((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0))",
                "post_condition_SMV_pt": "(((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0))",
                "post_condition_SMV_ft": "(((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0)))",
                "CoCoSpecCode": "H((((r1xr2Transpose = 0.0) and (r1xr3Transpose = 0.0)) and (r2xr3Transpose = 0.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0)))",
                "ftExpanded": "(LAST V (((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (((r1xr2Transpose = 0.0) & (r1xr3Transpose = 0.0)) & (r2xr3Transpose = 0.0)))",
                "component": "Euler"
            },
            "_id": "f03363d0-f5cb-11ee-9c69-3f6527c3093c"
        }
    ],
    "variables": [
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/1_fsm/fsm_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "FSM_Sensor",
            "modeldoc": true,
            "_id": "0b8969e0-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mode",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Sen",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Sensor",
            "_id": "0b8969e1-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "request",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Sen",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Sensor",
            "_id": "0b8969e2-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "limits",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Sen",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Sensor",
            "_id": "0b8969e3-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "senstate",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Sen",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Sensor",
            "_id": "0b8969e4-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "good",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine/Sen",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Sensor",
            "_id": "0b8969e5-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "SENSTATE",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine/Sen",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Sensor",
            "_id": "0b8969e6-f450-11ee-ad37-3dbc52ac9a77"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/5_nn/nn_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "NN",
            "modeldoc": true,
            "_id": "16d2faa0-f45f-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "x",
            "portType": "Inport",
            "component_name": "nn_12B/nn_2x10x10x1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "NN",
            "_id": "16d2faa1-f45f-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Inport",
            "component_name": "nn_12B/nn_2x10x10x1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "NN",
            "_id": "16d2faa2-f45f-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "z",
            "portType": "Outport",
            "component_name": "nn_12B/nn_2x10x10x1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "NN",
            "_id": "16d2faa3-f45f-11ee-bfe8-7393df765a69"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/2_tustin/integrator_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "Tustin_Integrator",
            "modeldoc": true,
            "_id": "4625aea0-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xin",
            "portType": "Inport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b0-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "T",
            "portType": "Inport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b1-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TL",
            "portType": "Inport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b2-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BL",
            "portType": "Inport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b3-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "reset",
            "portType": "Inport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b4-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b5-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "yout",
            "portType": "Outport",
            "component_name": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Tustin_Integrator",
            "_id": "4625d5b6-f45b-11ee-bfe8-7393df765a69"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/1_fsm/fsm_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "FSM",
            "modeldoc": true,
            "_id": "4891fc10-f44d-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "standby",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM",
            "_id": "4891fc11-f44d-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "apfail",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM",
            "_id": "4891fc12-f44d-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "supported",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM",
            "_id": "4891fc13-f44d-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "limits",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM",
            "_id": "4891fc14-f44d-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "pullup",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM",
            "_id": "4891fc15-f44d-11ee-ad37-3dbc52ac9a77"
        },
        {
            "file_path": "/Users/amavrido/Documents/CoCoSpecMaterial/lm_challenges/3_regulators/regs_12B.mdl",
            "date": "13-Mar-2019",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "Regulator",
            "modeldoc": true,
            "_id": "5ea7f1d0-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_adc_deg",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d1-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas_adc_kts",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d2-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcv_cmd_fcs_dps ",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d3-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hdg_des_deg",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d4-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcv_cmd_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d5-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alt_des_ft",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d6-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncv_cmd_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d7-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xcv_cmd_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d8-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "airspeed_des_fps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1d9-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hcv_cmd_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1da-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcv_fps_dps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1db-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcv_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1dc-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncv_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1dd-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dcv_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1de-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "zcv_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1df-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_dot",
            "portType": "Inport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e0-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_adc_deg",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e1-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas_adc_kts",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e2-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcv_cmd_fcs_dps ",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e3-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hdg_des_deg",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e4-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcv_cmd_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e5-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alt_des_ft",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e6-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncv_cmd_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e7-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xcv_cmd_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e8-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "airspeed_des_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1e9-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hcv_cmd_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1ea-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcv_fps_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1eb-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcv_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1ec-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncv_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1ed-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dcv_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1ee-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "zcv_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1ef-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "betadot",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f0-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcv_cmd_fcs_dps ",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f1-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hdg_des_deg",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f2-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcv_cmd_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f3-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alt_des_ft",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f4-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncv_cmd_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f5-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xcv_cmd_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f6-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "airspeed_des_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f7-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hcv_cmd_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f8-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "OL_Cmds",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/CVcmd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea7f1f9-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_adc_deg",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Input",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1fa-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas_adc_kts",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Input",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1fb-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_adc_deg",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Input/egi_fcs_in",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1fc-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas_adc_kts",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Input/egi_fcs_in",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1fd-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_deg",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/Input/egi_fcs_in",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1fe-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas_kts",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/Input/egi_fcs_in",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f1ff-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/Input",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f200-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/Input",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f201-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcv_fps_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f202-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcv_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f203-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncv_fcs_dps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f204-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dcv_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f205-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "zcv_fcs_fps",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f206-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea7f207-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "betadot",
            "portType": "Inport",
            "component_name": "regs_12B/Inputs/betad",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f208-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_dot_est",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs/betad",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f209-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f20a-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f20b-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "OL_Cmds",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea7f20c-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea7f20d-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_dot_est",
            "portType": "Outport",
            "component_name": "regs_12B/Inputs",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f20e-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_adc_deg",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f20f-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas_adc_kts",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f210-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVcmd",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea7f211-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea7f212-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_dot_est",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f213-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVcmd",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/AirspeedRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea7f214-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/AirspeedRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea7f215-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVdt_cmd",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/AirspeedRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f216-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f217-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVcmd",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea7f218-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea7f219-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xin",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f21a-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "T",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f21b-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f21c-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f21d-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "reset",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f21e-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f21f-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "up",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f220-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f221-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lo",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f222-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f223-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f224-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f225-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TLc",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f226-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BLc",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f227-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "yout",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/HeightRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f228-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVdt_cmd",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/HeightRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f229-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV_cmd",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea7f22a-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea7f22b-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea7f22c-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xin",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e0-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "T",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e1-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e2-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e3-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "reset",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e4-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e5-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "up",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e6-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e7-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lo",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e8-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818e9-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818ea-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BL",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818eb-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TLc",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818ec-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "BLc",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)/bounds",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818ed-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "yout",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/PitchRegulator/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818ee-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVdt_cmd",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/PitchRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818ef-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVcmd",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/RollRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea818f0-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/RollRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea818f1-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Reg",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/RollRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818f2-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "one_over_Tau_roll",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/RollRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818f3-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818f4-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVcmd",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 8,
            "fretComponent": "Regulator",
            "_id": "5ea818f5-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CV",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "Regulator",
            "_id": "5ea818f6-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "one_over_Tau_roll",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818f7-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta_dot_est",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818f8-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "vtas",
            "portType": "Inport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818f9-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CVdt_cmd",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators/YawRegulator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818fa-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcvdt_cmd_fcs_dps2",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818fb-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcvdt_cmd_fcs_dps2",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818fc-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncvdt_cmd_fcs_dps2",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818fd-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xcvdt_cmd_fcs_fps2",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818fe-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hcvdt_cmd_fcs_fps2",
            "portType": "Outport",
            "component_name": "regs_12B/Regulators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea818ff-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lcvdt_cmd_fcs_dps2",
            "portType": "Outport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea81900-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mcvdt_cmd_fcs_dps2",
            "portType": "Outport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea81901-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ncvdt_cmd_fcs_dps2",
            "portType": "Outport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea81902-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "xcvdt_cmd_fcs_fps2",
            "portType": "Outport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea81903-ec69-11ee-9598-65cd845e3471"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "hcvdt_cmd_fcs_fps2",
            "portType": "Outport",
            "component_name": "regs_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Regulator",
            "_id": "5ea81904-ec69-11ee-9598-65cd845e3471"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/6_eb/EB_12B.mdl",
            "date": "08-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "EB",
            "modeldoc": true,
            "_id": "63b60850-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Wp",
            "portType": "Inport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                5,
                5
            ],
            "width": 25,
            "fretComponent": "EB",
            "_id": "63b62f60-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                5
            ],
            "width": 15,
            "fretComponent": "EB",
            "_id": "63b62f61-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "d",
            "portType": "Inport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "EB",
            "_id": "63b62f62-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "up",
            "portType": "Inport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                5
            ],
            "width": 5,
            "fretComponent": "EB",
            "_id": "63b62f63-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "check",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "EB",
            "_id": "63b62f64-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "yinv",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "EB",
            "_id": "63b62f65-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "P",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                5,
                3
            ],
            "width": 15,
            "fretComponent": "EB",
            "_id": "63b62f66-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                5
            ],
            "width": 5,
            "fretComponent": "EB",
            "_id": "63b62f67-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Buminusd",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "EB",
            "_id": "63b62f68-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "J",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "EB",
            "_id": "63b62f69-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ridge_on",
            "portType": "Outport",
            "component_name": "EB_12B/EB",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "EB",
            "_id": "63b62f6a-f5d4-11ee-89e5-9da00dc91b46"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/8_swim/swim_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "SWIM",
            "modeldoc": true,
            "_id": "6e4f5070-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "muxGet_T_Mux_AircraftGrossWeight_lbs",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5071-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "diGet_S_CatSwitchPosition",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "int32"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5072-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "E_AI_IMPACT_PRESSURE",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5073-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "diGet_S_LandingGearAltFlap",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5074-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "muxGet_T_Mux_AirspeedMonitorEnable",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5075-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "cvGet_V_AgcasLowSpeedWarn",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5076-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "olcGet_AgcasInterlocks",
            "portType": "Inport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5077-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "swimGet_AgcasLowSpeedWarn",
            "portType": "Outport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5078-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "swimGet_QcMinDisable_lbspft2",
            "portType": "Outport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f5079-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "SWIM_Qcmin_lbspft2",
            "portType": "Outport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f507a-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "SWIM_CalAirspeedmin_kts",
            "portType": "Outport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f507b-f465-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "SWIM_ASWarningAllowed",
            "portType": "Outport",
            "component_name": "swim_12B/swim_airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "SWIM",
            "_id": "6e4f507c-f465-11ee-bfe8-7393df765a69"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/1_fsm/fsm_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "FSM_Autopilot",
            "modeldoc": true,
            "_id": "7c73c660-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "standby",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed70-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "apfail",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed71-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "supported",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed72-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "good",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed73-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "state",
            "portType": "Inport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed74-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "MODE",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed75-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "REQUEST",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed76-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "PULL",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed77-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "STATE",
            "portType": "Outport",
            "component_name": "fsm_12B/FiniteStateMachine/Manager",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "FSM_Autopilot",
            "_id": "7c73ed78-f44f-11ee-ad37-3dbc52ac9a77"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "HDGmodeCmd",
            "reqs": [
                "c829ea58-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "HdgModeCmd",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotHDGmodeCmd"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "Psi",
            "reqs": [
                "c829ea58-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Psi",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotPsi"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "altitude",
            "reqs": [
                "c829ea7a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Altitude",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotaltitude"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "altitude_IC",
            "reqs": [
                "c829ea7a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "7225.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotaltitude_IC"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "altitude_hold",
            "reqs": [
                "c829ea7a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ALTMode",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsAutopilotaltitude_hold"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "autopilot_engaged",
            "reqs": [
                "c829ea75-eae3-11ee-a414-a1a504cbafae",
                "c829ea7d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "APeng",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsAutopilotautopilot_engaged"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "epsilon",
            "reqs": [
                "c829ea75-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0001",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotepsilon"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "hdg",
            "reqs": [
                "c829ea58-eae3-11ee-a414-a1a504cbafae",
                "c829ea68-eae3-11ee-a414-a1a504cbafae",
                "c829ea75-eae3-11ee-a414-a1a504cbafae",
                "c829ea7d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "HDGmode",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsAutopilothdg"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "rollAtZero",
            "reqs": [
                "c829ea68-eae3-11ee-a414-a1a504cbafae",
                "c829ea7d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "roll_angle -> if (autopilot_engaged and not hdg and not pre (autopilot_engaged and not hdg)) then roll_angle else pre rollAtZero",
            "assignmentVariables": [
                "roll_angle",
                "autopilot_engaged",
                "hdg",
                "rollAtZero"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotrollAtZero"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "roll_angle",
            "reqs": [
                "c829ea68-eae3-11ee-a414-a1a504cbafae",
                "c829ea75-eae3-11ee-a414-a1a504cbafae",
                "c829ea7d-eae3-11ee-a414-a1a504cbafae",
                "c829ea89-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Phi",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotroll_angle"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "roll_cmd",
            "reqs": [
                "c829ea68-eae3-11ee-a414-a1a504cbafae",
                "c829ea75-eae3-11ee-a414-a1a504cbafae",
                "c829ea7d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "phiCmd",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotroll_cmd"
        },
        {
            "project": "LM_requirements",
            "component_name": "Autopilot",
            "variable_name": "roll_rate",
            "reqs": [
                "c829ea81-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "p",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsAutopilotroll_rate"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_11",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 1,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_11"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_12",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 2,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_12"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_13",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 3,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_13"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_14",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 4,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_14"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_15",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 5,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_15"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_21",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 6,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_21"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_22",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 7,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_22"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_23",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 8,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_23"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_24",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 9,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_24"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_25",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 10,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_25"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_31",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 11,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_31"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_32",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 12,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_32"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_33",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 13,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_33"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_34",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 14,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_34"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "B_35",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "B",
            "modeldoc_vectorSize": 30,
            "modeldoc_vectorIndex": 15,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBB_35"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "Buminusd_1",
            "reqs": [
                "c829ea63-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Buminusd",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 1,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBBuminusd_1"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "Buminusd_2",
            "reqs": [
                "c829ea63-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Buminusd",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 2,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBBuminusd_2"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "Buminusd_3",
            "reqs": [
                "c829ea63-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Buminusd",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 3,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBBuminusd_3"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_11",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 1,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_11"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_12",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 2,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_12"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_13",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 3,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_13"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_21",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 4,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_21"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_22",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 5,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_22"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_23",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 6,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_23"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_31",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 7,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_31"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_32",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 8,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_32"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "check_33",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "check",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 9,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBcheck_33"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "det_3x3",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "Function",
            "moduleName": "det_3x3",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsEBdet_3x3"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "eps12",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.000000000001",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBeps12"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "eps6",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.000001",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEBeps6"
        },
        {
            "project": "LM_requirements",
            "component_name": "EB",
            "variable_name": "ridge_on",
            "reqs": [
                "c829ea57-eae3-11ee-a414-a1a504cbafae",
                "c829ea5d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ridge_on",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "EB_12B/EB",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsEBridge_on"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_11",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea5c-eae3-11ee-a414-a1a504cbafae",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 1,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_11"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_12",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae",
                "c829eaa2-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 2,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_12"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_13",
            "reqs": [
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea53-eae3-11ee-a414-a1a504cbafae",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 3,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_13"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_21",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea6d-eae3-11ee-a414-a1a504cbafae",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 4,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_21"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_22",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea9c-eae3-11ee-a414-a1a504cbafae",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 5,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_22"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_23",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea82-eae3-11ee-a414-a1a504cbafae",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 6,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_23"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_31",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea69-eae3-11ee-a414-a1a504cbafae",
                "c829ea95-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 7,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_31"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_32",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea69-eae3-11ee-a414-a1a504cbafae",
                "c829eaa3-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 8,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_32"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCM321_33",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c",
                "c829ea56-eae3-11ee-a414-a1a504cbafae",
                "c829ea69-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "DCM321",
            "modeldoc_vectorSize": 18,
            "modeldoc_vectorIndex": 9,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCM321_33"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_11",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "r1xr1Transpose",
            "assignmentVariables": [
                "r1xr1Transpose"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_11"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_12",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "r1xr2Transpose",
            "assignmentVariables": [
                "r1xr2Transpose"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_12"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_13",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "r1xr3Transpose",
            "assignmentVariables": [
                "r1xr3Transpose"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_13"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_21",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_21 * DCM321_11 + DCM321_22 * DCM321_12 + DCM321_23 * DCM321_13",
            "assignmentVariables": [
                "DCM321_21",
                "DCM321_11",
                "DCM321_22",
                "DCM321_12",
                "DCM321_23",
                "DCM321_13"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_21"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_22",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "r2xr2Transpose",
            "assignmentVariables": [
                "r2xr2Transpose"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_22"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_23",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "r2xr3Transpose",
            "assignmentVariables": [
                "r2xr3Transpose"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_23"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_31",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_31 * DCM321_11 + DCM321_32 * DCM321_12 + DCM321_33 * DCM321_13",
            "assignmentVariables": [
                "DCM321_31",
                "DCM321_11",
                "DCM321_32",
                "DCM321_12",
                "DCM321_33",
                "DCM321_13"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_31"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_32",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_31 * DCM321_21 + DCM321_32 * DCM321_22 + DCM321_33 * DCM321_23",
            "assignmentVariables": [
                "DCM321_31",
                "DCM321_21",
                "DCM321_32",
                "DCM321_22",
                "DCM321_33",
                "DCM321_23"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_32"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "DCMxDCMTranspose_33",
            "reqs": [
                "89d04ff0-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "r3xr3Transpose",
            "assignmentVariables": [
                "r3xr3Transpose"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerDCMxDCMTranspose_33"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "Vb_1",
            "reqs": [
                "8252d6d0-f5ca-11ee-9c69-3f6527c3093c",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Vb",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 1,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerVb_1"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "Vb_2",
            "reqs": [
                "8252d6d0-f5ca-11ee-9c69-3f6527c3093c",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Vb",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 2,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerVb_2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "Vb_3",
            "reqs": [
                "8252d6d0-f5ca-11ee-9c69-3f6527c3093c",
                "c829ea69-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Vb",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 3,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerVb_3"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "Vi_1",
            "reqs": [
                "8252d6d0-f5ca-11ee-9c69-3f6527c3093c",
                "c829ea69-eae3-11ee-a414-a1a504cbafae",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Vi",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 1,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerVi_1"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "Vi_2",
            "reqs": [
                "8252d6d0-f5ca-11ee-9c69-3f6527c3093c",
                "c829ea69-eae3-11ee-a414-a1a504cbafae",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Vi",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 2,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerVi_2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "Vi_3",
            "reqs": [
                "8252d6d0-f5ca-11ee-9c69-3f6527c3093c",
                "c829ea69-eae3-11ee-a414-a1a504cbafae",
                "c829ea7c-eae3-11ee-a414-a1a504cbafae",
                "c829ea9f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Vi",
            "modeldoc_vectorSize": 3,
            "modeldoc_vectorIndex": 3,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerVi_3"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "c1xc1Transpose",
            "reqs": [
                "3b33fb60-f5cc-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_11 * DCM321_11 + DCM321_21 * DCM321_21 + DCM321_31 * DCM321_31",
            "assignmentVariables": [
                "DCM321_11",
                "DCM321_21",
                "DCM321_31"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerc1xc1Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "c1xc2Transpose",
            "reqs": [
                "593c6d90-f5cc-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_11 * DCM321_12 + DCM321_21 * DCM321_22 + DCM321_31 * DCM321_32",
            "assignmentVariables": [
                "DCM321_11",
                "DCM321_12",
                "DCM321_21",
                "DCM321_22",
                "DCM321_31",
                "DCM321_32"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerc1xc2Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "c1xc3Transpose",
            "reqs": [
                "593c6d90-f5cc-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_11 * DCM321_13 + DCM321_21 * DCM321_23 + DCM321_31 * DCM321_33",
            "assignmentVariables": [
                "DCM321_11",
                "DCM321_13",
                "DCM321_21",
                "DCM321_23",
                "DCM321_31",
                "DCM321_33"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerc1xc3Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "c2xc2Transpose",
            "reqs": [
                "3b33fb60-f5cc-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_12 * DCM321_12 + DCM321_22 * DCM321_22 + DCM321_32 * DCM321_32",
            "assignmentVariables": [
                "DCM321_12",
                "DCM321_22",
                "DCM321_32"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerc2xc2Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "c2xc3Transpose",
            "reqs": [
                "593c6d90-f5cc-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_12 * DCM321_13 + DCM321_22 * DCM321_23 + DCM321_32 * DCM321_33",
            "assignmentVariables": [
                "DCM321_12",
                "DCM321_13",
                "DCM321_22",
                "DCM321_23",
                "DCM321_32",
                "DCM321_33"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerc2xc3Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "c3xc3Transpose",
            "reqs": [
                "3b33fb60-f5cc-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_13 * DCM321_13 + DCM321_23 * DCM321_23 + DCM321_33 * DCM321_33",
            "assignmentVariables": [
                "DCM321_13",
                "DCM321_23",
                "DCM321_33"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerc3xc3Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "cos",
            "reqs": [
                "c829ea56-eae3-11ee-a414-a1a504cbafae",
                "c829ea5c-eae3-11ee-a414-a1a504cbafae",
                "c829ea6d-eae3-11ee-a414-a1a504cbafae",
                "c829ea82-eae3-11ee-a414-a1a504cbafae",
                "c829ea95-eae3-11ee-a414-a1a504cbafae",
                "c829ea9c-eae3-11ee-a414-a1a504cbafae",
                "c829eaa2-eae3-11ee-a414-a1a504cbafae",
                "c829eaa3-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "Function",
            "moduleName": "cos",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsEulercos"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "det_3x3",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "b5689730-f5cf-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "",
            "idType": "Function",
            "moduleName": "det_3x3",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsEulerdet_3x3"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "phi",
            "reqs": [
                "c829ea56-eae3-11ee-a414-a1a504cbafae",
                "c829ea6d-eae3-11ee-a414-a1a504cbafae",
                "c829ea82-eae3-11ee-a414-a1a504cbafae",
                "c829ea95-eae3-11ee-a414-a1a504cbafae",
                "c829ea9c-eae3-11ee-a414-a1a504cbafae",
                "c829eaa3-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "phi",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerphi"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "pi",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "3.1415926536",
            "assignment": "3.1415926536",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerpi"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "psi",
            "reqs": [
                "c829ea5c-eae3-11ee-a414-a1a504cbafae",
                "c829ea6d-eae3-11ee-a414-a1a504cbafae",
                "c829ea95-eae3-11ee-a414-a1a504cbafae",
                "c829ea9c-eae3-11ee-a414-a1a504cbafae",
                "c829eaa2-eae3-11ee-a414-a1a504cbafae",
                "c829eaa3-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "psi",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerpsi"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "r1xr1Transpose",
            "reqs": [
                "ad205e90-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_11 * DCM321_11 + DCM321_12 * DCM321_12 + DCM321_13 * DCM321_13",
            "assignmentVariables": [
                "DCM321_11",
                "DCM321_12",
                "DCM321_13"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerr1xr1Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "r1xr2Transpose",
            "reqs": [
                "f03363d0-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_11 * DCM321_21 + DCM321_12 * DCM321_22 + DCM321_13 * DCM321_23",
            "assignmentVariables": [
                "DCM321_11",
                "DCM321_21",
                "DCM321_12",
                "DCM321_22",
                "DCM321_13",
                "DCM321_23"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerr1xr2Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "r1xr3Transpose",
            "reqs": [
                "f03363d0-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_11 * DCM321_31 + DCM321_12 * DCM321_32 + DCM321_13 * DCM321_33",
            "assignmentVariables": [
                "DCM321_11",
                "DCM321_31",
                "DCM321_12",
                "DCM321_32",
                "DCM321_13",
                "DCM321_33"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerr1xr3Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "r2xr2Transpose",
            "reqs": [
                "ad205e90-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_21 * DCM321_21 + DCM321_22 * DCM321_22 + DCM321_23 * DCM321_23",
            "assignmentVariables": [
                "DCM321_21",
                "DCM321_22",
                "DCM321_23"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerr2xr2Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "r2xr3Transpose",
            "reqs": [
                "f03363d0-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_21 * DCM321_31 + DCM321_22 * DCM321_32 + DCM321_23 * DCM321_33",
            "assignmentVariables": [
                "DCM321_21",
                "DCM321_31",
                "DCM321_22",
                "DCM321_32",
                "DCM321_23",
                "DCM321_33"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerr2xr3Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "r3xr3Transpose",
            "reqs": [
                "ad205e90-f5cb-11ee-9c69-3f6527c3093c"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "DCM321_31 * DCM321_31 + DCM321_32 * DCM321_32 + DCM321_33 * DCM321_33",
            "assignmentVariables": [
                "DCM321_31",
                "DCM321_32",
                "DCM321_33"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulerr3xr3Transpose"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "sin",
            "reqs": [
                "c829ea53-eae3-11ee-a414-a1a504cbafae",
                "c829ea6d-eae3-11ee-a414-a1a504cbafae",
                "c829ea82-eae3-11ee-a414-a1a504cbafae",
                "c829ea95-eae3-11ee-a414-a1a504cbafae",
                "c829ea9c-eae3-11ee-a414-a1a504cbafae",
                "c829eaa2-eae3-11ee-a414-a1a504cbafae",
                "c829eaa3-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "Function",
            "moduleName": "sin",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsEulersin"
        },
        {
            "project": "LM_requirements",
            "component_name": "Euler",
            "variable_name": "theta",
            "reqs": [
                "7fccd2c0-f5cb-11ee-9c69-3f6527c3093c",
                "c829ea53-eae3-11ee-a414-a1a504cbafae",
                "c829ea56-eae3-11ee-a414-a1a504cbafae",
                "c829ea5c-eae3-11ee-a414-a1a504cbafae",
                "c829ea6d-eae3-11ee-a414-a1a504cbafae",
                "c829ea82-eae3-11ee-a414-a1a504cbafae",
                "c829ea95-eae3-11ee-a414-a1a504cbafae",
                "c829ea9c-eae3-11ee-a414-a1a504cbafae",
                "c829eaa2-eae3-11ee-a414-a1a504cbafae",
                "c829eaa3-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "theta",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "euler321_I2B_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsEulertheta"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "STATE",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea52-eae3-11ee-a414-a1a504cbafae",
                "c829ea5f-eae3-11ee-a414-a1a504cbafae",
                "c829ea65-eae3-11ee-a414-a1a504cbafae",
                "c829ea66-eae3-11ee-a414-a1a504cbafae",
                "c829ea71-eae3-11ee-a414-a1a504cbafae",
                "c829ea74-eae3-11ee-a414-a1a504cbafae",
                "c829ea76-eae3-11ee-a414-a1a504cbafae",
                "c829ea8d-eae3-11ee-a414-a1a504cbafae",
                "c829ea90-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae",
                "c829eaa4-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "STATE",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_AutopilotSTATE"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "ap_maneuver_state",
            "reqs": [
                "c829ea71-eae3-11ee-a414-a1a504cbafae",
                "c829ea74-eae3-11ee-a414-a1a504cbafae",
                "c829ea8d-eae3-11ee-a414-a1a504cbafae",
                "c829ea90-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae",
                "c829eaa4-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "2.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Autopilotap_maneuver_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "ap_nominal_state",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea5f-eae3-11ee-a414-a1a504cbafae",
                "c829ea65-eae3-11ee-a414-a1a504cbafae",
                "c829ea74-eae3-11ee-a414-a1a504cbafae",
                "c829ea90-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "1.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Autopilotap_nominal_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "ap_standby_state",
            "reqs": [
                "c829ea52-eae3-11ee-a414-a1a504cbafae",
                "c829ea5f-eae3-11ee-a414-a1a504cbafae",
                "c829ea66-eae3-11ee-a414-a1a504cbafae",
                "c829ea71-eae3-11ee-a414-a1a504cbafae",
                "c829ea76-eae3-11ee-a414-a1a504cbafae",
                "c829eaa4-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "3.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Autopilotap_standby_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "ap_transition_state",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea52-eae3-11ee-a414-a1a504cbafae",
                "c829ea65-eae3-11ee-a414-a1a504cbafae",
                "c829ea66-eae3-11ee-a414-a1a504cbafae",
                "c829ea76-eae3-11ee-a414-a1a504cbafae",
                "c829ea8d-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Autopilotap_transition_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "apfail",
            "reqs": [
                "c829ea71-eae3-11ee-a414-a1a504cbafae",
                "c829ea76-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "apfail",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_Autopilotapfail"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "good",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea65-eae3-11ee-a414-a1a504cbafae",
                "c829ea74-eae3-11ee-a414-a1a504cbafae",
                "c829ea8d-eae3-11ee-a414-a1a504cbafae",
                "c829ea90-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae",
                "c829eaa4-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "good",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_Autopilotgood"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "standby",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea52-eae3-11ee-a414-a1a504cbafae",
                "c829ea5f-eae3-11ee-a414-a1a504cbafae",
                "c829ea66-eae3-11ee-a414-a1a504cbafae",
                "c829ea74-eae3-11ee-a414-a1a504cbafae",
                "c829ea76-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae",
                "c829eaa4-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "standby",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_Autopilotstandby"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "state",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea52-eae3-11ee-a414-a1a504cbafae",
                "c829ea5f-eae3-11ee-a414-a1a504cbafae",
                "c829ea65-eae3-11ee-a414-a1a504cbafae",
                "c829ea66-eae3-11ee-a414-a1a504cbafae",
                "c829ea71-eae3-11ee-a414-a1a504cbafae",
                "c829ea74-eae3-11ee-a414-a1a504cbafae",
                "c829ea76-eae3-11ee-a414-a1a504cbafae",
                "c829ea8d-eae3-11ee-a414-a1a504cbafae",
                "c829ea90-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae",
                "c829eaa4-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "state",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Autopilotstate"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Autopilot",
            "variable_name": "supported",
            "reqs": [
                "96f47360-f6aa-11ee-bf4a-fb27967e923c",
                "c829ea65-eae3-11ee-a414-a1a504cbafae",
                "c829ea8d-eae3-11ee-a414-a1a504cbafae",
                "c829ea91-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "supported",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Manager",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_Autopilotsupported"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "SENSTATE",
            "reqs": [
                "2590e860-faab-11ef-9707-3dbf4fc55ace",
                "c829ea67-eae3-11ee-a414-a1a504cbafae",
                "c829ea83-eae3-11ee-a414-a1a504cbafae",
                "c829ea85-eae3-11ee-a414-a1a504cbafae",
                "c829ea8a-eae3-11ee-a414-a1a504cbafae",
                "c829ea97-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "SENSTATE",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_SensorSENSTATE"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "activeMode",
            "reqs": [
                "c829ea8a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "mode",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_SensoractiveMode"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "limits",
            "reqs": [
                "2590e860-faab-11ef-9707-3dbf4fc55ace",
                "c829ea83-eae3-11ee-a414-a1a504cbafae",
                "c829ea85-eae3-11ee-a414-a1a504cbafae",
                "c829ea97-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "limits",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_Sensorlimits"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "request",
            "reqs": [
                "2590e860-faab-11ef-9707-3dbf4fc55ace",
                "c829ea67-eae3-11ee-a414-a1a504cbafae",
                "c829ea83-eae3-11ee-a414-a1a504cbafae",
                "c829ea8a-eae3-11ee-a414-a1a504cbafae",
                "c829ea97-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "request",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSM_Sensorrequest"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "sen_fault_state",
            "reqs": [
                "2590e860-faab-11ef-9707-3dbf4fc55ace",
                "c829ea83-eae3-11ee-a414-a1a504cbafae",
                "c829ea85-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "2.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Sensorsen_fault_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "sen_nominal_state",
            "reqs": [
                "c829ea67-eae3-11ee-a414-a1a504cbafae",
                "c829ea85-eae3-11ee-a414-a1a504cbafae",
                "c829ea8a-eae3-11ee-a414-a1a504cbafae",
                "c829ea97-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Sensorsen_nominal_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "sen_transition_state",
            "reqs": [
                "2590e860-faab-11ef-9707-3dbf4fc55ace",
                "c829ea67-eae3-11ee-a414-a1a504cbafae",
                "c829ea83-eae3-11ee-a414-a1a504cbafae",
                "c829ea8a-eae3-11ee-a414-a1a504cbafae",
                "c829ea97-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "1.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Sensorsen_transition_state"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM_Sensor",
            "variable_name": "senstate",
            "reqs": [
                "2590e860-faab-11ef-9707-3dbf4fc55ace",
                "c829ea67-eae3-11ee-a414-a1a504cbafae",
                "c829ea83-eae3-11ee-a414-a1a504cbafae",
                "c829ea85-eae3-11ee-a414-a1a504cbafae",
                "c829ea8a-eae3-11ee-a414-a1a504cbafae",
                "c829ea97-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "senstate",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine/Sen",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSM_Sensorsenstate"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM",
            "variable_name": "apfail",
            "reqs": [
                "c829ea9a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "apfail",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSMapfail"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM",
            "variable_name": "autopilot",
            "reqs": [
                "c829ea6e-eae3-11ee-a414-a1a504cbafae",
                "c829ea72-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "(not standby) and supported and (not apfail)",
            "assignmentVariables": [
                "standby",
                "supported",
                "apfail"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsFSMautopilot"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM",
            "variable_name": "limits",
            "reqs": [
                "c829ea6e-eae3-11ee-a414-a1a504cbafae",
                "c829ea72-eae3-11ee-a414-a1a504cbafae",
                "c829ea9a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "limits",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSMlimits"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM",
            "variable_name": "pullup",
            "reqs": [
                "c829ea6e-eae3-11ee-a414-a1a504cbafae",
                "c829ea72-eae3-11ee-a414-a1a504cbafae",
                "c829ea9a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "pullup",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSMpullup"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM",
            "variable_name": "standby",
            "reqs": [
                "c829ea9a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "standby",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSMstandby"
        },
        {
            "project": "LM_requirements",
            "component_name": "FSM",
            "variable_name": "supported",
            "reqs": [
                "c829ea9a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "supported",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "fsm_12B/FiniteStateMachine",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsFSMsupported"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "Vv",
            "reqs": [
                "c829ea59-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceVv"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "Xap1",
            "reqs": [
                "c829ea77-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceXap1"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "Xap2",
            "reqs": [
                "c829ea7b-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceXap2"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "Xr",
            "reqs": [
                "c829ea77-eae3-11ee-a414-a1a504cbafae",
                "c829ea7b-eae3-11ee-a414-a1a504cbafae",
                "c829ea8e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceXr"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "Xtarg",
            "reqs": [
                "c829ea5a-eae3-11ee-a414-a1a504cbafae",
                "c829ea99-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceXtarg"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "Xv",
            "reqs": [
                "c829ea5a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceXv"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "dot",
            "reqs": [
                "c829ea5a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidancedot"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "mag",
            "reqs": [
                "c829ea5a-eae3-11ee-a414-a1a504cbafae",
                "c829ea77-eae3-11ee-a414-a1a504cbafae",
                "c829ea7b-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidancemag"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "r",
            "reqs": [
                "c829ea5a-eae3-11ee-a414-a1a504cbafae",
                "c829ea77-eae3-11ee-a414-a1a504cbafae",
                "c829ea7b-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidancer"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "r1",
            "reqs": [
                "c829ea77-eae3-11ee-a414-a1a504cbafae",
                "c829ea7b-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidancer1"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "r2",
            "reqs": [
                "c829ea77-eae3-11ee-a414-a1a504cbafae",
                "c829ea7b-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidancer2"
        },
        {
            "project": "LM_requirements",
            "component_name": "NLGuidance",
            "variable_name": "yout",
            "reqs": [
                "c829ea59-eae3-11ee-a414-a1a504cbafae",
                "c829ea5a-eae3-11ee-a414-a1a504cbafae",
                "c829ea77-eae3-11ee-a414-a1a504cbafae",
                "c829ea7b-eae3-11ee-a414-a1a504cbafae",
                "c829ea8e-eae3-11ee-a414-a1a504cbafae",
                "c829ea99-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modelComponent": "",
            "modeldoc_id": "",
            "completed": false,
            "_id": "LM_requirementsNLGuidanceyout"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "DeltaZDividedByXt",
            "reqs": [
                "c829ea7f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> (z- pre z)/( xt - pre xt)",
            "assignmentVariables": [
                "z",
                "xt"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNDeltaZDividedByXt"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "DeltaZDividedByYt",
            "reqs": [
                "c829ea64-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> (z- pre z)/( yt - pre yt)",
            "assignmentVariables": [
                "z",
                "yt"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNDeltaZDividedByYt"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "x",
            "reqs": [
                "c829ea51-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "x",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNx"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "xt",
            "reqs": [
                "c829ea51-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "-0.881765 -> pre( -1.318121 -> pre( 0.708402 -> pre( 1.609672 -> pre( -0.592051 -> pre( -1.599366 -> pre( 1.172009 -> pre( -0.126270 -> pre( 0.749365 -> pre( 0.732314 -> pre( -0.314256 -> pre( 0.637370 -> pre( 0.533709 -> pre( 0.1000584 -> pre( -1.234874 -> pre( 0.047624 -> pre( 0.993321 -> pre( -0.320692 -> pre( 0.949918 -> pre( 0.745871 -> pre( 1.822904 -> pre( -0.768374 -> pre( -0.630797 -> pre( -0.451866 -> pre( -1.895296 -> pre( 0.534186 -> pre( 0.2610004 -> pre( -0.537954 -> pre( -0.314165 -> pre( -0.151199 -> pre( -0.742245 -> pre( -1.097353 -> pre( -1.536253 -> pre( -1.464136 -> pre( 1.786094 -> pre( -0.030268 -> pre( 0.992855 -> pre( -0.756259 -> pre( -1.969179 -> pre( 0.462487 -> pre( -0.569707 -> pre( 0.595316 -> pre( 1.383909 -> pre( -1.594587 -> pre( 0.353207 -> pre( 0.329529 -> pre( 0.087215 -> pre( -0.181601 -> pre( 1.866808 -> pre( -1.270772 -> pre( 0.237569 -> pre( 0.505898 -> pre( -1.879480 -> pre( 0.569092 -> pre( 1.352645 -> pre( -0.419456 -> pre( -0.250631 -> pre( -1.660469 -> pre( 0.3255100 -> pre( 1.486728 -> pre( -1.172372 -> pre( -1.621560 -> pre( -1.248191 -> pre( 0.671346 -> pre( 0.929684 -> pre( 0.524042 -> pre( -0.127175 -> pre( -0.742551 -> pre( 0.565867 -> pre( 0.2481008 -> pre( 0.654907 -> pre( -1.500492 -> pre( 0.6961009 -> pre( 0.721245 -> pre( 1.720481 -> pre( 1.315279 -> pre( -1.287599 -> pre( 1.796963 -> pre( -1.201509 -> pre( -1.129277 -> pre( -1.965912 -> pre( -0.797494 -> pre( -0.902117 -> pre( 0.345794 -> pre( -0.413789 -> pre( -1.254389 -> pre( -0.428734 -> pre( -1.381625 -> pre( 1.329218 -> pre( -1.400992 -> pre( 0.718184 -> pre( 1.000360 -> pre( -1.940440 -> pre( -1.4310014 -> pre( -1.877378 -> pre( 1.234782 -> pre( -1.811416 -> pre( 0.664726 -> pre( -0.175870 -> pre( 1.211985 -> pre( -0.566244 -> pre( -1.898664 -> pre( -1.125647 -> pre( 0.843660 -> pre( 0.195683 -> pre( 1.478772 -> pre( 0.955343 -> pre( -1.587079 -> pre( 1.885733 -> pre( 0.954850 -> pre( -1.944570 -> pre( 0.716487 -> pre( -0.057989 -> pre( -1.861127 -> pre( -1.542242 -> pre( -1.693500 -> pre( 0.431299 -> pre( -1.066137 -> pre( -1.431954 -> pre( 0.120693 -> pre( 1.721205 -> pre( 0.467611 -> pre( 0.759568 -> pre( -1.062296 -> pre( -1.172625 -> pre( -1.850535 -> pre( 0.653460 -> pre( 0.029018 -> pre( -0.056798 -> pre( 1.446780 -> pre( 1.862060 -> pre( 1.038752 -> pre( -1.013282 -> pre( 0.705070 -> pre( 1.037222 -> pre( 0.344759 -> pre( 1.289757 -> pre( 1.707341 -> pre( 0.550268 -> pre( -1.924249 -> pre( -1.262638 -> pre( -1.893037 -> pre( 1.739995 -> pre( -0.062131 -> pre( 1.179142 -> pre( -0.172659 -> pre( -0.023163 -> pre( -0.297144 -> pre( 1.567089 -> pre( 1.497140 -> pre( 0.532601 -> pre( -0.830883 -> pre( -0.833287 -> pre( -1.018000 -> pre( 0.817392 -> pre( 1.098448 -> pre( 1.290614 -> pre( 1.224759 -> pre( -0.984916 -> pre( 1.201999 -> pre( 0.518835 -> pre( -1.073994 -> pre( -0.475693 -> pre( -0.187193 -> pre( 0.002238 -> pre( 0.162286 -> pre( -0.619419 -> pre( -0.834280 -> pre( 0.814114 -> pre( 1.736314 -> pre( 0.376699 -> pre( 0.372363 -> pre( 0.954924 -> pre( -0.509427 -> pre( -0.186918 -> pre( 0.037502 -> pre( 1.714843 -> pre( -0.196849 -> pre( 0.549739 -> pre( -0.162545 -> pre( 0.215098 -> pre( -1.835069 -> pre( 1.208809 -> pre( 0.686047 -> pre( -1.198690 -> pre( -1.941655 -> pre( 1.052664 -> pre( 0.270047 -> pre( 0.616855 -> pre( 0.538962 -> pre( 0.937321 -> pre( 1.549306 -> pre( 0.663636 -> pre( -1.517302 -> pre( 0.854942 -> pre( -0.2110091 -> pre( 0.563929 -> pre( 0.595585 -> pre( 0.713502 -> pre( -1.764689 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNxt"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "y",
            "reqs": [
                "c829ea51-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "y",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNy"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "yt",
            "reqs": [
                "c829ea51-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "-1.1004187 -> pre( -1.328074 -> pre( 1.714118 -> pre( 0.060924 -> pre( 0.693454 -> pre( 0.671201 -> pre( -1.674154 -> pre( -1.099706 -> pre( -0.863243 -> pre( 1.655055 -> pre( -1.083594 -> pre( -1.005518 -> pre( 0.705163 -> pre( 0.593963 -> pre( 0.814707 -> pre( 1.348413 -> pre( 0.909183 -> pre( -1.922262 -> pre( 0.334986 -> pre( 1.683507 -> pre( -1.633288 -> pre( 0.218242 -> pre( 1.723211 -> pre( -1.202188 -> pre( 0.1001278 -> pre( -1.493044 -> pre( 0.994909 -> pre( -0.741325 -> pre( -1.251303 -> pre( 1.921580 -> pre( 0.851309 -> pre( 1.302600 -> pre( 0.732879 -> pre( 0.757607 -> pre( 0.123504 -> pre( -1.244585 -> pre( -0.027937 -> pre( 0.238159 -> pre( 1.313121 -> pre( -1.188526 -> pre( 0.1100985 -> pre( 1.231245 -> pre( -0.579582 -> pre( 0.1910020 -> pre( 0.869751 -> pre( -1.189950 -> pre( 0.575028 -> pre( -1.999644 -> pre( 0.052708 -> pre( 0.279316 -> pre( -1.971853 -> pre( 1.569890 -> pre( 1.332774 -> pre( 1.1000662 -> pre( 1.152543 -> pre( -0.505482 -> pre( -1.390752 -> pre( -0.590959 -> pre( 0.580392 -> pre( 1.727747 -> pre( -1.626716 -> pre( 0.955111 -> pre( -1.778931 -> pre( 1.028634 -> pre( -0.146043 -> pre( -1.819982 -> pre( 1.368118 -> pre( -1.341154 -> pre( -1.539704 -> pre( -0.913757 -> pre( -0.742455 -> pre( 0.424358 -> pre( 0.709867 -> pre( 1.950569 -> pre( 1.973043 -> pre( 1.030145 -> pre( -0.899762 -> pre( 1.816055 -> pre( -0.355671 -> pre( -1.133507 -> pre( 0.516520 -> pre( -1.940524 -> pre( -1.826801 -> pre( -1.278952 -> pre( -1.198140 -> pre( 0.877430 -> pre( -0.228530 -> pre( 1.381970 -> pre( -0.440840 -> pre( 1.350209 -> pre( 0.993675 -> pre( 0.335444 -> pre( -1.357706 -> pre( 0.115361 -> pre( -0.149316 -> pre( -0.481825 -> pre( -1.627080 -> pre( -0.963418 -> pre( -0.656653 -> pre( -0.499551 -> pre( -1.414961 -> pre( -0.732920 -> pre( -0.875098 -> pre( 1.280495 -> pre( -0.631641 -> pre( 1.488009 -> pre( -0.927882 -> pre( 1.1001727 -> pre( 0.436836 -> pre( -1.928125 -> pre( 0.806046 -> pre( -1.936991 -> pre( 0.735572 -> pre( 1.511607 -> pre( -0.272776 -> pre( 0.525372 -> pre( 0.344163 -> pre( -1.090355 -> pre( 1.138619 -> pre( -0.849455 -> pre( 1.697502 -> pre( -0.806099 -> pre( 0.145213 -> pre( -0.6654100 -> pre( -1.050824 -> pre( 0.180957 -> pre( -1.569257 -> pre( -1.451379 -> pre( -1.622290 -> pre( -0.756466 -> pre( 1.250546 -> pre( 0.054231 -> pre( 1.465906 -> pre( 1.921949 -> pre( -0.693389 -> pre( -1.121533 -> pre( 0.072895 -> pre( -0.587977 -> pre( 1.437909 -> pre( -0.959917 -> pre( 1.374884 -> pre( 0.331206 -> pre( 0.877622 -> pre( -0.625905 -> pre( -1.962904 -> pre( -1.230214 -> pre( 0.029551 -> pre( -1.903033 -> pre( 0.200166 -> pre( -0.895264 -> pre( 0.784965 -> pre( 1.525411 -> pre( -1.901274 -> pre( -0.635174 -> pre( -0.314377 -> pre( -1.679955 -> pre( -1.682585 -> pre( -1.7100495 -> pre( 1.601364 -> pre( 1.877233 -> pre( -0.434772 -> pre( -0.745660 -> pre( 0.213254 -> pre( 1.168192 -> pre( 1.193256 -> pre( 1.453034 -> pre( 1.191849 -> pre( -1.974494 -> pre( 1.679606 -> pre( -1.928151 -> pre( -1.882334 -> pre( 0.845808 -> pre( 0.153657 -> pre( 0.098354 -> pre( 0.008960 -> pre( -1.7373100 -> pre( -1.079838 -> pre( -1.531839 -> pre( 1.959084 -> pre( -1.717934 -> pre( -1.759905 -> pre( 0.646308 -> pre( -0.623769 -> pre( -1.485947 -> pre( 0.548543 -> pre( 0.985953 -> pre( 1.2210069 -> pre( -0.923891 -> pre( -0.264081 -> pre( -0.392774 -> pre( 0.432569 -> pre( 1.080350 -> pre( 1.764496 -> pre( -1.474141 -> pre( -0.9771009 -> pre( -0.486757 -> pre( 1.974943 -> pre( -0.636195 -> pre( 1.598208 -> pre( -1.050074 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNyt"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "z",
            "reqs": [
                "c829ea51-eae3-11ee-a414-a1a504cbafae",
                "c829ea88-eae3-11ee-a414-a1a504cbafae",
                "c829ea96-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "z",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNz"
        },
        {
            "project": "LM_requirements",
            "component_name": "NN",
            "variable_name": "zt",
            "reqs": [
                "c829ea51-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "-0.135335 -> pre( -0.075438 -> pre( -0.078236 -> pre( -0.119071 -> pre( 0.073414 -> pre( -0.099152 -> pre( -0.048770 -> pre( -0.066163 -> pre( -0.083034 -> pre( -0.0860100 -> pre( -0.076424 -> pre( -0.1001141 -> pre( 0.099677 -> pre( 0.443192 -> pre( -0.133209 -> pre( -0.132875 -> pre( -0.132661 -> pre( -0.062721 -> pre( -0.005279 -> pre( -0.080539 -> pre( -0.012487 -> pre( 0.191241 -> pre( -0.081628 -> pre( -0.124795 -> pre( -0.070937 -> pre( -0.122527 -> pre( -0.020124 -> pre( 0.069596 -> pre( -0.125778 -> pre( -0.066111 -> pre( -0.076976 -> pre( -0.1004497 -> pre( -0.1004684 -> pre( -0.113415 -> pre( -0.089414 -> pre( -0.116728 -> pre( 0.005019 -> pre( 0.198046 -> pre( -0.016984 -> pre( -0.123179 -> pre( 0.473460 -> pre( -0.134095 -> pre( -0.131719 -> pre( -0.119758 -> pre( 0.049207 -> pre( -0.114207 -> pre( 0.471823 -> pre( -0.053800 -> pre( -0.076049 -> pre( -0.127482 -> pre( -0.057003 -> pre( -0.113281 -> pre( -0.021320 -> pre( -0.115301 -> pre( -0.091738 -> pre( 0.369306 -> pre( -0.135335 -> pre( -0.094287 -> pre( 0.357842 -> pre( -0.023250 -> pre( -0.054194 -> pre( -0.073618 -> pre( -0.0331002 -> pre( -0.112533 -> pre( 0.047168 -> pre( -0.071613 -> pre( -0.134419 -> pre( -0.128746 -> pre( -0.114677 -> pre( 0.042224 -> pre( 0.007452 -> pre( -0.125834 -> pre( 0.004288 -> pre( -0.044004 -> pre( -0.006183 -> pre( -0.1009888 -> pre( -0.124440 -> pre( -0.008087 -> pre( -0.118597 -> pre( -0.120591 -> pre( -0.050284 -> pre( -0.041695 -> pre( -0.049623 -> pre( -0.130557 -> pre( -0.121677 -> pre( -0.128968 -> pre( 0.603338 -> pre( -0.061887 -> pre( -0.135231 -> pre( -0.0632100 -> pre( -0.111918 -> pre( -0.037199 -> pre( -0.016895 -> pre( -0.135093 -> pre( -0.073389 -> pre( -0.130623 -> pre( -0.013121 -> pre( -0.094025 -> pre( 0.338832 -> pre( -0.128850 -> pre( -0.129634 -> pre( -0.049926 -> pre( -0.135264 -> pre( -0.128701 -> pre( 0.363417 -> pre( -0.041715 -> pre( -0.131298 -> pre( -0.065392 -> pre( -0.064805 -> pre( -0.035425 -> pre( -0.040836 -> pre( -0.045870 -> pre( 0.264309 -> pre( -0.015133 -> pre( -0.125012 -> pre( -0.092430 -> pre( 0.512967 -> pre( -0.129546 -> pre( -0.082593 -> pre( 0.126378 -> pre( -0.014033 -> pre( 0.055196 -> pre( 0.2210041 -> pre( -0.118697 -> pre( -0.123969 -> pre( -0.077445 -> pre( -0.1005060 -> pre( -0.134609 -> pre( -0.117258 -> pre( -0.115864 -> pre( -0.026329 -> pre( -0.027774 -> pre( -0.090872 -> pre( -0.048283 -> pre( -0.117362 -> pre( -0.095082 -> pre( -0.126050 -> pre( -0.086723 -> pre( -0.128056 -> pre( -0.035560 -> pre( -0.076195 -> pre( -0.067036 -> pre( -0.062727 -> pre( 0.406909 -> pre( -0.022415 -> pre( -0.116083 -> pre( 0.997183 -> pre( -0.066341 -> pre( -0.123298 -> pre( -0.097438 -> pre( 0.040731 -> pre( -0.098716 -> pre( -0.044490 -> pre( -0.1004218 -> pre( 0.1008228 -> pre( -0.053898 -> pre( -0.038971 -> pre( -0.040988 -> pre( -0.073943 -> pre( -0.027589 -> pre( 0.342630 -> pre( -0.128387 -> pre( 0.554944 -> pre( -0.098597 -> pre( -0.1002059 -> pre( -0.134165 -> pre( -0.132376 -> pre( -0.036327 -> pre( -0.076227 -> pre( -0.006830 -> pre( -0.067382 -> pre( 0.062132 -> pre( 0.025313 -> pre( 0.558338 -> pre( 0.931774 -> pre( -0.098596 -> pre( -0.051141 -> pre( -0.127533 -> pre( -0.049990 -> pre( -0.1000683 -> pre( -0.092451 -> pre( -0.063236 -> pre( -0.133659 -> pre( -0.115247 -> pre( -0.129782 -> pre( -0.032632 -> pre( -0.118877 -> pre( 0.0291001 -> pre( 0.350449 -> pre( 0.355906 -> pre( -0.022628 -> pre( -0.072471 -> pre( -0.073076 -> pre( -0.039573 -> pre( -0.127068 -> pre( 0.542227 -> pre( -0.047381 -> pre( 0.112550 -> pre( -0.096422 -> pre( -0.047435 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "nn_12B/nn_2x10x10x1",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsNNzt"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "airspeed_command_acceleration",
            "reqs": [
                "c829ea84-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> (xcvdt_cmd_fcs_fps2 - pre xcvdt_cmd_fcs_fps2) * 100.0",
            "assignmentVariables": [
                "xcvdt_cmd_fcs_fps2"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorairspeed_command_acceleration"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "hcvdt_cmd_fcs_fps2",
            "reqs": [
                "c829ea73-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "hcvdt_cmd_fcs_fps2",
            "modeldoc_vectorIndex": null,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorhcvdt_cmd_fcs_fps2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "height_command_acceleration",
            "reqs": [
                "c829ea94-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> (hcvdt_cmd_fcs_fps2 - pre hcvdt_cmd_fcs_fps2) * 100.0",
            "assignmentVariables": [
                "hcvdt_cmd_fcs_fps2"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorheight_command_acceleration"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "lcvdt_cmd_fcs_dps2",
            "reqs": [
                "c829ea6c-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "lcvdt_cmd_fcs_dps2",
            "modeldoc_vectorIndex": null,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorlcvdt_cmd_fcs_dps2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "mcvdt_cmd_fcs_dps2",
            "reqs": [
                "c829ea98-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "mcvdt_cmd_fcs_dps2",
            "modeldoc_vectorIndex": null,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatormcvdt_cmd_fcs_dps2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "ncvdt_cmd_fcs_dps2",
            "reqs": [
                "c829ea9e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ncvdt_cmd_fcs_dps2",
            "modeldoc_vectorIndex": null,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorncvdt_cmd_fcs_dps2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "pitch_command_acceleration",
            "reqs": [
                "c829ea78-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> ( mcvdt_cmd_fcs_dps2 - pre mcvdt_cmd_fcs_dps2 ) * 100.0",
            "assignmentVariables": [
                "mcvdt_cmd_fcs_dps2"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorpitch_command_acceleration"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "roll_command_acceleration",
            "reqs": [
                "c829ea70-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> ( lcvdt_cmd_fcs_dps2 - pre lcvdt_cmd_fcs_dps2 ) * 100.0",
            "assignmentVariables": [
                "lcvdt_cmd_fcs_dps2"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorroll_command_acceleration"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "xcvdt_cmd_fcs_fps2",
            "reqs": [
                "c829ea6a-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "xcvdt_cmd_fcs_fps2",
            "modeldoc_vectorIndex": null,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatorxcvdt_cmd_fcs_fps2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Regulator",
            "variable_name": "yaw_command_acceleration",
            "reqs": [
                "c829ea7e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> ( ncvdt_cmd_fcs_dps2 - pre ncvdt_cmd_fcs_dps2 ) * 100.0",
            "assignmentVariables": [
                "ncvdt_cmd_fcs_dps2"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "regs_12B",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRegulatoryaw_command_acceleration"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "Cb",
            "reqs": [
                "c829ea5e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "(roll_angle > -6.0)  and  (roll_angle < 6.0)",
            "assignmentVariables": [
                "roll_angle"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotCb"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "Cc1",
            "reqs": [
                "c829ea5e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "lm_challenges: Phi >= 30.0",
            "assignment": "roll_angle >= 30.0",
            "assignmentVariables": [
                "roll_angle"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotCc1"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "Cc2",
            "reqs": [
                "c829ea5e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "lm_challenges: Phi <= -30.0",
            "assignment": "roll_angle <= -30.0",
            "assignmentVariables": [
                "roll_angle"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotCc2"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "Cd",
            "reqs": [
                "c829ea5e-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "(TurnKnob >=3.0 or TurnKnob <= -3.0) and (TurnKnob <=30.0 or TurnKnob >= -30.0)",
            "assignment": "(TurnKnob >=3.0 or TurnKnob <= -3.0) and (TurnKnob <=30.0 or TurnKnob >= -30.0)",
            "assignmentVariables": [
                "TurnKnob"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotCd"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "TurnKnob",
            "reqs": [
                "c829ea50-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Turn Knob",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotTurnKnob"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "aileron_cmd",
            "reqs": [
                "c829ea86-eae3-11ee-a414-a1a504cbafae",
                "c829ea8f-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Ail Cmd",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotaileron_cmd"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "autopilot_engaged",
            "reqs": [
                "c829ea86-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "AP Eng",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsRollAutopilotautopilot_engaged"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "hdg_hold",
            "reqs": [
                "c829eaa0-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "lm_challenges: \nrequire hdg_mode_is_active ;\nensure roll_cmd = hdg_hold_mode_cmd ;\n",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "HDG Mode",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsRollAutopilothdg_hold"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "hdg_hold_mode_cmd",
            "reqs": [
                "c829eaa0-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "HdgMode_cmd",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilothdg_hold_mode_cmd"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "roll_angle",
            "reqs": [
                "c829ea5e-eae3-11ee-a414-a1a504cbafae",
                "c829ea87-eae3-11ee-a414-a1a504cbafae",
                "c829eaa1-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Phi",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotroll_angle"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "roll_cmd",
            "reqs": [
                "c829ea55-eae3-11ee-a414-a1a504cbafae",
                "c829eaa0-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "phiCmd",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotroll_cmd"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "roll_hold",
            "reqs": [
                "c829ea55-eae3-11ee-a414-a1a504cbafae",
                "c829ea5e-eae3-11ee-a414-a1a504cbafae",
                "c829ea87-eae3-11ee-a414-a1a504cbafae",
                "c829eaa1-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "TR: \nrequire autopilot_engaged and no_other_lateral_mode ;\nensure roll_cmd = roll_hold_reference ;\n\nUnfolded definition of no_other_lateral_mode",
            "assignment": "autopilot_engaged and not hdg_hold",
            "assignmentVariables": [
                "autopilot_engaged",
                "hdg_hold"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotroll_hold"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "roll_hold_reference",
            "reqs": [
                "c829ea50-eae3-11ee-a414-a1a504cbafae",
                "c829ea55-eae3-11ee-a414-a1a504cbafae",
                "c829ea5e-eae3-11ee-a414-a1a504cbafae",
                "c829ea87-eae3-11ee-a414-a1a504cbafae",
                "c829eaa1-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "PhiRef_cmd",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotroll_hold_reference"
        },
        {
            "project": "LM_requirements",
            "component_name": "RollAutopilot",
            "variable_name": "sign_roll_angle",
            "reqs": [
                "c829eaa1-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "if (roll_angle >= 0.0) then 1.0 else (- 1.0)",
            "assignmentVariables": [
                "roll_angle"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsRollAutopilotsign_roll_angle"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "CAT1",
            "reqs": [
                "c829ea8b-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "integer",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMCAT1"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "CAT3",
            "reqs": [
                "c829ea93-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "integer",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "1",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMCAT3"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "CalAirspeedMin",
            "reqs": [
                "c829ea8b-eae3-11ee-a414-a1a504cbafae",
                "c829ea93-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "SWIM_CalAirspeedmin_kts",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMCalAirspeedMin"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "E_SWIM_WARNING_ON",
            "reqs": [
                "c829ea60-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "1.0",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIME_SWIM_WARNING_ON"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "lowSpeedWarningAllowed",
            "reqs": [
                "c829ea60-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "SWIM_ASWarningAllowed",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMlowSpeedWarningAllowed"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "sqrt",
            "reqs": [
                "c829ea8b-eae3-11ee-a414-a1a504cbafae",
                "c829ea93-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "",
            "idType": "Function",
            "moduleName": "sqrt",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsSWIMsqrt"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "storeCat",
            "reqs": [
                "c829ea8b-eae3-11ee-a414-a1a504cbafae",
                "c829ea93-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "int32",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "diGet_S_CatSwitchPosition",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMstoreCat"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "swimGet_AgcasLowSpeedWarn",
            "reqs": [
                "c829ea60-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "swimGet_AgcasLowSpeedWarn",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMswimGet_AgcasLowSpeedWarn"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "vehAirPress",
            "reqs": [
                "c829ea60-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "E_AI_IMPACT_PRESSURE",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMvehAirPress"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "warningTrigForMinPress",
            "reqs": [
                "c829ea60-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "SWIM_Qcmin_lbspft2",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMwarningTrigForMinPress"
        },
        {
            "project": "LM_requirements",
            "component_name": "SWIM",
            "variable_name": "weight",
            "reqs": [
                "c829ea8b-eae3-11ee-a414-a1a504cbafae",
                "c829ea93-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "muxGet_T_Mux_AircraftGrossWeight_lbs",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "swim_12B/swim_airspeed",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsSWIMweight"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "FC",
            "reqs": [
                "c829ea6f-eae3-11ee-a414-a1a504cbafae",
                "c829ea79-eae3-11ee-a414-a1a504cbafae",
                "c829ea9d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "int32",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "FC",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorFC"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "PC",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "int32",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "PC",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorPC"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "PCLimit",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "int32",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "PClimit",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorPCLimit"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "Tlevel",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "Tlevel",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorTlevel"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "ia",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae",
                "c829ea6f-eae3-11ee-a414-a1a504cbafae",
                "c829ea9d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ia",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitoria"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "ib",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae",
                "c829ea79-eae3-11ee-a414-a1a504cbafae",
                "c829ea9d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ib",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorib"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "ic",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae",
                "c829ea6f-eae3-11ee-a414-a1a504cbafae",
                "c829ea79-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ic",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitoric"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "mid_value",
            "reqs": [
                "c829ea92-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "if (( ia <= ib and ib <= ic) or (ic <= ib and ib <= ia)) then ib else if (( ib <= ia and ia <= ic) or (ic <= ia and ia <= ib)) then ia else ic",
            "assignmentVariables": [
                "ia",
                "ib",
                "ic"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitormid_value"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "no_fail",
            "reqs": [
                "c829ea61-eae3-11ee-a414-a1a504cbafae",
                "c829ea92-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "FC = 0",
            "assignmentVariables": [
                "FC"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorno_fail"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "set_val",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea6f-eae3-11ee-a414-a1a504cbafae",
                "c829ea79-eae3-11ee-a414-a1a504cbafae",
                "c829ea92-eae3-11ee-a414-a1a504cbafae",
                "c829ea9d-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "sel_val",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorset_val"
        },
        {
            "project": "LM_requirements",
            "component_name": "TriplexSignalMonitor",
            "variable_name": "single_fail_reported",
            "reqs": [
                "c829ea54-eae3-11ee-a414-a1a504cbafae",
                "c829ea61-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "(FC =1) or (FC =2) or (FC =4)",
            "assignmentVariables": [
                "FC"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "triplex_12B/TriplexMonitorNoFail",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTriplexSignalMonitorsingle_fail_reported"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "BL",
            "reqs": [
                "c829ea5b-eae3-11ee-a414-a1a504cbafae",
                "c829ea62-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "BL",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_IntegratorBL"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "IC",
            "reqs": [
                "c829ea62-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "ic",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_IntegratorIC"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "RESET",
            "reqs": [
                "c829ea62-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "reset",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": true,
            "_id": "LM_requirementsTustin_IntegratorRESET"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "TL",
            "reqs": [
                "c829ea5b-eae3-11ee-a414-a1a504cbafae",
                "c829ea62-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "TL",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_IntegratorTL"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "normal",
            "reqs": [
                "c829ea80-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "not RESET and yout <= TL and yout >= BL",
            "assignmentVariables": [
                "RESET",
                "yout",
                "TL",
                "BL"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratornormal"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "normalv2",
            "reqs": [
                "027ad630-f45b-11ee-8874-8dbd3274a826"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "not RESET",
            "assignmentVariables": [
                "RESET"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratornormalv2"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "normalv3",
            "reqs": [
                "0b8c7620-f45b-11ee-8874-8dbd3274a826"
            ],
            "dataType": "boolean",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "not RESET and (timeStep * 0.5 * ( xin + xinpv ) + ypv) <= TL and (timeStep * 0.5 * ( xin + xinpv ) + ypv) >= BL",
            "assignmentVariables": [
                "RESET",
                "timeStep",
                "xin",
                "xinpv",
                "ypv",
                "TL",
                "BL"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratornormalv3"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "timeStep",
            "reqs": [
                "027ad630-f45b-11ee-8874-8dbd3274a826",
                "0b8c7620-f45b-11ee-8874-8dbd3274a826",
                "c829ea80-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "T",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_IntegratortimeStep"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "xin",
            "reqs": [
                "027ad630-f45b-11ee-8874-8dbd3274a826",
                "0b8c7620-f45b-11ee-8874-8dbd3274a826",
                "c829ea80-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "xin",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratorxin"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "xinpv",
            "reqs": [
                "027ad630-f45b-11ee-8874-8dbd3274a826",
                "0b8c7620-f45b-11ee-8874-8dbd3274a826",
                "c829ea80-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> pre xin",
            "assignmentVariables": [
                "xin"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratorxinpv"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "yout",
            "reqs": [
                "027ad630-f45b-11ee-8874-8dbd3274a826",
                "0b8c7620-f45b-11ee-8874-8dbd3274a826",
                "c829ea5b-eae3-11ee-a414-a1a504cbafae",
                "c829ea62-eae3-11ee-a414-a1a504cbafae",
                "c829ea80-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "assignmentVariables": [],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "yout",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratoryout"
        },
        {
            "project": "LM_requirements",
            "component_name": "Tustin_Integrator",
            "variable_name": "ypv",
            "reqs": [
                "027ad630-f45b-11ee-8874-8dbd3274a826",
                "0b8c7620-f45b-11ee-8874-8dbd3274a826",
                "c829ea80-eae3-11ee-a414-a1a504cbafae"
            ],
            "dataType": "double",
            "idType": "Internal",
            "moduleName": "",
            "description": "",
            "assignment": "0.0 -> pre yout",
            "assignmentVariables": [
                "yout"
            ],
            "copilotAssignment": "",
            "smvAssignmentVariables": [],
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modeldoc_vectorIndex": 0,
            "modelComponent": "integrator_12B/Tustin\nIntegrator\n(Limited, Resettable, States)",
            "completed": true,
            "smvCompleted": false,
            "_id": "LM_requirementsTustin_Integratorypv"
        },
        {
            "file_path": "/home/akatis/git/lm_challenges/FRET_CoCoSim/0_triplex/triplex_12B.mdl",
            "date": "06-Apr-2024",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "TriplexSignalMonitor",
            "modeldoc": true,
            "_id": "bb1dd290-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ia",
            "portType": "Inport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd291-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ib",
            "portType": "Inport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd292-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd293-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Tlevel",
            "portType": "Inport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd294-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "PClimit",
            "portType": "Inport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "int32"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd295-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "PC",
            "portType": "Outport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "int32"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd296-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TC",
            "portType": "Outport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "int32"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd297-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "FC",
            "portType": "Outport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "int32"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd298-f457-11ee-bfe8-7393df765a69"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "sel_val",
            "portType": "Outport",
            "component_name": "triplex_12B/TriplexMonitorNoFail",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "TriplexSignalMonitor",
            "_id": "bb1dd299-f457-11ee-bfe8-7393df765a69"
        },
        {
            "file_path": "/Users/hbourbou/Documents/babelfish/cocosim_tests/lm_new/9_euler/euler321_I2B_12B.mdl",
            "date": "05-Nov-2019",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "Euler",
            "modeldoc": true,
            "_id": "f8fcda60-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda61-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "theta",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda62-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "psi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda63-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "Euler",
            "_id": "f8fcda64-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda65-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "theta",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda66-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "psi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda67-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "Euler",
            "_id": "f8fcda68-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "psi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda69-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M11",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda6a-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M12",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda6b-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M13",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda6c-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M21",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda6d-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M22",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda6e-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M23",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda6f-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M31",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda70-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M32",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda71-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M33",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda72-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Matrix",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda73-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R1",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 1 Rotation\n(Yaw)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda74-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "theta",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda75-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M11",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda76-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M12",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda77-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M13",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda78-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M21",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda79-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M22",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda7a-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M23",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda7b-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M31",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda7c-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M32",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda7d-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M33",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda7e-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Matrix",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda7f-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R2",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 2 Rotation\n(Pitch)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda80-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phi",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda81-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M11",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda82-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M12",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda83-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M13",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda84-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M21",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda85-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M22",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda86-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M23",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda87-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M31",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda88-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M32",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda89-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M33",
            "portType": "Inport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "Euler",
            "_id": "f8fcda8a-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Matrix",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda8b-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R3",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)/Euler 3 Rotation\n(Roll)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda8c-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM321",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda8d-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B/COORDINATE TRANSFORM\nEULER 321\n(INERTIAL TO BODY)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "Euler",
            "_id": "f8fcda8e-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM321",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "Euler",
            "_id": "f8fcda8f-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Outport",
            "component_name": "euler321_I2B_12B",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "Euler",
            "_id": "f8fcda90-f5cf-11ee-89e5-9da00dc91b46"
        },
        {
            "file_path": "/Users/hbourbou/Documents/babelfish.arc.nasa.gov/cocosim_tests/lm_new/7_autopilot/ap_12BAdapted.slx",
            "date": "04-Nov-2019",
            "Declarations": {
                "Enumerations": []
            },
            "project": "LM_requirements",
            "fretComponent": "RollAutopilot",
            "modeldoc": true,
            "_id": "fd6bcef0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "APeng",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HDGmode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ALTMode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HDGref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TurnKnob",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "trim_altref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "trim_pitchwheel",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "trim_flap",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "trim_throttle",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcef9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "trim_rudder",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcefa-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AD",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 5,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcefb-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ID",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                6,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcefc-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AP Eng",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcefd-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HDG Mode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcefe-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ALT Mode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bceff-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HDG Ref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf00-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Turn Knob",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf01-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ALT Ref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf02-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pitch Wheel",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf03-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf04-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Theta",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf05-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf06-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf07-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alt",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf08-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alt Rate",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf09-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TAS",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf0a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AP Eng1",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf0b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ALT Mode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf0c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alt Ref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf0d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pitch Wheel ",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf0e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alt Ref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf0f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alt",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf10-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alt Rate",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf11-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TAS",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf12-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Theta",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf13-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ALT Mode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf14-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "up",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf15-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf16-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lo",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf17-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "up",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf18-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf19-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "lo",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf1a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter/Saturation\nDynamic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf1b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/Rate Limiter",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf1c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf1d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf1e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf1f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf20-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Theta Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Altitude Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf21-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Disp_Cmd",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf22-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Disp_FB ",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf23-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rate_FB",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf24-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Engaged",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf25-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf26-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf27-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf28-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Surf_Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Basic Pitch Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf29-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Rate Feedback",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf2a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Rate Feedback",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf2b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Rate Feedback",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf2c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pitch Rate",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Rate Feedback",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf2d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Theta",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf2e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AP Eng",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf2f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pitch Wheel",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf30-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference/latch",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf31-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "E",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference/latch",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf32-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference/latch",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf33-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Theta Ref",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot/Pitch Reference",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf34-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Elv Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Pitch_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf35-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf36-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Psi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf37-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf38-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TAS",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf39-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AP Eng",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf3a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HDG Mode",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf3b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HDG Ref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf3c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Turn Knob",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf3d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Disp_Cmd",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf3e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Disp_FB ",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf3f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rate_FB",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf40-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Engaged",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf41-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf42-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf43-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf44-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Surf_Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Basic Roll Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf45-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Psi Ref",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf46-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Psi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf47-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TAS",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf48-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "plus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode/angle diff",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf49-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "minus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode/angle diff",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf4a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "diff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode/angle diff",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf4b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Heading Mode",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf4c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf4d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AP eng",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf4e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Turn Knob",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf4f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference/latch",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf50-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "E",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference/latch",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf51-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference/latch",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf52-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi Ref",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot/Roll Reference",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf53-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ail Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf54-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HdgMode_cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf55-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "PhiRef_cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf56-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phiCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Roll_Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf57-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf58-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf59-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TAS",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf5a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AP Eng",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper",
            "tool": "Simulink",
            "dataType": [
                "boolean"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf5b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi ",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper/Basic Yaw Damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf5c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper/Basic Yaw Damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf5d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "TAS",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper/Basic Yaw Damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf5e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rud Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper/Basic Yaw Damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf5f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rud Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot/Yaw_damper",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf60-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Aileron Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf61-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Elevator Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf62-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rudder Cmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf63-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phiCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf64-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HdgModeCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Autopilot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf65-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "EnvirBus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                4,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                3
            ],
            "width": 8,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf66-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pilot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf67-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pilot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf68-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "EnvirBus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                4,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                3
            ],
            "width": 8,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf69-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "FltParams",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                1
            ],
            "width": 7,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf6a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Forces",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf6b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Moments",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf6c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf6d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf6e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf6f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf70-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf71-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf72-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf73-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf74-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "C",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf75-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p q r",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf76-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Quat",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf77-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A11",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf78-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A11",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A11",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf79-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A12",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf7a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A12",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A12",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf7b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A13",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf7c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A13",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A13",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf7d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A21",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf7e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A21",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A21",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf7f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A22",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf80-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A22",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A22",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf81-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A23",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf82-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A23",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A23",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf83-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A31",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf84-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A31",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A31",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf85-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A32",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf86-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A32",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A32",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf87-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A33",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf88-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A33",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/A33",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf89-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M11",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf8a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M12",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf8b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M13",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf8c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M21",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf8d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M22",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf8e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M23",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf8f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M31",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf90-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M32",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf91-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "M33",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf92-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Matrix",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Create 3x3 Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf93-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Quaternion\nNormalize",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf94-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Quaternion\nNormalize/Quaternion\nModulus",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf95-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Quaternion\nNormalize/Quaternion\nModulus/Quaternion\nNorm",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf96-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "norm(q)",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Quaternion\nNormalize/Quaternion\nModulus/Quaternion\nNorm",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf97-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "|q|",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Quaternion\nNormalize/Quaternion\nModulus",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf98-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix/Quaternion\nNormalize",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf99-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to \nDirection Cosine Matrix",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf9a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf9b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)/Quaternion\nNormalize",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf9c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)/Quaternion\nNormalize/Quaternion Modulus",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf9d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)/Quaternion\nNormalize/Quaternion Modulus/Quaternion Norm",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf9e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "norm(q)",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)/Quaternion\nNormalize/Quaternion Modulus/Quaternion Norm",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcf9f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "|q|",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)/Quaternion\nNormalize/Quaternion Modulus",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "normal(q)",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)/Quaternion\nNormalize",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R1,R2,R3",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Quaternions to Rotation Angles (ZYX)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bcfa6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R1, R2, R3",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Rotation Angles to Quats (ZYX)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf600-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Quat",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/Rotation Angles to Quats (ZYX)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf601-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf602-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf603-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf604-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p\nq\nr",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/qd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf605-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q0\nq1\nq2\nq3",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/qd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf606-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "qdot",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles/qd",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf607-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf608-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Euler",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate DCM &\nEuler Angles",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf609-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p q r",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf60a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "I, I_dot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                6,
                3
            ],
            "width": 18,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf60b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Moments",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf60c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf60d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf60e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf60f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf610-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf611-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf612-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf613-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf614-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "C",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf615-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p q r",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/I x w",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf616-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Inertia",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/I x w",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf617-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "I * w",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/I x w",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf618-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "I_dot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/I x w1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf619-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p q r",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/I x w1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf61a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Id * w",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot/I x w1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf61b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "pdot qdot rdot",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Calculate omega_dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf61c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf61d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf61e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf61f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf620-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf621-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf622-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf623-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf624-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf625-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf626-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf627-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ResetIntegratorInternal2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf628-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf629-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "forces",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf62a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mass ",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf62b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "m_dot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf62c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "I",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf62d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "I_dot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf62e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "forces ",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf62f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "mass",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf630-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "inertia, 0",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                6,
                3
            ],
            "width": 18,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf631-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out9",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf632-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf633-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf634-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf635-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf636-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf637-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf638-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "x\ny\nz",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/transform to\nInertial axes ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf639-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "transform\ncoefficients",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/transform to\nInertial axes ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf63a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ve",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)/transform to\nInertial axes ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf63b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ve",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf63c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Xe",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf63d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Euler",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf63e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf63f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf640-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p,q,r",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf641-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "pdot,qdot,rdot",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf642-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ab",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/6DoF (Quaternion)",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf643-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "EnvirBus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                4,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                3
            ],
            "width": 8,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf644-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pilot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf645-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf646-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "FltParams",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                1
            ],
            "width": 7,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf647-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pilot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf648-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ac_dem",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf649-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf64a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf64b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf64c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf64d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf64e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf64f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf650-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf651-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf652-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf653-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf654-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf655-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ac_ac",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf656-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ac_dem",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf657-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf658-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf659-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf65a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf65b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf65c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf65d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf65e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf65f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf660-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf661-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf662-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf663-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ac_ac",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf664-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ac_dem",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf665-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf666-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf667-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf668-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf669-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf66a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf66b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf66c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ResetIntegratorInternal1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf66d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf66e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf66f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "R",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf670-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "IC",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf671-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Ac_ac",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators/sof2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf672-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "uaero-out",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Actuators",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf673-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Uaero",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf674-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "FltParams",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                1
            ],
            "width": 7,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf675-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alpha",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf676-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf677-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Actuator\nDeflections",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf678-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alpha",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Aileron",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf679-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Actuators",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Aileron",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf67a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Aileron",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf67b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Actuators",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Elevator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf67c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Beta",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Elevator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf67d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Elevator",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf67e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alpha",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Flap",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf67f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Actuators",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Flap",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf680-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Flap",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf681-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alpha",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Rudder",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf682-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Actuators",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Rudder",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                4
            ],
            "width": 4,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf683-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements/Rudder",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf684-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Coefficients",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Actuator\nIncrements",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf685-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Body Rate\nDamping",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf686-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p,q,r",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Body Rate\nDamping",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf687-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Body Rate\nDamping/p",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf688-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Body Rate\nDamping/q",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf689-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "delCoeff",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Body Rate\nDamping/r",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf68a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Coefficients",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Body Rate\nDamping",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf68b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alpha",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Datum Coefficients",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf68c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Datum Coefficients",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf68d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Coefficients",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics/Datum Coefficients",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf68e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Aero Coefficients",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Aerodynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf68f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Fltparams",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                1
            ],
            "width": 7,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf690-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pilot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf691-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "rho",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf692-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dpt",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /eng",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf693-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alpha",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /eng",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf694-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Cprop",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /eng",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf695-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "rho",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf696-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Pilot",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf697-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf698-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "In1",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow/calc",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf699-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow/calc",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf69a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "In1",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow/calc1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                2
            ],
            "width": 2,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf69b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow/calc1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf69c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dpt",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine /pow",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf69d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Engine Coefficients",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Engine ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf69e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Aero\nCoefficients",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf69f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Fltparams",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                1
            ],
            "width": 7,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Engine\nCoefficients",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Coefficients",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "qbar",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CG",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "CP",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6a9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6aa-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "A",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ab-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "B",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ac-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out1",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ad-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "C",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/3x3 CrossProduct",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ae-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/CG-CP Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6af-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "In",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/CG-CP Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/CG-CP Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/Force Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "In",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/Force Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/Force Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/Moment Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "In",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/Moment Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Out",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M/Moment Transformation",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Forces",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Moments",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments/Aero F&M",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6b9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "XYZ",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ba-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "LMN",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Forces and Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6bb-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "g",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Gravity ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6bc-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "DCM",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Gravity ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                2,
                3,
                3
            ],
            "width": 9,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6bd-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Fgrav",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments/Gravity ",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6be-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Total Force",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6bf-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Total Moment",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics/Total Forces \nand Moments",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AC Bus",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Aircraft Dynamics",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                3,
                1,
                3,
                1,
                3,
                1,
                3,
                2,
                3,
                3,
                1,
                3,
                1,
                3
            ],
            "width": 28,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "EnvirBus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                4,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                3
            ],
            "width": 8,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ACBus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                3,
                1,
                3,
                1,
                3,
                1,
                3,
                2,
                3,
                3,
                1,
                3,
                1,
                3
            ],
            "width": 28,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "w",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "v",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6c9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ca-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dot",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed/dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6cb-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alpha",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6cc-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Beta",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6cd-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ce-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Velocity",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/Dynamic Pressure",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6cf-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Air Density",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/Dynamic Pressure",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/Dynamic Pressure/dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dot",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/Dynamic Pressure/dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "qbar",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters/Dynamic Pressure",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "FltParams",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe/Calculate Parameters",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                7
            ],
            "width": 7,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ACBus",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/DeHavilland Beaver Airframe",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                3,
                1,
                3,
                1,
                3,
                1,
                3,
                2,
                3,
                3,
                1,
                3,
                1,
                3
            ],
            "width": 28,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "EnvBus",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Environment",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                4,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                3
            ],
            "width": 8,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AC Bus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                3,
                1,
                3,
                1,
                3,
                1,
                3,
                2,
                3,
                3,
                1,
                3,
                1,
                3
            ],
            "width": 28,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AC Bus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                3,
                1,
                3,
                1,
                3,
                1,
                3,
                2,
                3,
                3,
                1,
                3,
                1,
                3
            ],
            "width": 28,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6d9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6da-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "w",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6db-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "U",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/Subsystem",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6dc-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6dd-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "v",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/Subsystem1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6de-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Vb",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6df-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "dot",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed/dot",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Alpha",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Beta",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "V",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ Incidence, Sideslip, \n& Airspeed",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6e9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ea-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6eb-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ec-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "altRate",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ed-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alpha",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ee-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "beta",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ef-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "airspeed",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f0-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "alt",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Air Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f1-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AC Bus",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                8,
                1,
                1,
                1,
                3,
                1,
                3,
                1,
                3,
                1,
                3,
                2,
                3,
                3,
                1,
                3,
                1,
                3
            ],
            "width": 28,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f2-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f3-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f4-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                3
            ],
            "width": 3,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f5-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f6-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f7-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic1",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f8-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6f9-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6fa-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic2",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6fb-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "u",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6fc-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ic",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6fd-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "y",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor/ic3",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6fe-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf6ff-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "theta",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf700-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "psi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf701-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf702-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "q",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf703-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "r",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors/Inertial Data Sensor",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf704-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Altitude",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf705-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf706-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf707-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Psi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf708-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "ID",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                6
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf709-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AD",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Sensors",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                5
            ],
            "width": 5,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf70a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Aileron",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf70b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Elevator",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf70c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rudder",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf70d-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Flap",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf70e-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Throttle",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf70f-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Rudder Trim",
            "portType": "Inport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf710-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Controls",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope/Signal Conditioning",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                -2,
                2,
                1,
                4,
                1,
                2
            ],
            "width": 6,
            "fretComponent": "RollAutopilot",
            "_id": "fd6bf711-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Altitude",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d10-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d11-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d12-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Psi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d13-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phiCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d14-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HdgModeCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d15-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AileronCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted/GlobalScope",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d16-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Altitude",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d17-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Phi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d18-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "p",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d19-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "Psi",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d1a-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "phiCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d1b-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "HdgModeCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d1c-eae7-11ee-a45a-97cfe70a1faa"
        },
        {
            "project": "LM_requirements",
            "modeldoc": true,
            "variable_name": "AileronCmd",
            "portType": "Outport",
            "component_name": "ap_12BAdapted",
            "tool": "Simulink",
            "dataType": [
                "double"
            ],
            "dimensions": [
                1,
                1
            ],
            "width": 1,
            "fretComponent": "RollAutopilot",
            "_id": "fd6c1d1d-eae7-11ee-a45a-97cfe70a1faa"
        }
    ]
}